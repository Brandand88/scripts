#!/usr/bin/env bash
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2018 Nathan Chancellor
#
# Functions used to assist with ClangBuiltLinux development


# Universal variables
CBL_SRC_FOLDER=${CBL_FOLDER}/src
CBL_USR_FOLDER=${CBL_FOLDER}/usr

# Patch check function
function pch() {
    [[ -f scripts/checkpatch.pl ]] && git fp -1 --stdout "${@}" | ./scripts/checkpatch.pl
    [[ -f scripts/get_maintainer.pl ]] && git fp -1 --stdout "${@}" | ./scripts/get_maintainer.pl
}


# Quilt-like patch management function for Linux
function sync-patches() {
    [[ ! -f Makefile ]] && { display_error "You're not in a kernel folder!"; return 1; }

    TARGET_FOLDER=${REPO_FOLDER}/patches/linux/$(git cb)

    [[ ! -d ${TARGET_FOLDER} ]] && { display_error "${TARGET_FOLDER} doesn't exist, create it if this is intentional"; return 1; }

    FIRST_HASH=$(git log --reverse --format=%H --committer="$(git config --get user.name) <$(git config --get user.email)>" origin/stable..HEAD | head -n1)

    rm "${TARGET_FOLDER}"/*

    git fp -o "${TARGET_FOLDER}" "${FIRST_HASH}"^..HEAD

    git -C "${TARGET_FOLDER}" aa

    git -C "${TARGET_FOLDER}" c -m "patches: linux: $(git cb): Sync as of $(git sh -s --format=%h)"

    git -C "${TARGET_FOLDER}" push
}


# Build kernel with Clang (wrapper)
function bldkw() {
    local TARGET_ARCH MAKE_FLAGS

    if [[ ! -f Makefile ]]; then
        display_error "No Makefile found! Are you in a kernel tree?"
        return
    fi

    TARGET_ARCH=${1}; shift
    case "${TARGET_ARCH}" in
        "arm") MAKE_FLAGS=( "ARCH=arm" "CROSS_COMPILE=arm-linux-gnueabi-" ) ;;
        "arm64") MAKE_FLAGS=( "ARCH=arm64" "CROSS_COMPILE=aarch64-linux-gnu-" ) ;;
        "x86") MAKE_FLAGS=() ;;
        *) display_error "Invalid TARGET_ARCH specified!"; return ;;
    esac

    time PATH=${PATH_OVERRIDE:+"${PATH_OVERRIDE}:"}${CBL_USR_FOLDER}/bin:${PATH} \
    make "${JOBS_FLAG}" \
         CC="${CCACHE} clang" \
         HOSTCC=clang \
         HOSTLD=ld.lld \
         "${MAKE_FLAGS[@]}" \
         O="${BUILD_FOLDER}" \
         "${@}"
}


# Extra configs for build/boot testings
# From https://github.com/groeck/linux-build-test/blob/master/rootfs/scripts/common.sh
function extraconfigs() {
    local OUT_FOLDER="${BUILD_FOLDER}"

    echo "CONFIG_EXPERT=y
CONFIG_DEBUG_KERNEL=y
CONFIG_LOCK_DEBUGGING_SUPPORT=y
CONFIG_DEBUG_RT_MUTEXES=y
CONFIG_DEBUG_SPINLOCK=y
CONFIG_DEBUG_MUTEXES=y
CONFIG_DEBUG_WW_MUTEX_SLOWPATH=y
CONFIG_DEBUG_LOCK_ALLOC=y
CONFIG_DEBUG_LOCKDEP=y
CONFIG_DEBUG_ATOMIC_SLEEP=y
CONFIG_CRYPTO_MANAGER_DISABLE_TESTS=y
CONFIG_CRC32_SELFTEST=y
CONFIG_DEBUG_LOCKING_API_SELFTESTS=y
CONFIG_DEBUG_NMI_SELFTEST=y
CONFIG_DEBUG_RODATA_TEST=y
CONFIG_DEBUG_TLBFLUSH=y
CONFIG_DMATEST=y
CONFIG_GLOB_SELFTEST=y
CONFIG_PCI_EPF_TEST=y
CONFIG_PCI_ENDPOINT_TEST=y
CONFIG_PROVE_LOCKING=y
CONFIG_PROVE_RCU=y
CONFIG_RBTREE_TEST=y
CONFIG_RCU_EQS_DEBUG=y
CONFIG_STATIC_KEYS_SELFTEST=y
CONFIG_STRING_SELFTEST=y
CONFIG_TEST_BITMAP=y
CONFIG_TEST_FIRMWARE=y
CONFIG_TEST_SORT=y
CONFIG_TEST_SYSCTL=y
CONFIG_TEST_UUID=y
CONFIG_TORTURE_TEST=y
CONFIG_USB_TEST=y
CONFIG_USB_EHSET_TEST_FIXTURE=y
CONFIG_USB_LINK_LAYER_TEST=y
CONFIG_WW_MUTEX_SELFTEST=y
CONFIG_BLK_DEV_INITRD=y
CONFIG_DEVTMPFS=y
CONFIG_DEVTMPFS_MOUNT=y
CONFIG_SCSI=y
CONFIG_BLK_DEV_SD=y
CONFIG_SCSI_LOWLEVEL=y
CONFIG_SCSI_DC395x=y
CONFIG_SCSI_AM53C974=y
CONFIG_SCSI_SYM53C8XX_2=y
CONFIG_MEGARAID_SAS=y
CONFIG_FUSION=y
CONFIG_FUSION_SAS=y
CONFIG_MMC=y
CONFIG_MMC_SDHCI=y
CONFIG_MMC_SDHCI_PCI=y
CONFIG_BLK_DEV_NVME=y
CONFIG_USB=y
CONFIG_USB_XHCI_HCD=y
CONFIG_USB_EHCI_HCD=y
CONFIG_USB_OHCI_HCD=y
CONFIG_USB_STORAGE=y
CONFIG_USB_UAS=y
CONFIG_VIRTIO=y
CONFIG_VIRTIO_PCI=y
CONFIG_VIRTIO_PCI_LEGACY=y
CONFIG_VIRTIO_BALLOON=y
CONFIG_VIRTIO_MMIO=y
CONFIG_BLK_MQ_VIRTIO=y
CONFIG_VIRTIO_BLK=y
CONFIG_VIRTIO_BLK_SCSI=y
CONFIG_SCSI_VIRTIO=y" >> "${OUT_FOLDER}"/.config

    [[ ${ARCH} =~ arm ]] && echo "CONFIG_LOCK_TORTURE_TEST=y
CONFIG_RCU_TORTURE_TEST=y" >> "${OUT_FOLDER}"/.config

    bldkw "${ARCH}" olddefconfig &>/dev/null
}


# Configure and build a kernel with Clang
function bldk() {
    # Parameters
    local ARCH CONFIG
    ARCH=${1}; shift
    CONFIG=${1}; shift

    # Sanity checks
    [[ -z ${ARCH} ]] && { display_error "ARCH not specified!"; return 1; }
    [[ -z ${CONFIG} ]] && { display_error "CONFIG not specified!"; return 1; }
    case ${ARCH} in
        "arm"|"arm64"|"x86") ;;
        *) display_error "Invalid ARCH specifed"; return 1 ;;
    esac

    # Clean up
    cbf

    # Configure kernel
    bldkw "${ARCH}" "${CONFIG}" modules_prepare
    [[ ${PWD} =~ cbl && ${CONFIG} =~ defconfig ]] && extraconfigs

    # Build kernel
    bldkw "${ARCH}" "${@}" || return 1
}


# Configure and build a folder in the kernel with Clang
function bldkf() {
    # Parameters
    local ARCH CONFIG FOLDER
    ARCH=${1}; shift
    CONFIG=${1}; shift
    FOLDER=${1}; shift

    [[ -z ${FOLDER} ]] && { display_error "FOLDER not specified!"; return 1; }
    [[ ! -d ${FOLDER} ]] && { display_error "${FOLDER} could not be found!"; return 1; }

    bldk "${ARCH}" "${CONFIG}" M="${BUILD_FOLDER}" src="${FOLDER}" "${@}"
}


# Boot a kernel in QEMU
function bootk() {
    local ARCH IMAGES_FOLDER KERNEL QEMU; ARCH=${1}; shift
    [[ -z ${ARCH} ]] && { display_error "ARCH not specified!"; return 1; }

    IMAGES_FOLDER=${CBL_FOLDER}/git/ci-master/images
    [[ ! -d ${IMAGES_FOLDER} ]] && { display_error "${IMAGES_FOLDER} doesn't exist!"; return 1; }

    case ${ARCH} in
        "arm")
            IMAGE=zImage
            QEMU=qemu-system-arm
            QEMU_ARCH_CMDLINE=( -machine virt
                                -no-reboot
                                -drive "file=${IMAGES_FOLDER}/arm/rootfs.ext4,format=raw,id=rootfs,if=none"
                                -device "virtio-blk-device,drive=rootfs"
                                -append "console=ttyAMA0 root=/dev/vda" ) ;;
        "arm64")
            IMAGE=Image.gz
            QEMU=qemu-system-aarch64
            QEMU_ARCH_CMDLINE=( -machine virt
                                -cpu cortex-a57
                                -drive "file=${IMAGES_FOLDER}/arm64/rootfs.ext4,format=raw"
                                -append "console=ttyAMA0 root=/dev/vda" ) ;;
        "x86")
            IMAGE=bzImage
            QEMU=qemu-system-x86_64
            QEMU_ARCH_CMDLINE=( -append "root=/dev/sda console=ttyS0"
                                -cpu host
                                -d unimp,guest_errors
                                -drive "file=${IMAGES_FOLDER}/x86_64/rootfs.ext4,format=raw,if=ide"
                                -enable-kvm ) ;;
        *) display_error "Invalid ARCH specified!"; return 1 ;;
    esac

    KERNEL=${BUILD_FOLDER}/arch/${ARCH}/boot/${IMAGE}
    [[ ! -f ${KERNEL} ]] && { display_error "Kernel doesn't exist! Please build one."; return 1; }

    # Update the images
    git -C "${IMAGES_FOLDER}" rh --quiet
    git -C "${IMAGES_FOLDER}" pull --quiet

    # Run the command
    timeout 2m unbuffer ${QEMU} "${QEMU_ARCH_CMDLINE[@]}" -kernel "${KERNEL}" -m 512m -nographic "${@}"
}


# Build a kernel and boot it
function babk() {
    local ARCH
    ARCH=${1}; shift
    [[ -z ${ARCH} ]] && { display_error "ARCH not specified!"; return 1; }

    bldk "${ARCH}" defconfig KCFLAGS="-Werror" "${@}"

    bootk "${ARCH}"
}


# linux-next testing
function lnt() {
    local CONFIG CONFIGS DEBUG LOG MESSAGE TMP

    while [[ ${#} -ge 1 ]]; do
        case ${1} in
            "-d"|"--debug") DEBUG=true ;;
        esac
        shift
    done

    # Logging
    LOG=$(mktemp)

    # Configurations known to build with -Werror
    CONFIGS=( "arm:multi_v7_defconfig"
              "arm:allyesconfig"
              "arm64:defconfig"
              "arm64:allyesconfig"
              "x86:defconfig"
              "x86:allyesconfig" )

    for CONFIG in "${CONFIGS[@]}"; do (
        ARCH=${CONFIG%%:*}
        CONFIG=${CONFIG##*:}

        START=$(date +%s)

        # Error log
        TMP=$(mktemp)

        # Use lld for arm{32,64} defconfig
        [[ ${ARCH} =~ arm && ${CONFIG} =~ defconfig ]] && LD=ld.lld

        # Build kernel silently normally
        if [[ -z ${DEBUG} ]]; then
            bldk "${ARCH}" "${CONFIG}" KCFLAGS="-Werror" ${LD:+LD="${LD}"} |& \
            rg --color=never "error:|warning:|undefined" > "${TMP}"
        else
            bldk "${ARCH}" "${CONFIG}" KCFLAGS="-Werror" ${LD:+LD="${LD}"}
        fi

        # Make sure that if make fails, it gets propgated to the if statement
        if [[ ${PIPESTATUS[0]} -eq 0 ]]; then
            RESULT=Success
        else
            RESULT=Failed
        fi
        TIME_STRING=$(format_time "${START}" "$(date +%s)")
        {
            echo "${ARCH}:${CONFIG} | ${RESULT} in ${TIME_STRING,,}"
            [[ -z ${DEBUG} && ${RESULT} = "Failed" ]] && cat "${TMP}"
            echo
        } >> "${LOG}"
        rm "${TMP}"
    ) done

    MESSAGE="linux$(cat localversion-next) build results: $(deldog "${LOG}")"

    tg_msg "${MESSAGE}"

    clear
    echo
    echo "${MESSAGE}"
    echo

    rm "${LOG}"
}


# Pull the latest CBL Docker image and run it
function dckrrn() {
    docker pull clangbuiltlinux/ubuntu
    docker run --interactive \
               --mount type=bind,source="${PWD}",target=/"$(basename "${PWD}")",readonly \
               --privileged \
               --rm \
               --tty \
               --workdir /"$(basename "${PWD}")" \
               clangbuiltlinux/ubuntu
}


# Build Clang
function bldcl() {(
    { cbf && cd "${BUILD_FOLDER}"; } || die "wtf"
    cmake -G Ninja -DCMAKE_BUILD_TYPE=Release \
                   -DCMAKE_C_COMPILER=clang \
                   -DCMAKE_C_FLAGS="-O2 -march=native -mtune=native" \
                   -DCMAKE_CXX_COMPILER=clang++ \
                   -DCMAKE_CXX_FLAGS="-O2 -march=native -mtune=native" \
                   -DCMAKE_INSTALL_PREFIX="${INSTALL_FOLDER:+"${CBL_USR_FOLDER}"}" \
                   -DLLVM_BINUTILS_INCDIR="${CBL_SRC_FOLDER}/binutils/include" \
                   -DLLVM_ENABLE_BINDINGS=OFF \
                   -DLLVM_CCACHE_BUILD=ON \
                   -DLLVM_ENABLE_OCAMLDOC=OFF \
                   -DLLVM_ENABLE_WARNINGS=OFF \
                   -DLLVM_INCLUDE_EXAMPLES=OFF \
                   -DLLVM_INCLUDE_TESTS=OFF \
                   -DLLVM_INCLUDE_DOCS=OFF \
                   -DLLVM_TARGETS_TO_BUILD="ARM;AArch64;PowerPC;X86" \
                   -DLLVM_USE_LINKER=lld "${CBL_SRC_FOLDER}"/llvm
    time ninja || die "Error building Clang/lld!"
)}


# Build Clang, lld. and arm{32,64} and powerpc binutils from source
function bldusr() {(
    # Update/clone LLVM/Clang
    if [[ ! -d ${CBL_SRC_FOLDER}/llvm ]]; then
        git -C "${CBL_SRC_FOLDER}" clone --single-branch -b master https://git.llvm.org/git/llvm.git
        git -C "${CBL_SRC_FOLDER}" clone --single-branch -b master https://git.llvm.org/git/clang.git llvm/tools/clang
        git -C "${CBL_SRC_FOLDER}" clone --single-branch -b master https://git.llvm.org/git/lld.git llvm/tools/lld
    else
        for REPO_FOLDER in llvm llvm/tools/clang llvm/tools/lld; do
            git -C "${CBL_SRC_FOLDER}/${REPO_FOLDER}" pull --rebase || die "Error updating ${REPO_FOLDER}!"
        done
    fi

    # Update/clone binutils
    if [[ ! -d ${CBL_SRC_FOLDER}/binutils ]]; then
        git -C "${CBL_SRC_FOLDER}" clone --single-branch -b master git://sourceware.org/git/binutils-gdb.git binutils
    else
        git -C "${CBL_SRC_FOLDER}"/binutils pull --rebase || die "Error updating ${CBL_SRC_FOLDER}/binutils"
    fi

    # Build Clang and lld
    INSTALL_FOLDER=${CBL_USR_FOLDER}
    bldcl
    rm -rf "${INSTALL_FOLDER}"
    ninja -C "${CBL_SRC_FOLDER}/llvm/build" install || die "Error installing Clang/lld!"

    # Build binutils
    cd "${CBL_SRC_FOLDER}"/binutils || die "Error moving into ${CBL_SRC_FOLDER}/binutils"
    for TUPLE in host arm-linux-gnueabi aarch64-linux-gnu powerpc-linux-gnu; do
        { cbf && cd "${BUILD_FOLDER}"; } || die "wtf"
        # SC2191: The = here is literal. To assign by index, use ( [index]=value ) with no spaces. To keep as literal, quote it.
        # shellcheck disable=SC2191
        COMMON_FLAGS=( --enable-deterministic-archives
                       --enable-gold
                       --enable-plugins
                       --enable-relro
                       --disable-gdb
                       --disable-nls
                       --disable-sim
                       --disable-werror
                       --with-pic
                       --with-system-zlib
                       CFLAGS="-O2 -march=native -mtune=native"
                       CXXFLAGS="-O2 -march=native -mtune=native" )
        case ${TUPLE} in
            "host")
                "${CBL_SRC_FOLDER}"/binutils/configure "${COMMON_FLAGS[@]}"
                make configure-host ;;
            *)
                "${CBL_SRC_FOLDER}"/binutils/configure --target=${TUPLE} \
                                                   --program-prefix=${TUPLE}- \
                                                   "${COMMON_FLAGS[@]}" ;;
        esac
        time make "${JOBS_FLAG}" || die "Error building ${TARGET} binutils"
        make prefix="${INSTALL_FOLDER}" install || die "Error installing ${TARGET} binutils"
        cd ..
    done
)}
