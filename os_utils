#!/usr/bin/env bash
#
# Utility and terminal setup functions (usually for .bashrc)
#
# Copyright (C) 2017 Nathan Chancellor
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>


# SOURCE OUR UNIVERSAL FUNCTIONS SCRIPT (DON'T MAC CHECK THOUGH)
source common -m

# SOURCE THE OS SPECIFIC FUNCTIONS
source ${SCRIPTS_FOLDER}/os_${OS}

function aliases() {
    # tmux alias
    alias tmux='tmux -u'

    # Alias hub to git
    alias git='hub'

    alias gf='git fetch'
    alias gcp='git cherry-pick'
    alias gcpa='git cherry-pick --abort'
    alias gcpe='git cherry-pick --edit'
    alias gcpc='git cherry-pick --continue'
    alias gcpq='git cherry-pick --quit'

    alias gph='git push'
    alias gpo='git push origin'
    alias gpf='git push --force'
    alias gpsu='git push --set-upstream origin'

    alias gpl='git pull'
    alias gm='git merge'
    alias gmc='git merge --continue'
    alias gma='git merge --abort'

    alias ga='git add'
    alias gaa='git add -A'

    alias gam='git am'

    alias gc='git commit --signoff'
    alias gac='git commit --signoff --all'
    alias gca='git commit --amend'
    alias gcas='git commit --amend --signoff'
    alias gcaa='git commit --amend --all'

    alias grhe='git reset HEAD'
    alias grh='git reset --hard'
    alias grs='git reset --soft'

    alias glg='git log'
    alias glp="git log -p"
    alias gl='git log --oneline'
    alias gb='git branch -v'
    alias gbd='git branch -D'

    alias gs='git status'

    alias grm='git remote'

    alias gch='git checkout'
    alias gcb='git checkout -b'

    alias grb='git rebase'
    alias grbi='git rebase -i'
    alias grba='git rebase --abort'
    alias grbc='git rebase --continue'

    alias gdh='git diff HEAD'
    alias gdc='git diff --cached'

    alias gsh='git show'
    alias gshs='git show --stat'
    alias gshss='git show --stortstat'
}

# Try to attach via tmux
function tmux_attach() {
    if [[ -z ${TMUX} ]]; then
        ID=$(tmux ls | grep -vm1 attached | cut -d: -f1)
        [[ -z ${ID} ]] && tmux -u new-session \
                       || tmux -u attach-session -t ${ID}
    fi
}

# Add something to PATH but only if it isn't already there
function add_to_path_pre() {
    [[ ! $(echo ${PATH} | ag -s --nocolor ${1}) ]] && export PATH="${1}:${PATH}"
}

function add_to_path_post() {
    [[ ! $(echo ${PATH} | ag -s --nocolor ${1}) ]] && export PATH="${PATH}:${1}"
}

function bash_setup() {
    aliases
    ${OS}_aliases
    tmux_attach
    ${OS}_prompt
    ${OS}_setup
    add_to_path_pre ${SCRIPTS_FOLDER}
}

# bashrc update function
function buf() {
    source ${SCRIPTS_FOLDER}/os_utils
    bash_setup
}

# EXKM to RC converter
function exkm2rc {
    sed -e 's/^/   write /' ${1} > ${2}
}

function gerrit-push {
    local ROM=${1}
    local PROJECT=${2}

    local URL
    local USER=nathanchance

    case ${1} in
        "du")
            URL=gerrit.dirtyunicorns.com
            BRANCH=n7x ;;
        "du-caf")
            URL=gerrit.dirtyunicorns.com
            BRANCH=n7x-caf ;;
        "omni")
            URL=gerrit.omnirom.org
            BRANCH=android-7.1 ;;
        "subs")
            URL=substratum.review
            if [[ ${PROJECT} = "substratum/interfacer" ]]; then
                BRANCH=n-rootless
            else
                BRANCH=n-mr2
            fi ;;
    esac

    if [[ -z ${PROJECT} ]]; then
        PROJECT=$(grep "projectname" .git/config | sed 's/\tprojectname = //')
    fi

    if [[ -n ${PROJECT} ]]; then
        PROJECT=$(echo ${PROJECT} | sed 's/DirtyUnicorns\///')
        echo "Executing git push ssh://${USER}@${URL}:29418/${PROJECT} HEAD:refs/for/${BRANCH}"
        git push ssh://${USER}@${URL}:29418/${PROJECT} HEAD:refs/for/${BRANCH}
    else
        echo "wtf happened?"
    fi
}

function ex () {
	if [[ -f ${1} ]]; then
		case ${1} in
            *.tar.bz2)
                tar xjf ${1} ;;
            *.tar.gz)
                tar xzf ${1} ;;
            *.bz2)
                bunzip2 ${1} ;;
            *.rar)
                unrar x ${1} ;;
            *.gz)
                gunzip ${1} ;;
            *.tar)
                tar xf ${1} ;;
            *.tbz2)
                tar xjf ${1} ;;
            *.tgz)
                tar xzf ${1} ;;
            *.zip)
                unzip ${1} ;;
            *.Z)
                uncompress ${1} ;;
            *.7z)
                7z x ${1} ;;
            *)
                echo "'${1}' cannot be extracted via ex()" ;;
		esac
	else
		echo "'${1}' is not a valid file"
	fi
}

function transfer() {
    echo
    curl --upload-file ${1} https://transfer.sh/$(basename ${1})
    echo
    echo
}

function haste() {
    local OUTPUT CONTENTS

    if (( $# == 0 )) && [[ $(printf "%s" "${0}" | wc -c) > 0 ]]; then
        CONTENTS=${0}

    elif (( $# != 1 )) || [[ $1 =~ ^(-h|--help)$ ]]; then
        echo "Usage: ${0} FILE"
        echo "Upload contents of plaintext document to hastebin."
        echo "\nInvocation with no arguments takes input from stdin or pipe."
        echo "Terminate stdin by EOF (Ctrl-D)."
        return 1

    elif [[ -e ${1} && ! -f ${1} ]]; then
        echo "Error: Not a regular file."
        return 1

    elif [[ ! -e ${1} ]]; then
        echo "Error: No such file."
        return 1

    elif (( $(stat -c %s ${1}) > (512*1024**1) )); then
        echo "Error: File must be smaller than 512 KiB."
        return 1
    fi

    if [[ -n ${CONTENTS} ]] || [[ $(printf "%s" "${CONTENTS}" | wc -c) < 1 ]]; then
        CONTENTS=$(cat ${1})
    fi

    OUTPUT=$(curl -X POST -s -d "${CONTENTS}" https://hastebin.com/documents |\
             awk -F '"' '{print "https://hastebin.com/"$4}')

    if [[ -n ${OUTPUT} ]]; then
        echo ${OUTPUT}
        return 0
    fi
    echo "Upload failed."
    return 1
}
