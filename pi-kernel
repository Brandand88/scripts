#!/usr/bin/env bash
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2018 Nathan Chancellor
#
# Script to build and install a Raspberry Pi kernel image

# Source our universal functions script and macOS check
source common

# Kernel variable
KERNEL=kernel7

# Message file for Telegram messages
TG_MSG=/tmp/tg-msg.pi-kernel

# Check if we are compiling on the Raspberry Pi or not
[[ "$(whoami)" = "pi" ]] && PI=true

# Set toolchain to use
if [[ ! ${PI} ]]; then
    GCC6_FOLDER=/opt/armv7-eabihf--glibc--stable-2018.02-2
    GCC7_FOLDER=/opt/armv7-eabihf--glibc--bleeding-edge-2018.02-1
    if [[ "$*" =~ "-7" ]]; then
        [[ ! -f ${GCC7_FOLDER} ]] && die "GCC7 folder not found!"
        TOOLCHAIN=${GCC7_FOLDER}/bin/arm-buildroot-linux-gnueabihf-
    fi
    if [[ -z ${TOOLCHAIN} ]]; then
        [[ ! -f ${GCC6_FOLDER} ]] && die "GCC6 folder not found!"
        TOOLCHAIN=${GCC6_FOLDER}/bin/arm-buildroot-linux-gnueabihf-
    fi

    cd "${HOME}/kernels/pi" || die "Kernel source doesn't exist!"
else
    cd "${HOME}/Documents/Kernel" || die "Kernel source doesn't exist!"
fi

# Make function for both host and cross compiling
function kmake() {
    if [[ ${PI} ]]; then
        make "${JOBS_FLAG}" O=out "$@"
    else
        make "${JOBS_FLAG}" ARCH=arm CROSS_COMPILE="${CCACHE} ${TOOLCHAIN}" O=out "$@"
    fi
}

function build() {
    (
        START="$(date +"%s")"

        {
            echo "\`\`\`"
            echo "Raspberry Pi kernel build starting..."
            echo
            echo "Version $(make kernelversion)"
            echo "\`\`\`"
        } > ${TG_MSG}
        [[ ${PI} || "$*" =~ "-t" ]] && notify "$(cat "${TG_MSG}")"

        rm -rf out

        kmake bcm2709_defconfig

        if time kmake zImage modules dtbs; then
            RESULT_STRING="completed successfully"
        else
            RESULT_STRING="failed"
        fi
        {
            TIME_STRING="$(format_time "${START}" "$(date +"%s")")"
            echo "\`\`\`"
            echo "Raspberry Pi kernel build ${RESULT_STRING}!"
            echo
            echo "Duration: ${TIME_STRING,,}"
            echo "\`\`\`"
        } > ${TG_MSG}
        [[ ${PI} || "$*" =~ "-t" ]] && notify "$(cat "${TG_MSG}")"
    ) > /dev/null
}

function install() {
    (
        if [[ -f out/arch/arm/boot/zImage ]]; then
            sudo make O=out modules_install
            sudo cp out/arch/arm/boot/dts/*.dtb /boot/
            sudo cp out/arch/arm/boot/dts/overlays/*.dtb* /boot/overlays/
            sudo cp arch/arm/boot/dts/overlays/README /boot/overlays/
            sudo cp out/arch/arm/boot/zImage /boot/$KERNEL.img
        fi
    ) > /dev/null
}

[[ "$*" =~ "-b" ]] && build "$@"
[[ "$*" =~ "-i" ]] && install
