#!/usr/bin/env bash
#
# Utility and terminal setup functions for Linux
#
# Copyright (C) 2017 Nathan Chancellor
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>


# Linux specific aliases
function linux_aliases() {
    # default Arch ls alias
    alias ls='ls --color=auto'

    # Update alias
    alias update='trizen -Syyu'

    # Change directory aliases
    alias 6p='cd ${KERNEL_FOLDER}/flash/angler'
    alias ack='cd ${KERNEL_FOLDER}/sources/kernel-common'
    alias asu='cd ${REPO_FOLDER}/asu'
    alias cros='cd ${KERNEL_FOLDER}/sources/chromium'
    alias lnx='cd ${KERNEL_FOLDER}/sources/linux'
    alias pkg='cd ${REPO_FOLDER}/pkgbuilds'
    alias op5='cd ${KERNEL_FOLDER}/flash/op5'
    alias op5ak='cd ${KERNEL_FOLDER}/flash/anykernel2-op5'
    alias pxl2='cd ${KERNEL_FOLDER}/flash/wahoo'
    alias pxl2ak='cd ${KERNEL_FOLDER}/flash/anykernel2-wahoo'
    alias tlc='cd ${TC_FOLDER}'
    alias spt='cd ${SCRIPTS_FOLDER}'

    # Generate a kernel version for the current tree
    alias kver='make kernelversion'

    # Setup build for AOSP
    alias senv='. build/envsetup.sh'

    # Alias for flash-kernel script
    alias fk='flash-kernel'

    # Alias for merge-stable script
    alias ms='merge-stable'
}

# Setup PS1 and such
function linux_prompt() {
    source ~/.git-prompt.sh
    export GIT_PS1_SHOWDIRTYSTATE=1
    export GIT_PS1_SHOWUPSTREAM=auto
    export PROMPT_COMMAND='__git_ps1 "\[\033[01;34m\]\u@\h \[\033[01;32m\]\w\[\033[01;31m\]" " \[\033[39m\]\$\[\033[0m\] "'
}

# Setup ccache
# ccache_setup <size>
function ccache_setup() {
    if [[ -f ${CCACHE}  ]]; then
        if [[ -n ${1} ]]; then
            ccache -M "${1}"G &> /dev/null
            export USE_CCACHE=1
            add_to_path_pre "/usr/lib/ccache/bin"
        else
            display_error "Please specify ccache size!"
        fi
    else
        display_error "Please install ccache!"
    fi
}

# Additional setup steps for Linux
function linux_setup() {
    ccache_setup 200
    export LOG=/tmp/results.log
    add_to_path_post "${HOME}/.gem/ruby/2.5.0/bin"
}

# Repo sync shorthand
function rps {
    local ARGS

    if [[ -n ${1} ]]; then
        case ${1} in
            "g")
                ARGS=( vendor/google/build vendor/opengapps/sources/all vendor/opengapps/sources/arm vendor/opengapps/sources/arm64 ) ;;
            *)
                ARGS=( "$@" ) ;;
        esac
    fi

    repo sync "${JOBS_FLAG}" --force-sync -c --no-clone-bundle --no-tags --optimized-fetch --prune "${ARGS[@]}"
}

# Repo init and sync function
# ris <url> <branch> |-s|
function ris {
    # User requested a shallow clone
    [[ ${3} = "-s" ]] && local DEPTH="--depth=1"

    repo init -u "${1}" -b "${2}" --no-clone-bundle ${DEPTH}

    time repo sync "${JOBS_FLAG}" --force-sync -c --no-clone-bundle --no-tags --optimized-fetch --prune
}

# Add kernel remotes to a kernel repo
function kremotes() {
    if [[ ! -f Makefile ]]; then
        display_error "Run this in a kernel tree!"
        return 1
    fi

    git remote add aosp-kc https://android.googlesource.com/kernel/common
    git remote add aosp-msm https://android.googlesource.com/kernel/msm
    git remote add chromium https://chromium.googlesource.com/chromiumos/third_party/kernel
    git remote add caf-4.4 https://source.codeaurora.org/quic/la/kernel/msm-4.4
    git remote add linux https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
    git remote add linux-stable https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git
    git remote add linux-stable-rc https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable-rc.git

    git remote update
}

# Merge one git tag into current branch
# mrgt <tag> [<remote|url>]
function merge-tag() {
    [[ $# -gt 1 ]] && git fetch --tags "${2}"

    local MSG_FILE=/tmp/mrg-msg
    local CB; CB=$(git rev-parse --abbrev-ref HEAD | sed 's/-queue-[0-9].*//')
    local TAG=${1}
    local RANGE=${CB}..${TAG}

    rm -rf ${MSG_FILE}
    {
        echo "Merge ${TAG} into ${CB}"

        echo "\nCommits in ${TAG}: ($(git rev-list --count "${RANGE}") commits)"
        git log --reverse --format="        %s" "${RANGE}"

        echo "\nSigned-off-by: $(git config --get user.name) <$(git config --get user.email)>"
    } > ${MSG_FILE}

    if ! GIT_MERGE_VERBOSITY=1 git merge --gpg-sign --no-edit "${TAG}"; then
        echo "\nConflicts:" >> ${MSG_FILE}
        for FILE in $(git cf); do
            echo "\t${FILE}" >> ${MSG_FILE}
        done

        display_error "Merge needs manual intervention!

Resolve conflicts then run git fm!"
        return 1
    else
        git commit --amend --no-edit --quiet --gpg-sign --file ${MSG_FILE}
        header "${TAG} merged cleanly!" "${GRN}"
    fi
}

# Neofetch alias
function nf() {
    echo
    neofetch \
        --kernel_shorthand on \
        --distro_shorthand tiny \
        --os_arch off \
        --uptime_shorthand tiny \
        --speed_shorthand on \
        --install_time off \
        --color_blocks off
    echo
    echo
}

# Find config values in a kernel tree
# kfg [-c <defconfig_file>] [-f <config>] [-e <config>] [-d <config>]
function kfg() {
    # shellcheck disable=SC2155
    local DEFCONFIGS="$(ls arch/arm64/configs/flash*_defconfig 2>/dev/null)"
    local CONFIG LIST

    while [[ $# -ge 1 ]]; do
        case ${1} in
            "-c"|"--config")
                shift

                DEFCONFIGS=${1} ;;

            "-d"|"--disable")
                shift

                CONFIG=${1//CONFIG_/}
                for DEFCONFIG in ${DEFCONFIGS}; do
                    echo "# CONFIG_${CONFIG} is not set" >> arch/arm64/configs/"$(basename "${DEFCONFIG}")"
                done ;;

            "-e"|"--enable")
                shift

                CONFIG=${1//CONFIG_/}

                for DEFCONFIG in ${DEFCONFIGS}; do
                    echo "CONFIG_${CONFIG}=y" >> arch/arm64/configs/"$(basename "${DEFCONFIG}")"
                done ;;

            "-f"|"--find")
                shift

                CONFIG=${1//CONFIG_/}

                header "LOCATIONS OF ${CONFIG} IN TREE"
                git grep -n -1 "${CONFIG}" | ag --nocolor Kconfig

                LIST=$(ag --nocolor "${CONFIG}" out/.config)
                if [[ -n ${LIST} ]]; then
                    header "LOCATIONS OF ${CONFIG} IN CONFIG FILE"
                    echo "${LIST}"
                fi

                echo ;;

            "-u"|"--update")
                shift

                for DEFCONFIG in ${DEFCONFIGS}; do
                    rm -rf out
                    make O=out ARCH=arm64 "$(basename "${DEFCONFIG}")"
                    make O=out ARCH=arm64 savedefconfig
                    cp -v out/defconfig arch/arm64/configs/"$(basename "${DEFCONFIG}")"
                done ;;
        esac

        shift
    done
}

# Build a toolchain and release Flash Kernel builds
# frel <device> <version> [-nt]
function frel() {
    case ${1} in
        "op5")
            case ${2} in
                1.*)
                    flash-kernel -v "${2}" -m stable -d op5 -os Custom -b 7.1.x-custom -av 7.1.x -t
                    flash-kernel -v "${2}" -m stable -d op5 -os OOS -b 7.1.x-oos -av 7.1.x -t ;;
                2.*)
                    flash-kernel -v "${2}" -m stable -d op5 -os Custom -b 8.0.0-custom -av 8.0.0 -t
                    flash-kernel -v "${2}" -m stable -d op5 -os OOS -b 8.0.0-oos -av 8.0.0 -t ;;
                3.*)
                    flash-kernel -v "${2}" -m stable -d op5 -b 8.x-unified -av 8.x -t ;;
                4.*)
                    flash-kernel -v "${2}" -m stable -d op5 -b 8.1.0-unified -av 8.x -t ;;
            esac ;;

        "pxl2")
            flash-kernel -v "${2}" -m stable -d taimen -b oreo-m2 -t
            flash-kernel -v "${2}" -m stable -d walleye -b oreo-m2 -t ;;
    esac
}

# Build Flash Kernel test builds
# ftest <device> <version> <dirty_version> <type>
function ftest() {
    case ${1} in
        "op5")
            case ${2} in
                1.*)
                    flash-kernel -v "${2}" -r "${3}" -m "${4}" -d op5 -os Custom -b "queue-${2}" -av 7.1.x -t
                    flash-kernel -v "${2}" -r "${3}" -m "${4}" -d op5 -os OOS -b "queue-${2}" -av 7.1.x -t ;;
                2.*)
                    flash-kernel -v "${2}" -r "${3}" -m "${4}" -d op5 -os Custom -b "queue-${2}" -av 8.0.0 -t
                    flash-kernel -v "${2}" -r "${3}" -m "${4}" -d op5 -os OOS -b "queue-${2}" -av 8.0.0 -t ;;
                3.*|4.*)
                    flash-kernel -v "${2}" -r "${3}" -m "${4}" -d op5 -b "queue-${2}" -av 8.x -t ;;
            esac ;;

        "pxl2")
            flash-kernel -v "${2}" -r "${3}" -m "${4}" -d taimen -b "queue-${2}" -t
            flash-kernel -v "${2}" -r "${3}" -m "${4}" -d walleye -b "queue-${2}" -t ;;
    esac
}

# Regenerate Pixel 2 build binaries
function rpb() {
    cd "${KERNEL_FOLDER}/sources/aosp-pixel2" || return

    mkavenv
    . build/envsetup.sh
    lunch aosp_taimen-user
    make "${JOBS_FLAGS}" clean
    make "${JOBS_FLAGS}" dtc mkdtimg
    rmvenv

    cp out/host/linux-x86/bin/dtc "${BIN_FOLDER}"
    cp out/host/linux-x86/bin/mkdtimg "${BIN_FOLDER}"

    cd "${SCRIPTS_FOLDER}" || return

    git status
}

# Reset test build folders function
function wfr() {
    case ${1} in
        "op5")
            rm -rf "${WEB_FOLDER}"/downloads/kernels/op5/{7.1.x,8.0.0,8.1.0}/{custom,oos}/{alpha,beta,bisect,rc,tmp}/*
            rm -rf "${WEB_FOLDER}"/downloads/kernels/op5/8.x/{alpha,beta,bisect,rc,tmp}/* ;;
        "pxl2")
            rm -rf "${WEB_FOLDER}"/downloads/kernels/{taimen,walleye}/{8.0.0,8.1.0}/{alpha,beta,bisect,rc,tmp}/* ;;
    esac

    cd "${WEB_FOLDER}/downloads/kernels" || return
}

# Generate git hashes with their subject line and links upstream (markdown commit format)
function mcf() {
    case ${1} in
        "c") URL="https://source.codeaurora.org/quic/la/kernel/msm-4.4/commit/?id=" ;;
        "g") URL="https://android.googlesource.com/kernel/msm/+/" ;;
        "l") URL="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git/commit/?id=" ;;
        "o3") URL="https://github.com/OnePlusOSS/android_kernel_oneplus_msm8996/commit/" ;;
        "o4") URL="https://github.com/OnePlusOSS/android_kernel_oneplus_msm8998/commit/" ;;
    esac

    echo
    git show -s --format='%h ("%s")' "${2}"
    echo
    echo "ommit [\`$(git show -s --format=%h "${2}")\`](${URL}$(git show -s --format='%H) ("%s")' "${2}")"
    echo
}

# Sign zip files for TWRP flashability
function signzip() {
    local CUR_DIR; CUR_DIR=$(pwd)
    local FILE=${1}
    local KEY=testkey
    if echo "${FILE}" | grep -q -v zip; then
        display_error "This can only sign zip files!"
        return 1
    fi
    if [[ ! -f ${FILE} ]]; then
        display_error "Zip file does not exist!"
        return 1
    fi

    header "Signing ${FILE}"

    # Shift to the folder containing the zip
    cd "$(dirname "${FILE}")" || return

    # Get the zip name
    ZIP_NAME=$(basename "${FILE}" .zip)

    # Sign the zip
    java -jar "${BIN_FOLDER}/zipsigner-2.1.jar" \
              "${ZIP_NAME}.zip" \
              "${ZIP_NAME}-signed.zip"
              
    # Echo zip location
    echo "Signed zip: $(pwd)/${ZIP_NAME}-signed.zip\n"
    cd "${CUR_DIR}" || return
}


# Manage queue tags
# queue-tag [-c|-d] <version> <hash>
function queue-tag() {
    if [[ ! -f Makefile ]]; then
        display_error "Run this in a kernel tree!"
        return 1
    fi

    case ${1} in
        "-c"|"--create")
            git tag -d "queue-${2}" 2>/dev/null
            git tag -a "queue-${2}" -m "Queue for Flash v${2}" -s "${3:-HEAD}"
            git push -f origin "queue-${2}" ;;

        "-d"|"--delete")
            git tag -d "queue-${2}"
            git push origin :"queue-${2}" ;;
    esac
}

# Does it build function
function doesitbuild() {
    CUR_FOLDER=$(pwd)
    case ${CUR_FOLDER} in
        *wahoo*)
            flash-kernel -io ;;
        *op5*)
            flash-kernel -d op5 -os OOS -io
            flash-kernel -d op5 -os Custom -io
            clear
            tail -n 5 < "${LOG}" ;;
        *)
            return ;;
    esac
}


function ls-stats() {
    if [[ ! -f Makefile ]]; then
        display_error "Run this in a kernel tree!"
        return 1
    fi

    VER=${1}
    SBLVL=$(git tag --sort=-taggerdate -l v"${VER}"* | head -n 1 | sed s/v// | cut -d . -f 3)

    echo "Linux ${VER} was released on $(git log -1 --format=%ai v"${VER}")

The latest version of ${VER} is ${VER}.${SBLVL}, released on $(git log -1 --format=%ai v"${VER}.${SBLVL}")

Number of commits in each version of ${VER}:

v${VER}.1: $(git lo v"${VER}..v${VER}.1" | wc -l)
$(for i in $(seq 2 "${SBLVL}"); do echo "v${VER}.$i: $(git lo "v${VER}.$((i - 1))..v${VER}.$i" | wc -l)"; done)

Average number of commits in a version of ${VER}: $(($(git lo "v${VER}..v${VER}.${SBLVL}" | wc -l) / SBLVL))" > "${HOME}/web/stats/${VER}"
}


# Shellcheck function
function shellcheck() {
    SHELLCHECK_OPTS="-e SC1090 -e SC1091 -e SC1117 -e SC2028" command shellcheck "$@"
}


# makepkg wrapper for Linux kernel
function mkpkg() {
    if makepkg -si --noconfirm; then
        notify "\`Server kernel build completed successfully\`"
    else
        notify "\`Server kernel build failed\`"
    fi
}


# Apply stable-queue patches
function sq() {
    if [[ ! -f Makefile ]]; then
        display_error "Run this in a kernel tree!"
        return 1
    fi

    MAJOR=$(make kernelversion | cut -d . -f 1,2)
    SUBLEVEL=$(make kernelversion | cut -d . -f 3)

    QUEUE=${MAJOR}.$((SUBLEVEL + 1))

    if ! git rev-parse --verify "${QUEUE}-queue"; then
        git checkout -b "${QUEUE}-queue" v"${MAJOR}.${SUBLEVEL}"
    else
        git checkout "${QUEUE}-queue"
        git reset --hard v"${MAJOR}.${SUBLEVEL}"
    fi

    git -C "${HOME}/kernels/sources/stable-queue" pull
    git quiltimport --patches "${HOME}/kernels/sources/stable-queue/queue-${MAJOR}"
}


# Function to upload to del.dog
function deldog() {
    RESULT=$(curl -sf --data-binary @"${1:--}" https://del.dog/documents) || {
        echo "ERROR: failed to post document" >&2
        exit 1
    }
    KEY=$(jq -r .key <<< "${RESULT}")
    echo "https://del.dog/${KEY}"
    echo "https://del.dog/raw/${KEY}"
}


# Update all remotes and run git gc/prune
function clean-kernels() {
    REPOS="
${HOME}/kernels/als/marlin
${HOME}/kernels/als/mata
${HOME}/kernels/als/msm-3.18
${HOME}/kernels/als/msm-4.4
${HOME}/kernels/als/nash
${HOME}/kernels/als/op3
${HOME}/kernels/als/op5
${HOME}/kernels/als/sagit
${HOME}/kernels/als/tissot
${HOME}/kernels/als/wahoo
${HOME}/kernels/franco/mido
${HOME}/kernels/franco/op3
${HOME}/kernels/franco/op5
${HOME}/kernels/franco/tissot
${HOME}/kernels/flash/op5
${HOME}/kernels/flash/wahoo
${HOME}/kernels/pi
${HOME}/kernels/roms/aicp-op5
${HOME}/kernels/roms/aosip-mata
${HOME}/kernels/roms/gzr-op3
${HOME}/kernels/roms/gzr-op5"

    for REPO in ${REPOS}; do
        header "${REPO}"
        if cd "${REPO}"; then
            git fetch --all
            git reflog expire --all --expire=now
            git gc --aggressive --prune=now --force
        else
            display_error "$(basename "${REPO}") doesn't exist!"
        fi
    done
}


# Update AnyKernel2 from osm0sis's GitHub
function update-ak2() {
    REPOS="
${HOME}/kernels/flash/anykernel2-op5
${HOME}/kernels/flash/anykernel2-wahoo"

    for REPO in ${REPOS}; do
        header "Updating $(basename "${REPO}")"

        cd "${REPO}" || {
            display_error "${REPO} does not exist, please clone it from GitHub!"
            return 1
        }

        if ! git ls-remote --exit-code upstream 1>/dev/null; then
            git remote add upstream https://github.com/osm0sis/AnyKernel2
        fi

        CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

        git ch -q master
        git pull -q upstream master
        git push -q

        git ch -q "${CURRENT_BRANCH}"
        if ! git ml --no-edit master; then
            display_error "Conflicts detected! Please fix them then run 'git mc'"
            return 1
        fi
        git push -q
    done
    echo
}


# Build Chrome OS kernel
function chromeos-kernel() {
    local UPDATE VERSION
    cd "${HOME}/kernels/sources/chromium" || return

    while [[ $# -ge 1 ]]; do
        case ${1} in
            "-u"|"--update") UPDATE=true ;;
            *) VERSION=${1} ;;
        esac

        shift
    done
    echo

    # Checkout proper branch
    git checkout -q "chromeos-${VERSION:-4.4}"

    # Update
    [[ ${UPDATE} ]] && git pull

    # Configure
    git clean -fxdq
    mkdir -p out
    ./chromeos/scripts/prepareconfig chromeos-intel-pineview out/.config

    # Build the kernel
    time make "${JOBS_FLAG}" CC="${CCACHE} /opt/clang-7.x/bin/clang" O=out > /dev/null

    # Show version information
    if [[ -f out/arch/x86_64/boot/bzImage ]]; then
        echo "\nKernel version: $(cat out/include/config/kernel.release)"
    fi
    echo
}


# Build android/common kernel
function ac-kernel() {
    local CROSS_COMPILE_FOLDER TARGET_TRIPLE UPDATE VERSION
    cd "${HOME}/kernels/sources/kernel-common" || return

    while [[ $# -ge 1 ]]; do
        case ${1} in
            "-u"|"--update") UPDATE=true ;;
            *) VERSION=${1} ;;
        esac

        shift
    done
    echo

    [[ -z ${VERSION} ]] && VERSION=4.4
    
    # Checkout proper branch
    git checkout -q "android-${VERSION}"

    # Update
    [[ ${UPDATE} ]] && git pull

    # Configure
    git clean -fxdq
    mkdir -p out
    {
        case ${VERSION} in
            "4.4") ./android/configs/android-fetch-configs.sh ;;
            *) ./kernel/configs/android-fetch-configs.sh ;;
        esac
        cat arch/arm64/configs/defconfig \
            android-base.cfg \
            android-base-arm64.cfg \
            android-recommended.cfg > out/.config
        make ARCH=arm64 O=out olddefconfig prepare
    } &> /dev/null

    # Build the kernel
    time make "${JOBS_FLAG}" \
              ARCH=arm64 \
              CC="${CCACHE} /opt/aosp-clang/clang-4679922/bin/clang" \
              CROSS_COMPILE=/opt/aosp-gcc/bin/aarch64-linux-android- \
              O=out > /dev/null

    # Show version information
    if [[ -f out/arch/arm64/boot/Image ]]; then
        echo "\n${GRN}Kernel build successful!${RST}"
        echo "\n${BOLD}Kernel version:${RST} $(cat out/include/config/kernel.release)"
    else
        display_error "Kernel build failed!"
    fi
    echo
}
