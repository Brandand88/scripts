#!/usr/bin/env bash
#
# Utility and terminal setup functions for Linux
#
# Copyright (C) 2017 Nathan Chancellor
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>


# Linux specific aliases
function linux_aliases() {
    # default Arch ls alias
    alias ls='ls --color=auto'

    # Update alias
    alias update='pacaur -Syyu'

    # Change directory aliases
    alias 6p='cd ${KERNEL_FOLDER}/flash/angler'
    alias asu='cd ${REPO_FOLDER}/asu'
    alias ayk='cd ${KERNEL_FOLDER}/flash/anykernel2'
    alias lnx='cd ${KERNEL_FOLDER}/sources/linux'
    alias pkg='cd ${REPO_FOLDER}/pkgbuilds'
    alias op5='cd ${KERNEL_FOLDER}/flash/op5'
    alias pxl='cd ${KERNEL_FOLDER}/flash/wahoo'
    alias tlc='cd ${TC_FOLDER}'
    alias spt='cd ${SCRIPTS_FOLDER}'

    # Generate a kernel version for the current tree
    alias kver='make kernelversion'

    # Setup build for AOSP
    alias senv='. build/envsetup.sh'
}

# Setup PS1 and such
function linux_prompt() {
    source ~/.git-prompt.sh
    export GIT_PS1_SHOWDIRTYSTATE=1
    export GIT_PS1_SHOWUPSTREAM=auto
    export PROMPT_COMMAND='__git_ps1 "\[\033[01;34m\]\u@\h \[\033[01;32m\]\w\[\033[01;31m\]" " \[\033[39m\]\$\[\033[0m\] "'
}

# Log support so I can see what compiled and at what time
function log_support() {
    export LOG_FOLDER=${WEB_FOLDER}/me/logs

    # Create LOG_FOLDER if it doesn't exist
    if [[ ! -d ${LOG_FOLDER} ]]; then
        mkdir -p ${LOG_FOLDER}/results
    fi
    
    export LOG=${LOG_FOLDER}/results/compile_log_$(date +%m_%d_%y).log
}

# Setup ccache
# ccache_setup <size>
function ccache_setup() {
    if [[ -n $(command -v ccache) ]]; then
        if [[ -n ${1} ]]; then
            ccache -M ${1}G &> /dev/null
            export USE_CCACHE=1
            add_to_path_pre "/usr/lib/ccache/bin"
        else
            display_error "Please specify ccache size!"
        fi
    else
        display_error "Please install ccache!"
    fi
}

# Additional setup steps for Linux
function linux_setup() {
    ccache_setup 150
    log_support
}

# Repo sync shorthand
function rps {
    local ARGS

    if [[ -n ${1} ]]; then
        case ${1} in
            "g")
                ARGS="vendor/google/build "
                ARGS+="vendor/opengapps/sources/all "
                ARGS+="vendor/opengapps/sources/arm "
                ARGS+="vendor/opengapps/sources/arm64" ;;
            *)
                ARGS="$@" ;;
        esac
    fi

    repo sync ${JOBS_FLAG} --force-sync -c --no-clone-bundle --no-tags --optimized-fetch --prune ${ARGS}
}

# Repo init and sync function
# ris <url> <branch> |-s|
function ris {
    # User requested a shallow clone
    if [[ ${3} = "-s" ]]; then
        local DEPTH="--depth=1"
    fi

    repo init -u ${1} -b ${2} --no-clone-bundle ${DEPTH}

    time repo sync ${JOBS_FLAG} --force-sync -c --no-clone-bundle --no-tags --optimized-fetch --prune
}

# Update Linux stable mirror
function upstb() {
    CUR_FOLDER=$(pwd)

    if [[ ! -d ${KERNEL_FOLDER}/mirrors/linux-stable ]]; then
        cd ${KERNEL_FOLDER}/mirrors
        git clone --mirror https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git linux-stable
        cd linux-stable
        git remote set-url --push origin git@github.com:nathanchance/linux-stable
    fi

    if [[ ! -d ${KERNEL_FOLDER}/mirrors/linux-stable-rc ]]; then
        cd ${KERNEL_FOLDER}/mirrors
        git clone --mirror https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable-rc.git linux-stable-rc
    fi

    cd ${KERNEL_FOLDER}/mirrors/linux-stable

    git fetch -p origin
    git push --mirror

    cd ${KERNEL_FOLDER}/mirrors/linux-stable-rc

    git fetch -p origin

    cd ${CUR_FOLDER}
}

# Clone kernel repos
# ckr |-m|
function ckr() {
    if [[ "$@" =~ "-m" ]]; then
        FOLDER=${KERNEL_FOLDER}/mirrors
        local MIRROR="--mirror"
    else
        FOLDER=${KERNEL_FOLDER}/repos
    fi

    mkdir -p ${FOLDER}
    cd ${FOLDER}

    git clone ${MIRROR} https://android.googlesource.com/kernel/common aosp-kc
    git clone ${MIRROR} https://android.googlesource.com/kernel/msm aosp-msm
    git clone ${MIRROR} https://chromium.googlesource.com/chromiumos/third_party/kernel chromium
    git clone ${MIRROR} https://source.codeaurora.org/quic/la/kernel/msm-4.4 caf-4.4
    git clone ${MIRROR} https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git linux
    git clone ${MIRROR} https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git linux-stable
    git clone ${MIRROR} https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable-rc.git linux-stable-rc
}

# Update kernel repos
# ukr
function ukr() {
    CUR_FOLDER=$(pwd)

    REPO_LIST="aosp-kc aosp-msm caf-4.4 chromium linux linux-stable linux-stable-rc"
    for REPO in ${REPO_LIST}; do
        cd ${KERNEL_FOLDER}/mirrors/${REPO}
        git fetch -p origin
    done

    KERNEL_LIST="op5 wahoo"
    for KERNEL in ${KERNEL_LIST}; do
        cd ${KERNEL_FOLDER}/flash/${KERNEL}
        git remote update
    done

    cd ${CUR_FOLDER}
}

# Add kernel remotes to a kernel repo
function kremotes() {
    if [[ ! -f Makefile ]]; then
        display_error "Run this in a kernel tree!"
        return 1
    fi

    REPO_LIST="aosp-kc aosp-msm caf-4.4 chromium linux linux-stable linux-stable-rc"

    for REPO in ${REPO_LIST}; do add_remote ${REPO} ${KERNEL_FOLDER}/mirrors/${REPO}; done

    git remote update
}

# Merge one git tag into current branch
# mrgt <tag> [<remote|url>]
function mrgt() {
    if [[ $# -gt 1 ]]; then
        git fetch --tags ${2}
    fi

    local CB=$(git rev-parse --abbrev-ref HEAD)
    local TTM=${1}
    local RANGE=${CB}..${TTM}

    git merge --gpg-sign ${TTM} -m "Merge ${TTM} into ${CB}

Commits in ${TTM}: ($(git rev-list --count ${RANGE}) commits)
$(git log --reverse --format="        %s" ${RANGE})

Signed-off-by: $(git config --get user.name) <$(git config --get user.email)>"

    if [[ $? -ne 0 ]]; then
        display_error "Merge needs manual intervention!

Resolve conflicts then run git merge --continue!"
        return 1
    else
        header "${TTM} merged cleanly!" ${GRN}
    fi
}

# Neofetch alias
function nf() {
    echo
    neofetch \
        --kernel_shorthand on \
        --distro_shorthand tiny \
        --os_arch off \
        --uptime_shorthand tiny \
        --speed_shorthand on \
        --install_time off \
        --color_blocks off
    echo
    echo
}

# Find config values in a kernel tree
# kfg [-c <defconfig_file>] [-f <config>] [-e <config>] [-d <config>]
function kfg() {
    local DEFCONFIG CONFIG LIST

    while [[ $# -ge 1 ]]; do
        case ${1} in
            "-c"|"--config")
                shift

                DEFCONFIG=${1} ;;

            "-d"|"--disable")
                shift

                CONFIG=$(echo ${1} | sed s/CONFIG_//)

                if [[ -z ${DEFCONFIG} ]]; then
                    DEFCONFIG=flash_defconfig
                fi

                echo "# CONFIG_${CONFIG} is not set" >> arch/arm64/configs/${DEFCONFIG} ;;

            "-e"|"--enable")
                shift

                CONFIG=$(echo ${1} | sed s/CONFIG_//)

                if [[ -z ${DEFCONFIG} ]]; then
                    DEFCONFIG=flash_defconfig
                fi

                echo "CONFIG_${CONFIG}=y" >> arch/arm64/configs/${DEFCONFIG} ;;

            "-f"|"--find")
                shift

                CONFIG=$(echo ${1} | sed s/CONFIG_//)

                header "LOCATIONS OF ${CONFIG} IN TREE"
                git grep -n -1 ${CONFIG} | ag --nocolor Kconfig

                LIST=$(ag --nocolor ${CONFIG} out/.config)
                if [[ -n ${LIST} ]]; then
                    header "LOCATIONS OF ${CONFIG} IN CONFIG FILE"
                    echo "${LIST}"
                fi

                echo ;;

            "-u"|"--update")
                shift

                if [[ -z ${DEFCONFIG} ]]; then
                    DEFCONFIG=flash_defconfig
                fi

                rm -rf out
                make O=out ARCH=arm64 ${DEFCONFIG}
                make O=out ARCH=arm64 savedefconfig
                cp -v out/defconfig arch/arm64/configs/${DEFCONFIG} ;;
        esac

        shift
    done
}

# Build a toolchain and release Flash Kernel builds
# frel <device> <version> [-nt]
function frel() {
    case ${1} in
        "op5")
            case ${2} in
                1.*)
                    flash-kernel -v ${2} -m stable -d op5 -os Custom -b 7.1.x-custom -av 7.1.x
                    flash-kernel -v ${2} -m stable -d op5 -os OOS -b 7.1.x-oos -av 7.1.x ;;
                2.*)
                    flash-kernel -v ${2} -m stable -d op5 -os Custom -b 8.0.0-custom -av 8.0.0
                    flash-kernel -v ${2} -m stable -d op5 -os OOS -b 8.0.0-oos -av 8.0.0 ;;
            esac ;;

        "pxl2")
            flash-kernel -v ${2} -m stable -d taimen -b oreo-mr1
            flash-kernel -v ${2} -m stable -d walleye -b oreo-mr1 ;;
    esac
}

# Build Flash Kernel test builds
# ftest <device> <version> <dirty_version> <type>
function ftest() {
    case ${1} in
        "op5")
            case ${2} in
                1.*)
                    flash-kernel -v ${2} -r ${3} -m ${4} -d op5 -os Custom -b 7.1.x-custom-queue-${2} -av 7.1.x
                    flash-kernel -v ${2} -r ${3} -m ${4} -d op5 -os OOS -b 7.1.x-oos-queue-${2} -av 7.1.x ;;
                2.*)
                    flash-kernel -v ${2} -r ${3} -m ${4} -d op5 -os Custom -b 8.0.0-custom-queue-${2} -av 8.0.0
                    flash-kernel -v ${2} -r ${3} -m ${4} -d op5 -os OOS -b 8.0.0-oos-queue-${2} -av 8.0.0 ;;
            esac ;;

        "pxl2")
            flash-kernel -v ${2} -r ${3} -m ${4} -d taimen -b oreo-mr1-queue-${2}
            flash-kernel -v ${2} -r ${3} -m ${4} -d walleye -b oreo-mr1-queue-${2} ;;
    esac
}

# Manage test branches
# tst_brnch <device> [-c|-d] <version>
function tst_brnch() {
    if [[ ! -f Makefile ]]; then
        display_error "Run this in a kernel tree!"
        return 1
    fi

    case ${1} in
        "op5")
            case ${3} in
                1.*)
                    local BRANCHES="7.1.x-base 7.1.x-custom 7.1.x-oos" ;;
                2.*)
                    local BRANCHES="8.0.0-custom 8.0.0-oos" ;;
            esac ;;
        "pxl2")
            local BRANCHES="o-mr1-preview1" ;;
    esac

    for BRANCH in ${BRANCHES}; do
        QUEUE_BRANCH=${BRANCH}-queue-${3}
        case ${2} in
            "-c"|"--create")
                git checkout -b ${QUEUE_BRANCH} ${BRANCH}
                git push --set-upstream origin ${QUEUE_BRANCH} ;;

            "-d"|"--delete")
                git checkout ${BRANCH}
                git branch -d ${QUEUE_BRANCH}
                git push origin :${QUEUE_BRANCH} ;;
        esac
    done
}

# Regenerate Pixel 2 build binaries
function rpb() {
    cd ${KERNEL_FOLDER}/sources/aosp-pixel2

    mkavenv
    . build/envsetup.sh
    lunch aosp_taimen-user
    make ${JOBS_FLAGS} clean
    make ${JOBS_FLAGS} dtc mkdtimg
    rmvenv

    cp out/host/linux-x86/bin/dtc ${BIN_FOLDER}
    cp out/host/linux-x86/bin/mkdtimg ${BIN_FOLDER}

    cd ${SCRIPTS_FOLDER}

    git status
}

# Reset test build folders function
function wfr() {
    case ${1} in
        "op5")
            rm -rf ${WEB_FOLDER}/downloads/kernels/op5/{7.1.x,8.0.0}/{custom,oos}/{alpha,beta,rc,tmp}/* ;;
        "pxl2")
            rm -rf ${WEB_FOLDER}/downloads/kernels/{taimen,walleye}/{8.0.0,8.1.0}/{alpha,beta,rc,tmp}/* ;;
    esac

    cd ${WEB_FOLDER}/downloads/kernels
}

# Generate git hashes with their subject line and links upstream (markdown commit format)
function mcf() {
    case ${1} in
        "c") URL="https://source.codeaurora.org/quic/la/kernel/msm-4.4/commit/?id=" ;;
        "g") URL="https://android.googlesource.com/kernel/msm/+/" ;;
        "l") URL="https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git/commit/?id=" ;;
    esac

    echo
    echo "$(git show -s --format='%h ("%s")' ${2})"
    echo
    echo "ommit [\`$(git show -s --format=%h ${2})\`](${URL}$(git show -s --format='%H) ("%s")' ${2})"
    echo
}

# Sign zip files for TWRP flashability
function signzip() {
    local CUR_DIR=$(pwd)
    local FILE=${1}
    local KEY=testkey
    if [[ $(echo ${FILE} | grep -v zip) ]]; then
        display_error "This can only sign zip files!"
        return 1
    fi
    if [[ ! -f ${FILE} ]]; then
        display_error "Zip file does not exist!"
        return 1
    fi

    header "Signing ${FILE}"

    # Shift to the folder containing the zip
    cd $(dirname ${FILE})

    # Get the zip name
    ZIP_NAME=$(basename ${FILE} .zip)

    # Sign the zip
    java -jar ${BIN_FOLDER}/signapk.jar \
              ${BIN_FOLDER}/${KEY}.x509.pem \
              ${BIN_FOLDER}/${KEY}.pk8 \
              ${ZIP_NAME}.zip \
              ${ZIP_NAME}-firstsign.zip

    ${BIN_FOLDER}/zipadjust ${ZIP_NAME}-firstsign.zip \
                            ${ZIP_NAME}-adjusted.zip &>/dev/null

    java -jar ${BIN_FOLDER}/minsignapk.jar \
              ${BIN_FOLDER}/${KEY}.x509.pem \
              ${BIN_FOLDER}/${KEY}.pk8 \
              ${ZIP_NAME}-adjusted.zip \
              ${ZIP_NAME}-signed.zip
              
    # Remove intermediate zip files
    rm ${ZIP_NAME}-firstsign.zip ${ZIP_NAME}-adjusted.zip

    # Echo zip location
    echo "Signed zip: $(pwd)/${ZIP_NAME}-signed.zip\n"
    cd ${CUR_DIR}
}
