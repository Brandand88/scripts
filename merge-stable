#!/usr/bin/env bash
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2017-2018 Nathan Chancellor
#
# Pull in linux-stable updates to a kernel tree


# Source our universal functions script and Mac check
source common

# Parse the provided parameters
function parse_parameters() {
    while [[ ${#} -ge 1 ]]; do
        case ${1} in
            # Use git cherry-pick
            "-c"|"--cherry-pick")
                UPDATE_METHOD=cherry-pick ;;

            # Only update the linux-stable remotes
            "-f"|"--fetch-only")
                FETCH_REMOTES_ONLY=true ;;

            # Help menu
            "-h"|"--help")
                echo
                echo "${BOLD}Script description:${RST} Merges/cherry-picks Linux upstream into a kernel tree"
                echo
                echo "${BOLD}Optional parameters:${RST}"
                echo "    -c | --cherry-pick"
                echo "        Call git cherry-pick instead of git merge when updating from upstream"
                echo
                echo "    -f | --fetch-only"
                echo "        Simply fetches the linux-stable and linux-stable-rc remotes then exits"
                echo
                echo "    -i | --initial-merge"
                echo "        Do not add a commit log to the merge commit"
                echo
                echo "    -p | --print-latest"
                echo "        Prints the latest version available for the current kernel tree upstream then exits"
                echo
                echo "    -q | --queue"
                echo "        Use the patches from the stable queue"
                echo
                echo "    -r | --release-candidate"
                echo "        Update to the latest RC revision"
                echo
                echo "    -s | --single-version"
                echo "        Updates to the next immediate version available from linux-stable"
                echo
                echo "    -v | --version"
                echo "        Updates to the specified version (e.g. -v 3.18.78)"
                echo
                echo "${BOLD}Notes:${RST}"
                echo "    1. By default, the latest revision will be merged."
                echo "    2. If you already have a remote for upstream, rename it to linux-stable so that multiple ones do not get added!"
                echo
                exit 1 ;;

            # Don't add a log to the commit message
            "-i"|"--initial-merge")
                INITIAL_MERGE=true ;;

            # Print the latest version from kernel.org
            "-p"|"--print-latest")
                PRINT_LATEST=true ;;

            # Use the patches from the stable queue
            "-q"|"--queue")
                QUEUE=true
                UPDATE_MODE=0 ;;

            # Use the RC tree for updating
            "-r"|"--release-candidate")
                RC=true
                UPDATE_MODE=0 ;;

            # Update to the next available version from kernel.org
            "-s"|"--single-version")
                UPDATE_MODE=0 ;;

            # Update to the specified version
            "-v"|"--version")
                shift
                [[ ${#} -lt 1 ]] && die "Please specify a version to update!"
                UPDATE_MODE=1
                VERSION_SUPPLIED=${1} ;;

            *)
                die "Invalid parameter!" ;;
        esac

        shift
    done

    # Sanity checks
    [[ ! -f Makefile ]] && die "This is not being run in a kernel tree!" -h
    [[ -z ${UPDATE_METHOD} ]] && UPDATE_METHOD=merge
    [[ -z ${UPDATE_MODE} ]] && UPDATE_MODE=2
}


# Update the linux-stable{-rc} remotes (and add them if they doesn't exist)
function verify_remote() {
    add_remote "${1}" https://git.kernel.org/pub/scm/linux/kernel/git/stable/"${1}".git/

    if ! git fetch "${1}" && ! git fetch --tags "${1}"; then
        die "${1} remote update failed!"
    fi

    echo "${1} remote updated successfully!"
}


# Updates the linux-stable mirror on my GitHub
function update_stable_mirror() {
    CUR_FOLDER=${PWD}

    if [[ ! -d ${KERNEL_FOLDER}/mirrors/linux-stable ]]; then
        mkdir -p "${KERNEL_FOLDER}/mirrors"
        cd "${KERNEL_FOLDER}/mirrors" || die "Mirrors folder does not exist!"
        git clone --mirror https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git linux-stable
        cd linux-stable || die "linux-stable folder does not exist!"
        git remote set-url --push origin git@github.com:nathanchance/linux-stable
    fi

    cd "${KERNEL_FOLDER}/mirrors/linux-stable" || die "linux-stable folder does not exist!"

    git fetch -p origin
    if git push -q --mirror; then
        echo "linux-stable mirror updated successfully!"
    else
        echo "linux-stable mirror update failed!"
    fi

    cd "${CUR_FOLDER}" || die "Cannot return to previous folder!"
}

# Update the two linux-stable remotes
function update_sources() {
    header "Updating remotes"

    [[ "$(uname -n)" = "flashbox" ]] && update_stable_mirror
    verify_remote linux-stable
    verify_remote linux-stable-rc

    if [[ ${FETCH_REMOTES_ONLY} ]]; then
        echo
        exit 0
    fi
}


# Generate versions
function generate_versions() {
    header "Calculating versions"

    # Full kernel version
    CURRENT_VERSION=$(make kernelversion)
    # First two numbers (3.4 | 3.10 | 3.18 | 4.4)
    CURRENT_MAJOR_VERSION=${CURRENT_VERSION%.*}
    # Last number
    CURRENT_SUBLEVEL=${CURRENT_VERSION##*.}

    # Get latest update from upstream
    LATEST_VERSION=$(git tag --sort=-taggerdate -l v"${CURRENT_MAJOR_VERSION}"* | head -n 1 | sed s/v//)
    LATEST_SUBLEVEL=${LATEST_VERSION##*.}

    # Print the current/latest version and exit if requested
    echo "${BOLD}Current kernel version:${RST} ${CURRENT_VERSION}"
    echo
    echo "${BOLD}Latest kernel version:${RST} ${LATEST_VERSION}"
    if [[ ${PRINT_LATEST} ]]; then
        echo
        exit 0
    fi

    # UPDATE_MODES:
    # 0. Update one version
    # 1. Update to a specified version
    # 2. Update to the latest version
    case ${UPDATE_MODE} in
        0)
            TARGET_SUBLEVEL=$((CURRENT_SUBLEVEL + 1))
            TARGET_VERSION=${CURRENT_MAJOR_VERSION}.${TARGET_SUBLEVEL} ;;
        1)
            TARGET_VERSION=${VERSION_SUPPLIED} ;;
        2)
            TARGET_VERSION=${LATEST_VERSION} ;;
    esac

    if [[ ${RC} ]]; then
        TAG=linux-stable-rc/linux-${CURRENT_MAJOR_VERSION}.y
        RANGE=v${CURRENT_VERSION}..${TAG}
        TARGET_VERSION=${TARGET_VERSION}$(git grep -h "\-rc" "${TAG}" -- Makefile | cut -d ' ' -f 3)
        if ! [[ ${TARGET_VERSION} =~ "rc" ]]; then
            die "There is no RC version for ${CURRENT_MAJOR_VERSION}!\n"
        fi

        echo
        echo "${BOLD}Target kernel version:${RST} ${TARGET_VERSION}"
    elif [[ ${QUEUE} ]]; then
        CB=$(git cb)
        QUEUE_BRANCH=queue-${CURRENT_MAJOR_VERSION}
        (
            if ! git rev-parse --verify "${QUEUE_BRANCH}"; then
                git checkout -b "${QUEUE_BRANCH}" v"${CURRENT_VERSION}"
            else
                git checkout "${QUEUE_BRANCH}"
                git reset --hard v"${CURRENT_VERSION}"
            fi
        ) &>/dev/null

        echo "\n${BOLD}Fetching stable-queue...${RST}\n"
        git -C "${HOME}/kernels/sources/stable-queue" pull &>/dev/null

        echo "${BOLD}Generating ${QUEUE_BRANCH}...${RST}"
        git quiltimport --patches "${HOME}/kernels/sources/stable-queue/${QUEUE_BRANCH}" &>/dev/null

        git ch "${CB}" &>/dev/null

        RANGE=v${CURRENT_VERSION}..${QUEUE_BRANCH}
        TAG=${QUEUE_BRANCH}
        TARGET_VERSION=${QUEUE_BRANCH}
    else
        RANGE=v${CURRENT_VERSION}..v${TARGET_VERSION}
        TAG=v${TARGET_VERSION}
        # Make sure target version is between current version and latest version
        TARGET_SUBLEVEL=${TARGET_VERSION##*.}
        [[ ${TARGET_SUBLEVEL} -le ${CURRENT_SUBLEVEL} ]] && die "Current version is up to date with target version ${TARGET_VERSION}!\n"
        [[ ${TARGET_SUBLEVEL} -gt ${LATEST_SUBLEVEL}  ]] && die "Target version ${TARGET_VERSION} does not exist!\n"
        [[ ${CURRENT_SUBLEVEL} -eq 0 ]] && CURRENT_VERSION=${CURRENT_MAJOR_VERSION}

        echo
        echo "${BOLD}Target kernel version:${RST} ${TARGET_VERSION}"
    fi
}


function pre_exit_commands() {
    git bd "${QUEUE_BRANCH}" &>/dev/null
}



function cp_target_version() {
    header "Cherry-picking ${TARGET_VERSION}"

    if ! git cherry-pick "${RANGE}"; then
        die "Cherry-pick needs manual intervention! Resolve conflicts then run:

git add . && git cherry-pick --continue"
    else
        header "${TARGET_VERSION} PICKED CLEANLY!" "${GRN}"
    fi
}


function create_merge_message() {
    MSG_FILE=/tmp/mrg-msg

    rm -rf ${MSG_FILE}

    echo "Merge ${TARGET_VERSION} into $(git rev-parse --abbrev-ref HEAD | sed 's/-queue-[0-9].*//')" >> ${MSG_FILE}
    if [[ ! ${INITIAL_MERGE} ]]; then
        echo "\nChanges in ${TARGET_VERSION}: ($(git rev-list --count "${RANGE}" 2> /dev/null) commits)" >> ${MSG_FILE}
        git log --reverse --format="        %s" "${RANGE}" >> ${MSG_FILE}
    fi
    echo "\nSigned-off-by: $(git config --get user.name) <$(git config --get user.email)>" >> ${MSG_FILE}
}


function append_conflicts() {
    echo "\nConflicts:" >> ${MSG_FILE}
    for FILE in $(git cf); do
        echo "\t${FILE}" >> ${MSG_FILE}
    done
}


function mg_target_version() {
    header "Merging ${TARGET_VERSION}"

    create_merge_message
    if ! GIT_MERGE_VERBOSITY=1 git merge --gpg-sign --no-edit "${TAG}"; then
        append_conflicts
        die "Merge needs manual intervention! Resolve conflicts then run git fm."
    else
        git commit --amend --date="$(date)" --file ${MSG_FILE} --gpg-sign --no-edit --quiet
        header "${TARGET_VERSION} MERGED CLEANLY!" "${GRN}"
    fi
}


function update_tree() {
    case ${UPDATE_METHOD} in
        "cherry-pick") cp_target_version ;;
        "merge") mg_target_version ;;
    esac
    pre_exit_commands
}


parse_parameters "${@}"
update_sources
generate_versions
update_tree
