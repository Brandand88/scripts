#!/usr/bin/env bash
#
# Helper functions
#
# Copyright (C) 2016-2017 Nathan Chancellor
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>


###############
#             #
#  VARIABLES  #
#             #
###############

# WHAT OS ARE WE ON?
OS=$(UNAME=$(uname); echo ${UNAME,,})
# GNU READLINK IS NEEDED FOR SCRIPTS_FOLDER
[[ ${OS} = "darwin" ]] && alias readlink=greadlink

# LOCATION OF SCRIPTS FOLDER
SCRIPTS_FOLDER=$(cd $(dirname $(readlink -f "${BASH_SOURCE[0]}")) && pwd)
BIN_FOLDER=${SCRIPTS_FOLDER}/bin

# COMMON LOCATIONS AMONGST SCRIPTS
KERNEL_FOLDER=${HOME}/kernels
MISC_FOLDER=${HOME}/misc
REPO_FOLDER=${HOME}/repos
ROM_FOLDER=${HOME}/roms
TC_FOLDER=${HOME}/toolchains
WEB_FOLDER=${HOME}/web

# COLORS
BLINK_RED="\033[05;31m"
BLUE="\033[01;34m"
BOLD="\033[1m"
GRN="\033[01;32m"
RED="\033[01;31m"
RST="\033[0m"
YLW="\033[01;33m"

# MAKE THREADS
THREADS=$(nproc --all)
JOBS_FLAG="-j${THREADS}"


###############
#             #
#  FUNCTIONS  #
#             #
###############

# ALIAS FOR ECHO TO PRINT ESCAPE CODES
function echo() {
    command echo -e "$@"
}

# PRINTS A FORMATTED HEADER TO POINT OUT WHAT IS BEING DONE TO THE USER
function header() {
    [[ -n ${2} ]] && COLOR=${2} || COLOR=${RED}
    echo ${COLOR}
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo "==  ${1}  =="
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo ${RST}
}

# FORMATS THE TIME
function format_time() {
    MINS=$(((${1} - ${2}) / 60))
    SECS=$(((${1} - ${2}) % 60))
    if [[ ${MINS} -ge 60 ]]; then
        HOURS=$((${MINS}/  60))
        MINS=$((${MINS} % 60))
    fi

    if [[ ${HOURS} -eq 1 ]]; then
        TIME_STRING+="1 HOUR, "
    elif [[ ${HOURS} -ge 2 ]]; then
        TIME_STRING+="${HOURS} HOURS, "
    fi

    if [[ ${MINS} -eq 1 ]]; then
        TIME_STRING+="1 MINUTE"
    else
        TIME_STRING+="${MINS} MINUTES"
    fi

    if [[ ${SECS} -eq 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND 1 SECOND"
    elif [[ ${SECS} -eq 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND 1 SECOND"
    elif [[ ${SECS} -ne 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND ${SECS} SECONDS"
    elif [[ ${SECS} -ne 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND ${SECS} SECONDS"
    fi

    echo ${TIME_STRING}
}

# PRINTS AN ERROR IN BOLD RED
function report_error() {
    echo ""
    echo ${RED}"${1}"${RST}
    [[ -z ${2} ]] && echo ""
    exit
}

# PRINTS A WARNING IN BOLD YELLOW
function report_warning() {
    echo ""
    echo ${YLW}"${1}"${RST}
    [[ -z ${2} ]] && echo ""
}

# CHECKS TO SEE IF SCRIPT IS BEING RUN ON A MAC
function mac_check() {
    [[ $(uname -a | grep -i "darwin") ]] && report_error "Wrong window! ;)"
}

# ENFORCES THE VALUE NEEDED FOR TWO-PART FLAGS
function enforce_value() {
    [[ $# -lt 1 ]] && report_error "A additional value is needed for one of the flags passed to this script!"
}

# ADD A REMOTE IF IT DOESN'T EXIST
function add_remote() {
    [[ ! $(git remote | grep -m 1 ${1}) ]] && \
        git remote add ${1} ${2}
}

# CONVERT A FILE LOCATION TO WEB LINK
function web_link() {
    echo "${1}" | sed s/$(echo ${WEB_FOLDER} | sed 's/\//\\\//g')/http:\\/\\/nchancellor.net/
}

# REQUIRE A PARAMETER TO OPT OUT OF MAC_CHECK
[[ $# -lt 1 ]] && mac_check
