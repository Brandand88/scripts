#!/usr/bin/env bash
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2018 Nathan Chancellor
#
# Copyright (C) 2018 Albert I (krasCGQ)
#
# Clang compilation script


###############
#             #
#  VARIABLES  #
#             #
###############

# Folder that will house the source and build files
MAIN_FOLDER=${HOME}/clang-build

# Folder that will hold the main LLVM source
LLVM_FOLDER=${MAIN_FOLDER}/llvm

# Folder that will hold all of the build files and compiled code
BUILD_FOLDER=${MAIN_FOLDER}/build

# Start tracking time
START=$(date +"%s")


###############
#             #
#  FUNCTIONS  #
#             #
###############

function parse_parameters() {
    PARAMS="${*}"

    while [[ ${#} -ge 1 ]]; do
        case ${1} in
            "-b"|"--build-only")
                BUILD_ONLY=true ;;

            "-d"|"--date")
                shift && enforce_value "${@}"
                DATE_OFFSET=${1} ;;

            "-T"|"--test")
                TEST=true ;;

            "-t"|"--telegram")
                TG=true
                TG_MSG_FILE=/tmp/tg-msg.2 ;;

            "-v"|"--version")
                shift && enforce_value "${@}"
                VERSION=${1} ;;

            *) die "Invalid parameter specified!" ;;
        esac

        shift
    done

    if [[ -n ${TG} ]]; then
        {
            echo "\`\`\`"
            echo "Currently executing..."
            echo
            echo "$(basename "${0}") ${PARAMS}"
            echo "\`\`\`"
        } > ${TG_MSG_FILE}
        notify "$(cat ${TG_MSG_FILE})"
    fi

    # Clang 7.x is compiled by default
    [[ -z ${VERSION} ]] && VERSION=7

    # Folder that will hold the final compiled toolchain
    INSTALL_FOLDER=${TC_FOLDER}/flash-clang-${VERSION}.x${TEST:+"-test"}

    # SVN copy of the LLVM folder for revisioning
    SVN_FOLDER=${MAIN_FOLDER}/svn-${VERSION}.x

    # Set compiler
    CC=$(command -v clang || command -v gcc)
    CXX=$(command -v clang++ || command -v g++)
    [[ -z ${CC} || -z ${CXX} ]] && die "Neither GCC nor Clang could be found on your system!"
}

# Syncs requested  projects
function sync() {
    FOLDER=${1}

    if [[ ${FOLDER} =~ "binutils" ]]; then
        URL=https://sourceware.org/git/binutils-gdb.git
        BRANCH=binutils-2_30-branch
    elif [[ ${FOLDER} =~ "svn" ]]; then
        case ${VERSION} in
            "7") URL=https://llvm.org/svn/llvm-project/llvm/trunk ;;
            *) URL=https://llvm.org/svn/llvm-project/llvm/branches/"release_${VERSION}0" ;;
        esac
    else
        URL=https://git.llvm.org/git/$(basename "${FOLDER}")
        case ${VERSION} in
            "7") BRANCH=master ;;
            *) BRANCH="release_${VERSION}0" ;;
        esac
    fi

    if [[ ! -d ${FOLDER} ]]; then
        case ${FOLDER} in
            *svn*) svn co "${URL}" "${FOLDER}" ;;
            *) git clone "${URL}" -b "${BRANCH}" "${FOLDER}" ;;
        esac
    else
        (
            cd "${FOLDER}" || die "Error moving into ${FOLDER}"
            case ${FOLDER} in
                *svn*)
                    svn update ;;
                *)
                    git clean -fxdq
                    if [[ -n ${DATE_OFFSET} ]]; then
                        git checkout "$(git log -1 --format=%H --before="$(date --date="-${DATE_OFFSET} day")")"
                    else
                        git checkout ${BRANCH}
                        git fetch origin
                        if ! git rebase origin/${BRANCH}; then
                            die "Error updating $(basename "${FOLDER}")!"
                        fi
                    fi ;;
            esac
        )
    fi
}

# Syncs all necessary projects
function sync_all() {
    header "Syncing projects"

    mkdir -p "${MAIN_FOLDER}"
    cd "${MAIN_FOLDER}" || die "Error creating ${MAIN_FOLDER}!"

    sync llvm
    sync "$(basename "${SVN_FOLDER}")"

    mkdir -p "${LLVM_FOLDER}/tools"
    cd "${LLVM_FOLDER}/tools" || die "Error creating tools folder!"

    sync binutils
    sync clang
    sync lld
    sync polly

    mkdir -p "${LLVM_FOLDER}/projects"
    cd "${LLVM_FOLDER}/projects" || die "Error creating projects folder!"

    sync compiler-rt
    sync libcxx
    sync libcxxabi
    sync libunwind
    sync openmp
}

# Removes any previous build files
function cleanup() {
    rm -rf "${BUILD_FOLDER}"
    mkdir -p "${BUILD_FOLDER}"
    cd "${BUILD_FOLDER}" || die "Error creating build folder!"
}

# Build the toolchain
function build() {
    header "Building Clang"

    [[ -n ${TG} ]] && notify "\`Beginning build of Clang ${VERSION}...\`"

    cmake -G Ninja \
          -DCMAKE_BUILD_TYPE=Release \
          -DLINK_POLLY_INTO_TOOLS=ON \
          -DCMAKE_C_COMPILER="${CC}" \
          -DCMAKE_C_FLAGS="-O3 -march=native -mtune=native" \
          -DCMAKE_CXX_COMPILER="${CXX}" \
          -DCMAKE_CXX_FLAGS="-O3 -march=native -mtune=native" \
          -DLLVM_ENABLE_PIC=ON \
          -DCMAKE_INSTALL_PREFIX="${INSTALL_FOLDER}" \
          -DLLVM_PARALLEL_COMPILE_JOBS="${THREADS}" \
          -DLLVM_PARALLEL_LINK_JOBS="${THREADS}" \
          -DLLVM_ENABLE_THREADS=ON \
          -DLLVM_ENABLE_WARNINGS=OFF \
          -DLLVM_ENABLE_WERROR=OFF \
          -DLLVM_INCLUDE_EXAMPLES=OFF \
          -DLLVM_INCLUDE_TESTS=OFF \
          -DLLVM_BINUTILS_INCDIR="${LLVM_FOLDER}/tools/binutils/include" \
          -DLLVM_TARGETS_TO_BUILD="X86;ARM;AArch64" \
          -DLLVM_OPTIMIZED_TABLEGEN=ON \
          -DLLVM_USE_LINKER=gold \
          -DCLANG_VENDOR="Flash " \
          -DLLVM_VERSION_PATCH="$(cd "${SVN_FOLDER}" || die "SVN folder doesn't exist";
                                  svn info -r HEAD --show-item revision)" \
          -DLLVM_VERSION_SUFFIX="" \
          "${LLVM_FOLDER}"

    if ! time ninja; then
        header "ERROR BUILDING!"
        die "Time elapsed: $(format_time "${START}" "$(date +"%s")")"
    fi
}

# Install the toolchain
function install() {
    header "Installing Clang"

    if [[ -z ${TEST} ]]; then
        rm -rf "${INSTALL_FOLDER}-old"
        mv "${INSTALL_FOLDER}" "${INSTALL_FOLDER}-old"
    fi
    TIME_STRING="$(format_time "${START}" "$(date +"%s")")"
    if ! ninja install; then
        header "ERROR INSTALLING!"
        if [[ -n ${TG} ]]; then
            {
                echo "\`\`\`"
                echo "Error while building Clang ${VERSION}!"
                echo
                echo "Time elapsed: ${TIME_STRING,,}"
                echo "\`\`\`"
            } > "${TG_MSG_FILE}"
            notify "$(cat ${TG_MSG_FILE})"
        fi
        die "Time elapsed: ${TIME_STRING,,}"
    fi

    header "SUCCESS!" "${GRN}"
    echo "${GRN}Successfully built and installed Clang toolchain to ${INSTALL_FOLDER}!${GRN}"
    echo "${GRN}Time elapsed: ${TIME_STRING,,}${RST}\n"
    if [[ -n ${TG} ]]; then
        {
            echo "\`\`\`"
            echo "Clang ${VERSION} build was successful!"
            echo
            echo "Time elapsed: ${TIME_STRING,,}"
            echo "\`\`\`"
        } > "${TG_MSG_FILE}"
        notify "$(cat ${TG_MSG_FILE})"
    fi
}

source common
parse_parameters "${@}"
sync_all
cleanup
build
[[ ! ${BUILD_ONLY} ]] && install
