# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2018-2019 Nathan Chancellor
#
# Functions used to assist with ClangBuiltLinux development


# Universal variables
CBL_SRC=${CBL}/src
CBL_USR=${CBL}/usr
CBL_BIN=${CBL_USR}/bin


# Create build folders
function crbf() {
    local ITEM
    for ITEM in binutils kernel llvm; do
        export "$(echo ${ITEM:0:1} | tr '[:lower:]' '[:upper:]')BF=${BLDF}/${ITEM}"
        mkdir -p "${BLDF}/${ITEM}"
    done
}


# Patch check function
function pch() {
    [[ -f scripts/checkpatch.pl ]] && git fp -1 --stdout "${@}" | ./scripts/checkpatch.pl
    [[ -f scripts/get_maintainer.pl ]] && git fp -1 --stdout "${@}" | ./scripts/get_maintainer.pl
}


# Quilt-like patch management function for Linux
function ptchmn() {(
    [[ ! -f Makefile ]] && { display_error "You're not in a kernel folder!"; return 1; }

    TARGET_FOLDER=${REPO_FOLDER}/patches/linux/$(git cb)
    [[ ! -d ${TARGET_FOLDER} ]] && { display_error "${TARGET_FOLDER} doesn't exist!"; return 1; }

    case "${1:?}" in
        "-s"|"--sync")
            FIRST_HASH=$(git log --reverse --format=%H --committer="$(git config --get user.name) <$(git config --get user.email)>" origin/stable..HEAD | head -n1)

            rm "${TARGET_FOLDER}"/*

            git fp -o "${TARGET_FOLDER}" "${FIRST_HASH}"^..HEAD

            git -C "${TARGET_FOLDER}" aa

            git -C "${TARGET_FOLDER}" c -m "patches: linux: $(git cb): Sync as of $(git sh -s --format=%h)"

            git -C "${TARGET_FOLDER}" push ;;

        "-a"|"--apply")
            git am "${TARGET_FOLDER}"/* ;;
    esac
)}


# Rebase a linux-next branch
function rbln() {(
    [[ ! -f Makefile ]] && { display_error "You're not in a kernel folder!"; return 1; }
    FIRST_HASH=$(git log --reverse --format=%H --committer="$(git config --get user.name) <$(git config --get user.email)>" origin/stable..HEAD | head -n1)
    SECOND_HASH=$(git show -s --format=%H "$(git cb)")
    git rh origin/master
    git cherry-pick --gpg-sign "${FIRST_HASH}^..${SECOND_HASH}"
)}


# Download and apply an LLVM/Clang/lld patch
function phabap() {(
    [[ ! -d llvm ]] && { display_error "You're not in the llvm-project folder!"; return 1; }

    REVISION=${1:?}

    curl -LSs "https://reviews.llvm.org/${REVISION}?download=true" | git ap || return 1
    git ac -m "${REVISION}

Link: https://reviews.llvm.org/${REVISION}"
)}


# Build kernel with Clang (wrapper)
function bldkw() {(
    if [[ ! -f Makefile ]]; then
        display_error "No Makefile found! Are you in a kernel tree?"
        return
    fi

    TARGET_ARCH=${1}; shift
    case "${TARGET_ARCH}" in
        "arm") MAKE_FLAGS=( "ARCH=arm" "CROSS_COMPILE=arm-linux-gnueabi-" ) ;;
        "arm64") MAKE_FLAGS=( "ARCH=arm64" "CROSS_COMPILE=aarch64-linux-gnu-" ) ;;
        "ppc64le") MAKE_FLAGS=( "ARCH=powerpc" "CROSS_COMPILE=powerpc64le-linux-gnu-" ) ;;
        "x86") MAKE_FLAGS=() ;;
        *) display_error "Invalid TARGET_ARCH specified!"; return ;;
    esac

    # We are only concerned about little endian for ARM right now unless otherwise stated
    if [[ ${TARGET_ARCH} =~ arm && -z ${BIG_ENDIAN} ]]; then
        KCONFIG_ALLCONFIG=${KBF}/little-endian.config
        echo "CONFIG_CPU_BIG_ENDIAN=n" >> "${KCONFIG_ALLCONFIG}"
    fi

    # Use our versions of Clang
    path_push "${CBL_BIN}"
    [[ -n ${PATH_OVERRIDE} ]] && path_push "${PATH_OVERRIDE}"

    # Build the kernel
    time make "${JOBS_FLAG}" \
              CC="${CCACHE} clang" \
              ${KCONFIG_ALLCONFIG:+KCONFIG_ALLCONFIG="${KCONFIG_ALLCONFIG}"} \
              HOSTCC=clang \
              HOSTLD=ld.lld \
              "${MAKE_FLAGS[@]}" \
              O="${KBF}" \
              "${@}"
)}


# Extra configs for build/boot testings
# From https://github.com/groeck/linux-build-test/blob/master/rootfs/scripts/common.sh
function extraconfigs() {
    local OUT_FOLDER="${KBF}"

    echo "CONFIG_EXPERT=y
CONFIG_DEBUG_KERNEL=y
CONFIG_LOCK_DEBUGGING_SUPPORT=y
CONFIG_DEBUG_RT_MUTEXES=y
CONFIG_DEBUG_SPINLOCK=y
CONFIG_DEBUG_MUTEXES=y
CONFIG_DEBUG_WW_MUTEX_SLOWPATH=y
CONFIG_DEBUG_LOCK_ALLOC=y
CONFIG_DEBUG_LOCKDEP=y
CONFIG_DEBUG_ATOMIC_SLEEP=y
CONFIG_CRYPTO_MANAGER_DISABLE_TESTS=y
CONFIG_CRC32_SELFTEST=y
CONFIG_DEBUG_LOCKING_API_SELFTESTS=y
CONFIG_DEBUG_NMI_SELFTEST=y
CONFIG_DEBUG_RODATA_TEST=y
CONFIG_DEBUG_TLBFLUSH=y
CONFIG_DMATEST=y
CONFIG_GLOB_SELFTEST=y
CONFIG_PCI_EPF_TEST=y
CONFIG_PCI_ENDPOINT_TEST=y
CONFIG_PROVE_LOCKING=y
CONFIG_PROVE_RCU=y
CONFIG_RBTREE_TEST=y
CONFIG_RCU_EQS_DEBUG=y
CONFIG_STATIC_KEYS_SELFTEST=y
CONFIG_STRING_SELFTEST=y
CONFIG_TEST_BITMAP=y
CONFIG_TEST_FIRMWARE=y
CONFIG_TEST_SORT=y
CONFIG_TEST_SYSCTL=y
CONFIG_TEST_UUID=y
CONFIG_TORTURE_TEST=y
CONFIG_USB_TEST=y
CONFIG_USB_EHSET_TEST_FIXTURE=y
CONFIG_USB_LINK_LAYER_TEST=y
CONFIG_WW_MUTEX_SELFTEST=y
CONFIG_BLK_DEV_INITRD=y
CONFIG_DEVTMPFS=y
CONFIG_DEVTMPFS_MOUNT=y
CONFIG_SCSI=y
CONFIG_BLK_DEV_SD=y
CONFIG_SCSI_LOWLEVEL=y
CONFIG_SCSI_DC395x=y
CONFIG_SCSI_AM53C974=y
CONFIG_SCSI_SYM53C8XX_2=y
CONFIG_MEGARAID_SAS=y
CONFIG_FUSION=y
CONFIG_FUSION_SAS=y
CONFIG_MMC=y
CONFIG_MMC_SDHCI=y
CONFIG_MMC_SDHCI_PCI=y
CONFIG_BLK_DEV_NVME=y
CONFIG_USB=y
CONFIG_USB_XHCI_HCD=y
CONFIG_USB_EHCI_HCD=y
CONFIG_USB_OHCI_HCD=y
CONFIG_USB_STORAGE=y
CONFIG_USB_UAS=y
CONFIG_VIRTIO=y
CONFIG_VIRTIO_PCI=y
CONFIG_VIRTIO_PCI_LEGACY=y
CONFIG_VIRTIO_BALLOON=y
CONFIG_VIRTIO_MMIO=y
CONFIG_BLK_MQ_VIRTIO=y
CONFIG_VIRTIO_BLK=y
CONFIG_VIRTIO_BLK_SCSI=y
CONFIG_SCSI_VIRTIO=y" >> "${OUT_FOLDER}"/.config

    [[ ${ARCH} =~ arm ]] && echo "CONFIG_LOCK_TORTURE_TEST=y
CONFIG_RCU_TORTURE_TEST=y" >> "${OUT_FOLDER}"/.config

    bldkw "${ARCH}" olddefconfig &>/dev/null
}


# Configure and build a kernel with Clang
function bldk() {
    # Parameters
    local ARCH CONFIG LD
    ARCH=${1}; shift
    CONFIG=${1}; shift

    # Sanity checks
    [[ -z ${ARCH} ]] && { display_error "ARCH not specified!"; return 1; }
    [[ -z ${CONFIG} ]] && { display_error "CONFIG not specified!"; return 1; }
    case ${ARCH} in
        "arm"|"arm64"|"x86"|"ppc64le") ;;
        *) display_error "Invalid ARCH specifed"; return 1 ;;
    esac

    # Clean up
    cbf k

    # Configure kernel
    bldkw "${ARCH}" "${CONFIG}" modules_prepare
    if [[ ${PWD} =~ cbl && ${CONFIG} =~ defconfig ]]; then
        extraconfigs
        # Use lld by default for everything but powerpc
        [[ -z ${LD} && ! ${ARCH} =~ ppc ]] && LD=ld.lld
    fi

    # Build kernel
    bldkw "${ARCH}" ${LD:+LD="${LD}"} "${@}" || return 1
}


# Configure and build a folder in the kernel with Clang
function bldkf() {
    # Parameters
    local ARCH CONFIG FOLDER
    ARCH=${1}; shift
    CONFIG=${1}; shift
    FOLDER=${1}; shift

    [[ -z ${FOLDER} ]] && { display_error "FOLDER not specified!"; return 1; }
    [[ ! -d ${FOLDER} ]] && { display_error "${FOLDER} could not be found!"; return 1; }

    bldk "${ARCH}" "${CONFIG}" M="${KBF}" src="${FOLDER}" "${@}"
}


# Boot a kernel in QEMU
function bootk() {
    local ARCH COMMAND IMAGES_FOLDER KERNEL RAM QEMU; ARCH=${1}; shift
    [[ -z ${ARCH} ]] && { display_error "ARCH not specified!"; return 1; }

    IMAGES_FOLDER=${CBL}/git/ci-master/images
    [[ ! -d ${IMAGES_FOLDER} ]] && { display_error "${IMAGES_FOLDER} doesn't exist!"; return 1; }

    case ${ARCH} in
        "arm")
            IMAGE=zImage
            QEMU=qemu-system-arm
            QEMU_ARCH_CMDLINE=( -machine virt
                                -no-reboot
                                -drive "file=${IMAGES_FOLDER}/arm/rootfs.ext4,format=raw,id=rootfs,if=none"
                                -device "virtio-blk-device,drive=rootfs"
                                -append "console=ttyAMA0 root=/dev/vda ${QEMU_CMDLINE}" ) ;;
        "arm64")
            IMAGE=Image.gz
            QEMU=qemu-system-aarch64
            QEMU_ARCH_CMDLINE=( -cpu cortex-a57
                                -drive "file=${IMAGES_FOLDER}/arm64/rootfs.ext4,format=raw"
                                -append "console=ttyAMA0 root=/dev/vda ${QEMU_CMDLINE}" ) ;;
        "ppc64le")
            IMAGE=zImage.epapr
            RAM=2G
            QEMU=qemu-system-ppc64
            QEMU_ARCH_CMDLINE=( -machine powernv
                                -device "ipmi-bmc-sim,id=bmc0"
                                -device "isa-ipmi-bt,bmc=bmc0,irq=10"
                                -L /usr/share/qemu -bios skiboot.lid
                                -initrd "${IMAGES_FOLDER}/ppc64le/rootfs.cpio"
                                ${QEMU_CMDLINE:+-append "${QEMU_CMDLINE}"} )
            ARCH=powerpc ;;
        "x86")
            IMAGE=bzImage
            QEMU=qemu-system-x86_64
            QEMU_ARCH_CMDLINE=( -append "root=/dev/sda console=ttyS0 ${QEMU_CMDLINE}"
                                -cpu host
                                -d unimp,guest_errors
                                -drive "file=${IMAGES_FOLDER}/x86_64/rootfs.ext4,format=raw,if=ide"
                                -enable-kvm ) ;;
        *) display_error "Invalid ARCH specified!"; return 1 ;;
    esac

    KERNEL=${KERNEL_LOCATION:-${KBF}}/arch/${ARCH}/boot/${IMAGE}
    [[ ! -f ${KERNEL} ]] && { display_error "Kernel doesn't exist! Please build one."; return 1; }

    # Update the images
    git -C "${IMAGES_FOLDER}" rh --quiet
    git -C "${IMAGES_FOLDER}" pull --quiet

    # Print or run the command
    COMMAND=( "${QEMU}" "${QEMU_ARCH_CMDLINE[@]}" -kernel "${KERNEL}" -m "${RAM:-512m}" -nographic )
    [[ -z ${NO_TIMEOUT} ]] && COMMAND=( timeout 2m unbuffer "${COMMAND[@]}" )
    [[ ${1} = "--print" ]] && { echo "${COMMAND[*]}"; return; }

    case ${ARCH} in
        "arm64")
            "${COMMAND[@]}" -machine virt "${@}"
            "${COMMAND[@]}" -machine "virt,virtualization" "${@}" ;;
        *)
            "${COMMAND[@]}" "${@}" ;;
    esac

}


# Build a kernel and boot it
function babk() {
    local ARCH DEFCONFIG LD
    ARCH=${1}; shift
    [[ -z ${ARCH} ]] && { display_error "ARCH not specified!"; return 1; }

    # Use lld by default for everything but powerpc
    [[ -z ${LD} && ! ${ARCH} =~ ppc ]] && LD=ld.lld

    # Define a different defconfig for ppc64le
    [[ ${ARCH} = "ppc64le" ]] && DEFCONFIG=powernv_defconfig

    bldk "${ARCH}" "${DEFCONFIG:-defconfig}" KCFLAGS="-Werror" ${LD:+LD="${LD}"} "${@}"

    bootk "${ARCH}"
}


# linux testing
function lt() {(
    cd "${CBL}"/"${TREE:=linux-next}" || die "wtf"

    while (( ${#} )); do
        case ${1} in
            "-d"|"--debug") DEBUG=true ;;
            # Show non-fatal warnings
            "-w"|"--warnings") SHOW_NF_WARNINGS=true ;;
        esac
        shift
    done

    # Logging
    LOG=$(mktemp)
    echo
    echo "Build log: ${LOG}"
    echo
    {
        "${CBL_BIN}"/clang --version | head -n1
        echo
        echo "Version: $(make defconfig &>/dev/null && make kernelrelease | tail -n1 && git cl -q)"
        echo
        if [[ ${TREE} != linux-next ]]; then
            echo "Head commit: $(git kf origin/"$(git cb)")"
            echo
        fi
    } > "${LOG}"

    # Configurations known to build with -Werror
    CONFIGS=( "arm:multi_v7_defconfig"
              "arm:allyesconfig"
              "arm64:defconfig"
              "arm64:allyesconfig"
              "ppc64le:powernv_defconfig"
              "x86:defconfig"
              "x86:allyesconfig" )

    for CONFIG in "${CONFIGS[@]}"; do (
        ARCH=${CONFIG%%:*}
        CONFIG=${CONFIG##*:}

        START=$(date +%s)

        # Error log
        ERRORS=$(mktemp)

        # Use lld by default for everything but powerpc
        [[ -z ${LD} && ! ${ARCH} =~ ppc ]] && LD=ld.lld

        # Build kernel silently normally
        if [[ -z ${DEBUG} ]]; then
            bldk "${ARCH}" "${CONFIG}" KCFLAGS="${KCFLAGS:--Werror}" ${LD:+LD="${LD}"} |& \
            rg --color=never "error:|warning:|undefined" |& sed "s/${PWD//\//\\/}\///g" > "${ERRORS}"
            MAKE_RESULT=${pipestatus[1]}
        else
            bldk "${ARCH}" "${CONFIG}" KCFLAGS="${KCFLAGS:--Werror}" ${LD:+LD="${LD}"}
            MAKE_RESULT=${?}
        fi

        # Make sure that if make fails, it gets propgated to the if statement
        if [[ ${MAKE_RESULT} -eq 0 ]]; then
            RESULT=successful
        else
            RESULT=failed
        fi
        TIME_STRING=$(format_time "${START}" "$(date +%s)")
        {
            echo "${ARCH}:${CONFIG} | Build ${RESULT} in ${TIME_STRING:l}\c"
            if [[ ${RESULT} = "successful" && ${CONFIG} =~ defconfig ]]; then
                if bootk "${ARCH}" &>/dev/null; then
                    echo " | Boot successful\c"
                else
                    echo " | Boot failed\c"
                fi
            fi
            echo
            [[ -z ${DEBUG} && ( -n ${SHOW_NF_WARNINGS} || ${RESULT} = "failed" ) ]] && cat "${ERRORS}"
            echo
        } >> "${LOG}"
        rm "${ERRORS}"
    ) done

    MESSAGE="linux$([[ -f localversion-next ]] && cat localversion-next) build results: $(deldog "${LOG}")"

    tg_msg "${MESSAGE}"

    echo
    echo "${MESSAGE}"
    echo

    rm "${LOG}"
)}


# Pull the latest CBL Docker image and run it
function dckrrn() {(
    [[ -z ${DOCKER_IMAGE} ]] && DOCKER_IMAGE=clangbuiltlinux/debian
    [[ -z ${LOCAL} ]] && docker pull "${DOCKER_IMAGE}"
    docker run --interactive \
               --mount type=bind,source="${PWD}",target=/"${PWD##*/}",readonly \
               --rm \
               --tty \
               --workdir /"${PWD##*/}" \
               "${DOCKER_IMAGE}" "${@}"
)}


# Modify Clang to report the upstream hash for the version string, bypassing local patches
function clrev() {(
    if [[ -z ${SKIP_REV} ]]; then
        [[ -z ${LLVM} ]] && LLVM=llvm-project
        case ${1} in
            "-r"|"--reset") git -C "${CBL_SRC}"/"${LLVM}" rh -q ;;
            "-s"|"--set"|*) sed -i 's/rev-parse HEAD/rev-parse origin\/master/g' "${CBL_SRC}"/"${LLVM}"/llvm/cmake/modules/VersionFromVCS.cmake ;;
        esac
    fi
)}


# Strip LLVM binaries
function stripllvmbin() {(
    BINARIES_TO_STRIP=( clang lld llvm-ar llvm-pdbutil llvm-symbolizer llvm-undname sancov )
    for BINARY in "${BINARIES_TO_STRIP[@]}"; do strip "${1:?}"/bin/"${BINARY}"; done
)}


# Build LLVM
function bldllvm() {(
    BASE_CMAKE_VALUES=( -DCLANG_ENABLE_ARCMT=OFF
                        -DCLANG_PLUGIN_SUPPORT=OFF
                        -DCMAKE_BUILD_TYPE=Release
                        -DCMAKE_C_FLAGS="-O2 -march=native -mtune=native"
                        -DCMAKE_CXX_FLAGS="-O2 -march=native -mtune=native"
                        -DLLVM_CCACHE_BUILD=ON
                        -DLLVM_ENABLE_BINDINGS=OFF
                        -DLLVM_ENABLE_OCAMLDOC=OFF
                        -DLLVM_ENABLE_TERMINFO=OFF
                        -DLLVM_ENABLE_WARNINGS=OFF
                        -DLLVM_INCLUDE_EXAMPLES=OFF
                        -DLLVM_INCLUDE_TESTS=OFF
                        -DLLVM_INCLUDE_DOCS=OFF )
    S1_FOLDER=${LBF}/stage1
    [[ -z ${LLVM} ]] && LLVM=llvm-project
    [[ -z ${S1_TARGETS} ]] && S1_TARGETS="X86"
    [[ -z ${S2_TARGETS} ]] && S2_TARGETS="ARM;AArch64;PowerPC;X86"
    [[ -z ${S1_PROJECTS} ]] && S1_PROJECTS="clang;compiler-rt;lld"
    [[ -z ${S2_PROJECTS} ]] && S2_PROJECTS="clang;compiler-rt;libcxx;libcxxabi;libunwind;lld"

    while (( ${#} )); do
        case ${1} in
            "-d"|"--debug") DEBUG=true; SKIP_REV=true ;;
            "-i"|"--install") INSTALL=true ;;
            "-n"|"--no-clean") INCREMENTAL=true ;;
            "-p"|"--projects") shift; if [[ -n ${DEBUG} ]]; then S1_PROJECTS="${1}"; else S2_PROJECTS="${1}"; fi ;;
            "-t"|"--targets") shift; if [[ -n ${DEBUG} ]]; then S1_TARGETS="${1}"; else S2_TARGETS="${1}"; fi ;;
        esac
        shift
    done

    header "Building LLVM"

    STABLE_BINUTILS=${TC_FOLDER}/binutils-${BINUTILS_VERSION:?}
    [[ -d ${STABLE_BINUTILS} ]] && path_push "${STABLE_BINUTILS}/bin"

    STABLE_LLVM=${TC_FOLDER}/llvm-${LLVM_VERSION:?}
    if [[ -d ${STABLE_LLVM} ]]; then
        path_push "${STABLE_LLVM}/bin"
        [[ -d ${STABLE_BINUTILS} ]] && export LD_LIBRARY_PATH=${STABLE_LLVM}/lib${LD_LIBRARY_PATH:+":${LD_LIBRARY_PATH}"}
    fi

    [[ -z ${INCREMENTAL} ]] && cbf c
    { mkdir -p "${S1_FOLDER}" && cd "${S1_FOLDER}"; } || die "wtf"

    clrev -s

    # Stage one
    cmake -Wno-dev \
          -G Ninja \
          "${BASE_CMAKE_VALUES[@]}" \
          -DCLANG_ENABLE_STATIC_ANALYZER=OFF \
          -DCOMPILER_RT_BUILD_LIBFUZZER=OFF \
          "$([[ -z ${DEBUG} ]] && echo "-DCOMPILER_RT_BUILD_SANITIZERS=OFF")" \
          -DCMAKE_C_COMPILER="$(command -v clang || command -v gcc)" \
          -DCMAKE_CXX_COMPILER="$(command -v clang++ || command -v g++)" \
          -DCMAKE_LINKER="$(for LD in lld gold bfd; do command -v ld.${LD} &>/dev/null && break; done; echo ld.${LD})" \
          ${DEBUG:+-DCMAKE_INSTALL_PREFIX="$(mktemp -d)"} \
          ${DEBUG:+-DLLVM_BINUTILS_INCDIR="${CBL_SRC}/binutils/include"} \
          -DLLVM_ENABLE_BACKTRACES=OFF \
          -DLLVM_ENABLE_PROJECTS="${S1_PROJECTS}" \
          -DLLVM_ENABLE_ZLIB=OFF \
          -DLLVM_EXTERNAL_CLANG_TOOLS_EXTRA_SOURCE_DIR="" \
          -DLLVM_INCLUDE_UTILS=OFF \
          -DLLVM_TARGETS_TO_BUILD="${S1_TARGETS}" \
          -DLLVM_USE_LINKER="$(for LD in lld gold bfd; do command -v ld.${LD} &>/dev/null && break; done; echo ${LD})" \
          "${CBL_SRC}"/"${LLVM}"/llvm > /dev/null
    time ninja || { clrev -r; die "Error building LLVM stage 1!"; }
    stripllvmbin "${S1_FOLDER}"
    if [[ -n ${DEBUG} ]]; then
        [[ -n ${INSTALL} ]] && { ninja install || die "Error installing LLVM!"; }
        clrev -r
        return
    fi

    # Stage two
    cd "${LBF}" || die "wtf"

    if [[ -d ${STABLE_BINUTILS} ]]; then
        if [[ -d ${STABLE_LLVM} ]]; then
            LD_LIBRARY_PATH=${LD_LIBRARY_PATH/${STABLE_LLVM}\/lib/}
            LD_LIBRARY_PATH=${LD_LIBRARY_PATH#*:}
        fi
        LD_LIBRARY_PATH=${S1_FOLDER}/lib${LD_LIBRARY_PATH:+":${LD_LIBRARY_PATH}"}
        export LD_LIBRARY_PATH
    fi

    export PATH=${PATH/${STABLE_LLVM}\/bin:/}
    path_push "${S1_FOLDER}/bin"

    cmake -Wno-dev \
          -G Ninja \
          "${BASE_CMAKE_VALUES[@]}" \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_INSTALL_PREFIX="${INSTALL_FOLDER:="${CBL_USR}"}" \
          -DCMAKE_LINKER=ld.lld \
          -DLIBCXX_USE_COMPILER_RT=YES \
          -DLIBCXXABI_USE_COMPILER_RT=YES \
          -DLIBCXXABI_USE_LLVM_UNWINDER=YES \
          -DLLVM_BINUTILS_INCDIR="${CBL_SRC}/binutils/include" \
          -DLLVM_BUILD_LLVM_DYLIB=ON \
          -DLLVM_LINK_LLVM_DYLIB=OFF \
          -DLLVM_ENABLE_LTO=Thin \
          -DLLVM_ENABLE_PROJECTS="${S2_PROJECTS}" \
          -DLLVM_ENABLE_RTTI=ON \
          -DLLVM_TARGETS_TO_BUILD="${S2_TARGETS}" \
          -DLLVM_USE_LINKER=lld  \
          "${CBL_SRC}"/"${LLVM}"/llvm > /dev/null
    time ninja || { clrev -r; die "Error building LLVM stage 2!"; }
    stripllvmbin "${LBF}"
    if [[ -n ${INSTALL} ]]; then
        rm -rf "${INSTALL_FOLDER}"
        ninja install > /dev/null || die "Error installing LLVM!"
    fi

    clrev -r
)}


# Build binutils
function bldbn() {(
    header "Building binutils"
    cd "${CBL_SRC}"/binutils || die "Error moving into ${CBL_SRC}/binutils"
    BBFR=${BBF}
    for TUPLE in host arm-linux-gnueabi aarch64-linux-gnu powerpc-linux-gnu powerpc64le-linux-gnu; do
        BBF=${BBFR}/${TUPLE}
        { cbf b && mkdir -p "${BBF}" && cd "${BBF}"; } || die "wtf"
        COMMON_FLAGS=( --prefix="${INSTALL_FOLDER:="${CBL_USR}"}"
                       --enable-deterministic-archives
                       --enable-gold
                       --enable-ld=default
                       --enable-plugins
                       --quiet
                       CFLAGS="-O2 -march=native -mtune=native"
                       CXXFLAGS="-O2 -march=native -mtune=native" )
        case ${TUPLE} in
            host)
                "${CBL_SRC}"/binutils/configure \
                    --enable-lto \
                    --enable-relro \
                    --enable-shared \
                    --enable-targets=x86_64-pep \
                    --enable-threads \
                    --disable-gdb \
                    --disable-werror \
                    --with-pic \
                    --with-system-zlib \
                    "${COMMON_FLAGS[@]}"
                make -s configure-host V=0 ;;
            arm-*|aarch64-*)
                "${CBL_SRC}"/binutils/configure \
                    --disable-multilib \
                    --disable-nls \
                    --program-prefix=${TUPLE}- \
                    --target=${TUPLE} \
                    --with-gnu-as \
                    --with-gnu-ld \
                    --with-sysroot="${INSTALL_FOLDER}/${TUPLE}" \
                    "${COMMON_FLAGS[@]}" ;;
            powerpc*)
                "${CBL_SRC}"/binutils/configure \
                    --enable-lto \
                    --enable-relro \
                    --enable-shared \
                    --enable-threads \
                    --disable-gdb \
                    --disable-sim \
                    --disable-werror \
                    --program-prefix=${TUPLE}- \
                    --target=${TUPLE} \
                    --with-pic \
                    --with-system-zlib \
                    "${COMMON_FLAGS[@]}" ;;
        esac
        time make -s "${JOBS_FLAG}" V=0 || die "Error building ${TARGET} binutils"
        [[ "${1}" =~ "-i" ]] && { make -s prefix="${INSTALL_FOLDER}" install V=0 || die "Error installing ${TARGET} binutils"; }
        cd ..
    done
)}


# Build LLVM/Clang/lld and arm{32,64} and powerpc binutils from source
function bldusr() {(
    # Update/clone LLVM
    if [[ ! -d ${CBL_SRC}/llvm-project ]]; then
        header "Cloning LLVM"
        mkdir -p "${CBL_SRC}"
        git -C "${CBL_SRC}" clone --single-branch -b master git://github.com/llvm/llvm-project
    else
        (
            header "Updating LLVM"
            cd "${CBL_SRC}"/llvm-project || die "Error moving into llvm-project!"
            PREVIOUS_ORIGIN_SHA=$(git show -s --format=%H origin/master)
            git rh -q
            git pull -q --rebase || die "Error updating LLVM!"
            git --no-pager lo "${PREVIOUS_ORIGIN_SHA}..$(git show -s --format=%H origin/master)"
        )
    fi

    # Update/clone binutils
    if [[ ! -d ${CBL_SRC}/binutils ]]; then
        header "Cloning binutils"
        git -C "${CBL_SRC}" clone git://sourceware.org/git/binutils-gdb.git binutils
    else
        header "Updating binutils"
        git -C "${CBL_SRC}"/binutils pull --rebase || die "Error updating ${CBL_SRC}/binutils"
    fi

    # Build LLVM/Clang/lld
    INSTALL_FOLDER=${CBL_USR}
    bldllvm -i || return ${?}

    # Build binutils
    bldbn -i
)}


# kernel/common build wrapper
function kcbw() {(
    BUILD_FOLDER=${CBL}/android/build
    COMMON_FOLDER=${CBL}/android/common
    OUT_FOLDER=${BLDF}/common

    while (( ${#} )); do
        case ${1} in
            CC=*|LD=*) export "${1:?}" ;;
            3.*|4.*) BRANCH=${1} ;;
        esac
        shift
    done

    BRANCH=android-${BRANCH:-4.9}
    [[ -z ${LD} && ${BRANCH} = "android-4.19" ]] && LD=ld.lld

    cd "${BUILD_FOLDER}" || die "wtf"

    echo 'ARCH=arm64
BRANCH='"${BRANCH}"'
CLANG_TRIPLE=aarch64-linux-gnu-
CROSS_COMPILE=aarch64-linux-gnu-
DEFCONFIG=cuttlefish_defconfig
EXTRA_CMDS='\'''\''
KERNEL_DIR='"$(realpath --relative-to="${PWD}" "${COMMON_FOLDER}")"'
POST_DEFCONFIG_CMDS="check_defconfig && update_clang_config"
CLANG_PREBUILT_BIN='"$(realpath --relative-to="${PWD}" "${CPB:-${CBL_BIN}}")"'
LD_LIBRARY_PATH='"${LD_LIBRARY_PATH:-"${CBL_USR}"/lib}"'
LINUX_GCC_CROSS_COMPILE_PREBUILTS_BIN='"$(realpath --relative-to="${PWD}" "${GCCPB:-${CBL_BIN}}")"'
FILES="
arch/arm64/boot/Image.gz
vmlinux
System.map
"
STOP_SHIP_TRACEPRINTK=1

function update_clang_config() {
  ${KERNEL_DIR}/scripts/config --file ${OUT_DIR}/.config \
    -e LTO_CLANG \
    -e CFI_CLANG \
    --set-val FRAME_WARN 2048
  (cd ${KERNEL_DIR} && \
    make O=${OUT_DIR} ${CC_LD_ARG} olddefconfig)
}' > "${BUILD_CONFIG:=$(mktemp)}"

    # Make path relative
    BUILD_CONFIG=$(realpath --relative-to="${PWD}" "${BUILD_CONFIG}")

    # Make sure that we are on the correct branch
    (
        cd "${COMMON_FOLDER}" || return
        git ch "${BRANCH}" || { git rh -q && git ch "${BRANCH}"; }
        git pull --rebase
    )

    OUT_DIR=${OUT_FOLDER} BUILD_CONFIG=${BUILD_CONFIG} CC="${CC:-clang}" LD="${LD}" ./build.sh "${@}"

    git -C "${COMMON_FOLDER}" rh -q

    rm "${BUILD_CONFIG}"
)}


# kernel/common build testing
function kct() {(
    COMMON_FOLDER=${CBL}/android/common
    OUT_FOLDER=${BLDF}/common

    while (( ${#} )); do
        case ${1} in
            "-d"|"--debug") DEBUG=true ;;
            # Show non-fatal warnings
            "-w"|"--warnings") SHOW_NF_WARNINGS=true ;;
        esac
        shift
    done

    # Logging
    LOG=$(mktemp)
    echo
    echo "Build log: ${LOG}"
    echo
    {
        "${CBL_BIN}"/clang --version | head -n1
        echo
    } > "${LOG}"

    for VERSION in 4.9 4.14 4.19; do (
        START=$(date +%s)

        # Error log
        ERRORS=$(mktemp)

        # Build kernel silently normally
        if [[ -z ${DEBUG} ]]; then
            kcbw "${VERSION}" KCFLAGS="${KCFLAGS:--Werror}" |& \
            rg --color=never "error:|warning:|undefined" |& sed "s/${COMMON_FOLDER//\//\\/}\///g" > "${ERRORS}"
            MAKE_RESULT=${pipestatus[1]}
        else
            kcbw "${VERSION}" KCFLAGS="${KCFLAGS:--Werror}"
            MAKE_RESULT=${?}
        fi

        # Make sure that if make fails, it gets propgated to the if statement
        if [[ ${MAKE_RESULT} -eq 0 ]]; then
            RESULT=successful
        else
            RESULT=failed
        fi
        TIME_STRING=$(format_time "${START}" "$(date +%s)")
        {
            echo "android-${VERSION} | $(cd "${COMMON_FOLDER}" || die "wtf"; git kf origin/"$(git cb)") | Build ${RESULT} in ${TIME_STRING:l}\c"
            if [[ ${RESULT} = "successful" ]]; then
                if KERNEL_LOCATION=${OUT_FOLDER} bootk arm64 &>/dev/null; then
                    echo " | Boot successful\c"
                else
                    echo " | Boot failed\c"
                fi
            fi
            echo
            [[ -z ${DEBUG} && ( -n ${SHOW_NF_WARNINGS} || ${RESULT} = "failed" ) ]] && cat "${ERRORS}"
            echo
        } >> "${LOG}"
        rm "${ERRORS}"
    ) done

    MESSAGE="kernel/common build results: $(deldog "${LOG}")"

    tg_msg "${MESSAGE}"

    echo
    echo "${MESSAGE}"
    echo

    rm "${LOG}"

)}


# Build all kernel trees
function bldallk() {(
    TREE=linux lt
    TREE=linux-next lt
    kct
)}


# Build new LLVM/Clang/lld and test all kernel trees
function bldall() {(
    export TG=true
    bldusr && bldallk
)}


# Set up path to use CBL_BIN
function cbl_path() {
    case ${1} in
        "-s"|"--set") path_push "${CBL_BIN}" ;;
        "-u"|"--unset") export PATH=${PATH/${CBL_BIN}:/} ;;
    esac
}


# Function to test build-{binutils,llvm}.sh in multiple Docker images
function bld_llvm_bntls_sh() {(
    CCACHE_FOLDER=${CBL}/git/ccache
    LOG=$(mktemp); echo "Log: ${LOG}"
    SCRIPT=$(mktemp --suffix=.sh)
    TC_BLD=${CBL}/git/tc-build

    mkdir -p "${CCACHE_FOLDER}"

    echo '#!/usr/env/bash

PACKAGES=( ccache clang cmake git python )

# Debian/Ubuntu
if command -v apt-get &>/dev/null; then
    PACKAGES+=( ca-certificates curl file gcc g++ make ninja-build texinfo zlib1g-dev )
    case "$(cat /etc/os-release)" in
        *buster*|*bionic*|*cosmic*|*disco*) PACKAGES+=( lld ) ;;
    esac
    apt-get update
    apt-get upgrade -y
    apt-get install --no-install-recommends -y "${PACKAGES[@]}"
# Fedora
elif command -v dnf &>/dev/null; then
    PACKAGES+=( gcc gcc-c++ lld ninja-build zlib-devel )
    dnf update -y
    dnf install -y "${PACKAGES[@]}"
# Arch
elif command -v pacman &>/dev/null; then
    PACKAGES+=( base-devel lld ninja )
    pacman -Syyu --noconfirm
    pacman -S --noconfirm "${PACKAGES[@]}"
fi

ccache -M 30G
ccache --set-config=compression=true
ccache --set-config=compression_level=9
ccache --set-config=cache_dir=/ccache

git clone /'"${TC_BLD##*/}"' /'"${TC_BLD##*/}"'2 && cd /'"${TC_BLD##*/}"'2

./build-binutils.sh -t all || exit 1
./build-llvm.sh CC=gcc || exit 1
./build-llvm.sh CC=clang || exit 1

for FILE in clang ld.lld aarch64-linux-gnu-ld arm-linux-gnueabi-ld powerpc64le-linux-gnu-ld powerpc-linux-gnu-ld ld; do
    ./usr/bin/${FILE} --version || exit 1
done' > "${SCRIPT}"

    for IMAGE in ubuntu:xenial \
                 ubuntu:bionic \
                 ubuntu:cosmic \
                 ubuntu:disco \
                 archlinux/base:latest \
                 fedora:latest \
                 debian:stretch \
                 debian:buster; do
        docker pull "${IMAGE}"
        docker run --interactive \
                   --mount type=bind,source="${TC_BLD}",target=/"${TC_BLD##*/}",readonly \
                   --mount type=bind,source="${CCACHE_FOLDER}",target=/ccache \
                   --mount type=bind,source="${SCRIPT}",target=/script.sh \
                   --rm \
                   --tty \
                   --workdir /"${TC_BLD##*/}" \
                   "${IMAGE}" bash /script.sh || { echo "${IMAGE} failed" >> "${LOG}"; continue; }
        echo "${IMAGE} successful" >> "${LOG}"
    done

    echo
    echo "Results:"
    cat "${LOG}"
    tg_msg "$(cat "${LOG}")"
    echo
)}
# vi: filetype=zsh
