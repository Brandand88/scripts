# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2019 Nathan Chancellor
#
# Functions to build the latest versions of certain pieces of software


# Build/install bat
function bibat() {(
    [[ -z ${BAT_VERSION} ]] && BAT_VERSION=0.11.0
    if [[ $(uname -m) = "x86_64" ]] && command -v dpkg &>/dev/null; then
        curl -LSso ${TMP_DEB:=$(mktemp --suffix=.deb)} https://github.com/sharkdp/bat/releases/download/v${BAT_VERSION}/bat_${BAT_VERSION}_amd64.deb
        sudo dpkg -i "${TMP_DEB}" && rm "${TMP_DEB}"
    else
        cd "${TMP_WKDIR:=$(mktemp -d)}"
        curl -LSs https://github.com/sharkdp/bat/archive/v${BAT_VERSION}.tar.gz | tar -xzf -
        cd bat-${BAT_VERSION}
        [[ -d ${HOME}/.cargo/bin ]] || install_rust
        path_push "${HOME}/.cargo/bin"
        cargo build --release --locked || die "cargo build failed!"
        cargo install --force --path . || die "cargo install failed!"
    fi

    command -v bat
    bat --version
)}


# Build/update ccache
function bccache() {(
    [[ -z ${CCACHE_VERSION} ]] && CCACHE_VERSION=3.7.1
    CCACHE_FOLDER=ccache-${CCACHE_VERSION}
    TMP_FOLDER=$(mktemp -d)
    cd "${TMP_FOLDER}"
    curl -LSs https://github.com/ccache/ccache/releases/download/v"${CCACHE_VERSION}"/"${CCACHE_FOLDER}".tar.gz | tar -xzf -
    cd "${CCACHE_FOLDER}" || die "Downloading or extracting ccache failed!"
    ./configure --prefix="${PREFIX:=${HOME}/usr}"
    make "${JOBS_FLAG:--j"$(nproc)"}" || die "make failed!"
    make install || die "install failed!"
    rm -rf "${TMP_FOLDER}"

    path_push "${PREFIX}"/bin
    command -v ccache
    ccache --version
)}


# Build/install fd
function bifd() {(
    [[ -z ${FD_VERSION} ]] && FD_VERSION=7.3.0
    if [[ $(uname -m) = "x86_64" ]] && command -v dpkg &>/dev/null; then
        curl -LSso ${TMP_DEB:=$(mktemp --suffix=.deb)} https://github.com/sharkdp/fd/releases/download/v${FD_VERSION}/fd_${FD_VERSION}_amd64.deb
        sudo dpkg -i "${TMP_DEB}" && rm "${TMP_DEB}"
    else
        cd "${TMP_WKDIR:=$(mktemp -d)}"
        curl -LSs https://github.com/sharkdp/fd/archive/v${FD_VERSION}.tar.gz | tar -xzf -
        cd fd-${FD_VERSION}
        [[ -d ${HOME}/.cargo/bin ]] || install_rust
        path_push "${HOME}/.cargo/bin"
        cargo build --release --locked || die "cargo build failed!"
        cargo install --force --path . || die "cargo install failed!"
        [[ -d ${HOME}/.zfunctions ]] || mkdir -p "${HOME}/.zfunctions"
        install -Dm644 target/release/build/fd-find-*/out/_fd ${HOME}/.zfunctions/_fd
    fi

    command -v fd
    fd --version
)}


# Build/update git
function bgit() {(
    [[ -z ${PREFIX} ]] && PREFIX=${HOME}/usr
    [[ $(uname -m) =~ x86 ]] && MARCH="-march=native "
    MAKE=( make "${JOBS_FLAG:--j"$(nproc)"}"
                prefix="${PREFIX}"
                CFLAGS="${MARCH}-O2 -pipe -fstack-protector-strong -fno-plt"
                LDFLAGS="-Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now"
                USE_LIBPCRE2=1
                NO_CROSS_DIRECTORY_HARDLINKS=1
                NO_PERL_CPAN_FALLBACKS=1 )

    GIT_FOLDER=${SRC_FOLDER:-${HOME}/src}/git
    if [[ ! -d ${GIT_FOLDER} ]]; then
        mkdir -p "${GIT_FOLDER%/*}"
        git clone git://github.com/git/git "${GIT_FOLDER}"
    fi
    cd "${GIT_FOLDER}" || die "Couldn't move into ${GIT_FOLDER}!"

    git clean -fxdq
    git fetch

    [[ -z ${GIT_VERSION} ]] && GIT_VERSION=2.22.0
    git checkout v"${GIT_VERSION}"

    "${MAKE[@]}" all install || die "git build/install failed!"

    if [[ -n ${ZSH_NAME} ]]; then
        mkdir -p "${PREFIX}"/share/bash-completion/completions/
        install -m 0644 "${GIT_FOLDER}"/contrib/completion/git-completion.bash "${PREFIX}"/share/bash-completion/completions/git

        [[ -d ${HOME}/.zfunctions ]] || mkdir -p "${HOME}/.zfunctions"
        install -m 0644 "${GIT_FOLDER}"/contrib/completion/git-completion.zsh "${HOME}"/.zfunctions/_git
    fi

    path_push "${PREFIX}"/bin
    command -v git
    git --version
)}


# Build/install PGO'd LLVM
function bpgollvm() {(
    CMAKE=( cmake -G Ninja
                  -Wno-dev
                  -DCLANG_DEFAULT_LINKER=lld
                  -DCMAKE_BUILD_TYPE=Release )
    FLAGS="-O3$([[ $(uname -m) = "x86_64" ]] && echo " -march=native -mtune=native")"
    LLVM_PROJECT=${SRC_FOLDER:-${HOME}/src}/llvm-project
    BUILD_FOLDER=${LLVM_PROJECT}/build
    START=$(date +%s)

    while (( ${#} )); do
        case ${1} in
            "-b"|"--branch") shift; LLVM_VERSION=${1} ;;
            "-t"|"--tip-of-tree") LLVM_VERSION=master ;;
        esac
        shift
    done
    [[ -z ${LLVM_VERSION} ]] && LLVM_VERSION=llvmorg-8.0.1-rc2

    header "Updating LLVM and cleaning up"
    [[ -d ${LLVM_PROJECT} ]] || { mkdir -p "${LLVM_PROJECT%/*}"; git clone https://github.com/llvm/llvm-project "${LLVM_PROJECT}"; }
    cd ${LLVM_PROJECT} || die "llvm-project clone failed!"
    git reset --hard
    git clean -fxdq
    git fetch origin
    git checkout "${LLVM_VERSION}"
    # If we are on a branch, we should update it
    [[ ${LLVM_VERSION} = "master" || ${LLVM_VERSION} =~ release ]] && git pull

    # Ensure that we don't build llgo, it's broken
    LLVM_ALL_PROJECTS=$(grep -F "set(LLVM_ALL_PROJECTS " llvm/CMakeLists.txt | cut -d \" -f 2)
    CMAKE=( "${CMAKE[@]}" -DLLVM_ENABLE_PROJECTS="${LLVM_ALL_PROJECTS/;llgo}" )

    # Stage 1: Bootstrap compiler
    (
        header "Building LLVM stage 1"
		mkdir -p "${BUILD_FOLDER}"/stage1
		cd "${BUILD_FOLDER}"/stage1 || die "Error creating stage1 build folder"
        LINKER=$(if command -v ld.lld &>/dev/null; then echo lld; else echo gold; fi)
		"${CMAKE[@]}" -DCMAKE_C_COMPILER=clang \
                      -DCMAKE_C_FLAGS="${FLAGS}" \
                      -DCMAKE_CXX_COMPILER=clang++ \
                      -DCMAKE_CXX_FLAGS="${FLAGS}" \
                      -DLLVM_TARGETS_TO_BUILD=host \
                      -DLLVM_USE_LINKER=${LINKER} \
                      "${LLVM_PROJECT}"/llvm || die "Error configuring stage 1!"
		ninja || die "Error building stage 1!"
    ) || exit ${?}

    STAGE_ONE_BIN=${BUILD_FOLDER}/stage1/bin
    STAGE_ONE_BIN_DEFINES=( -DCMAKE_AR=${STAGE_ONE_BIN}/llvm-ar
                            -DCMAKE_C_COMPILER=${STAGE_ONE_BIN}/clang
                            -DCLANG_TABLEGEN=${STAGE_ONE_BIN}/clang-tblgen
                            -DCMAKE_CXX_COMPILER=${STAGE_ONE_BIN}/clang++
                            -DLLVM_USE_LINKER=${STAGE_ONE_BIN}/ld.lld
                            -DLLVM_TABLEGEN=${STAGE_ONE_BIN}/llvm-tblgen
                            -DCMAKE_RANLIB=${STAGE_ONE_BIN}/llvm-ranlib )

    # Stage 2a: Instrumented compiler
    (
        header "Building LLVM stage 2a"
        mkdir -p "${BUILD_FOLDER}"/stage2a
        cd "${BUILD_FOLDER}"/stage2a || die "Error creating stage2a build folder"
        export PATH=${STAGE_ONE_BIN:?}:${PATH}
        "${CMAKE[@]}" "${STAGE_ONE_BIN_DEFINES[@]}" \
                      -DCMAKE_C_FLAGS="${FLAGS}" \
                      -DCMAKE_CXX_FLAGS="${FLAGS}" \
                      -DLLVM_BUILD_INSTRUMENTED=IR \
                      -DLLVM_BUILD_RUNTIME=OFF \
                      -DLLVM_INCLUDE_GO_TESTS=OFF \
                      "${LLVM_PROJECT}"/llvm || die "Error configuring stage 2a!"
        ninja clang lld check-clang check-llvm || die "Error building or checking stage2a!"
    ) || exit ${?}

    STAGE_TWO_BIN=${BUILD_FOLDER}/stage2a/bin
    STAGE_TWO_BIN_DEFINES=( -DCMAKE_AR=${STAGE_TWO_BIN}/llvm-ar
                            -DCMAKE_C_COMPILER=${STAGE_TWO_BIN}/clang
                            -DCLANG_TABLEGEN=${STAGE_TWO_BIN}/clang-tblgen
                            -DCMAKE_CXX_COMPILER=${STAGE_TWO_BIN}/clang++
                            -DLLVM_USE_LINKER=${STAGE_TWO_BIN}/ld.lld
                            -DLLVM_TABLEGEN=${STAGE_TWO_BIN}/llvm-tblgen
                            -DCMAKE_RANLIB=${STAGE_TWO_BIN}/llvm-ranlib )

    # Stage 2b: Build clang with instrumented compiler
    (
        header "Building LLVM stage 2b"
        mkdir -p "${BUILD_FOLDER}"/stage2b
        cd "${BUILD_FOLDER}"/stage2b
        export PATH=${STAGE_TWO_BIN:?}:${PATH}
        "${CMAKE[@]}" "${STAGE_TWO_BIN_DEFINES[@]}" \
                      -DCMAKE_C_FLAGS="${FLAGS}" \
                      -DCMAKE_CXX_FLAGS="${FLAGS}" \
                      "${LLVM_PROJECT}"/llvm || die "Error configuring stage 2b!"
        ninja || die "Error building stage 2b!"
    ) || exit ${?}

    # Stage 3: Build final compiler
    (
        header "Building LLVM stage 3"
        mkdir -p "${BUILD_FOLDER}"/stage3
        cd "${BUILD_FOLDER}"/stage3 || die "Error creating stage 3 build folder"
        export PATH=${STAGE_ONE_BIN:?}:${PATH}

        # Merge profile data
        PROFILE_DATA=${BUILD_FOLDER}/stage3/profdata.prof
        llvm-profdata merge -output=${PROFILE_DATA} ${BUILD_FOLDER}/stage2a/profiles/*.profraw || die "Error merging profile data!"

        # Build compiler with that data
        "${CMAKE[@]}" "${STAGE_ONE_BIN_DEFINES[@]}" \
                      -DCMAKE_C_FLAGS="${FLAGS} -Wno-backend-plugin" \
                      -DCMAKE_CXX_FLAGS="${FLAGS} -Wno-backend-plugin" \
                      -DCMAKE_INSTALL_PREFIX=${PREFIX:=${HOME}/usr} \
                      -DLLVM_PROFDATA_FILE=${PROFILE_DATA} \
                      "${LLVM_PROJECT}"/llvm || die "Error configuring stage 3!"
        ninja || die "Error building stage 3!"
        ninja install || die "Error installing stage 3!"
    ) || exit ${?}

    header "Final LLVM information"

    TIME_STRING=$(format_time "${START}" "$(date +%s)")
    echo "Total build time: ${TIME_STRING:l}"

    path_push "${PREFIX}/bin"

    echo
    command -v clang
    clang --version | head -n1

    echo
    command -v ld.lld
    ld.lld --version
)}


# Build/install ripgrep
function birg() {(
    [[ -z ${RG_VERSION} ]] && RG_VERSION=11.0.1
    if [[ $(uname -m) = "x86_64" ]] && command -v dpkg &>/dev/null; then
        curl -LSso ${TMP_DEB:=$(mktemp --suffix=.deb)} https://github.com/BurntSushi/ripgrep/releases/download/${RG_VERSION}/ripgrep_${RG_VERSION}_amd64.deb
        sudo dpkg -i "${TMP_DEB}" && rm "${TMP_DEB}"
    else
        cd "${TMP_WKDIR:=$(mktemp -d)}"
        curl -LSs https://github.com/BurntSushi/ripgrep/archive/${RG_VERSION}.tar.gz | tar -xzf -
        cd ripgrep-${RG_VERSION}
        [[ -d ${HOME}/.cargo/bin ]] || install_rust
        path_push "${HOME}/.cargo/bin"
        cargo build --release --locked --features 'pcre2' || die "cargo build failed!"
        cargo install --force --path . || die "cargo install failed!"
        [[ -d ${HOME}/.zfunctions ]] || mkdir -p "${HOME}/.zfunctions"
        install -Dm644 complete/_rg ${HOME}/.zfunctions/_rg
    fi

    command -v rg
    rg --version
)}


# Build/update tmux
function btmux() {(
    [[ -z ${TMUX_VERSION} ]] && TMUX_VERSION=2.9a
    TMP_FOLDER=$(mktemp -d)
    TMUX_FOLDER=tmux-${TMUX_VERSION}

    cd "${TMP_FOLDER}"
    curl -LSs https://github.com/tmux/tmux/releases/download/"${TMUX_VERSION}"/"${TMUX_FOLDER}".tar.gz | tar -xzf -
    cd "${TMUX_FOLDER}" || die "Downloading or extracting tmux failed!"
    ./configure --prefix="${PREFIX:=${HOME}/usr}"
    make "${JOBS_FLAG:--j"$(nproc)"}" || die "make failed!"
    make install || die "install failed!"
    rm -rf "${TMP_FOLDER}"

    path_push "${PREFIX}"/bin
    command -v tmux
    tmux -V
)}


# Build/update zsh
function bzsh() {(
    ZSH_VERSION=5.7.1
    [[ ${#} -gt 0 ]] && ZSH_VERSION=${1}
    TMP_FOLDER=$(mktemp -d)
    ZSH_FOLDER=zsh-${ZSH_VERSION}

    cd "${TMP_FOLDER}"
    curl -LSs https://www.zsh.org/pub/"${ZSH_FOLDER}".tar.xz | tar -xJf -
    cd "${ZSH_FOLDER}" || die "Downloading or extracting zsh failed!"
    ./configure --prefix="${PREFIX:=${HOME}/usr}"
    make "${JOBS_FLAG:--j"$(nproc)"}" || die "make failed!"
    make install || die "install failed!"
    rm -rf "${TMP_FOLDER}"

    sudo chsh -s "${PREFIX:?}/bin/zsh" "$(whoami)"

    path_push "${PREFIX}"/bin
    command -v zsh
    zsh --version
)}


function install_rust() {(
    curl https://sh.rustup.rs -sSf | bash -s -- -y --no-modify-path
)}


function bldupdbin() {(
    bibat || exit ${?}
    bccache || exit ${?}
    bifd || exit ${?}
    bgit || exit ${?}
    birg || exit ${?}
    btmux || exit ${?}
    bzsh || exit ${?}
)}
# vi: filetype=zsh
