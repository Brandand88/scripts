#!/usr/bin/env bash
#
# Utility and terminal setup functions for Linux
#
# Copyright (C) 2017 Nathan Chancellor
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>


# Linux specific aliases
function linux_aliases() {
    # default Arch ls alias
    alias ls='ls --color=auto'

    # Update alias
    alias update='pacaur -Syyu'

    # Change directory aliases
    alias 6p='cd ${KERNEL_FOLDER}/angler'
    alias asu='cd ${REPO_FOLDER}/asu'
    alias ayk='cd ${KERNEL_FOLDER}/anykernel'
    alias lnx='cd ${KERNEL_FOLDER}/repos/linux'
    alias pkg='cd ${REPO_FOLDER}/pkgbuilds'
    alias op5='cd ${KERNEL_FOLDER}/op5'
    alias tlc='cd ${TC_FOLDER}'
    alias spt='cd ${SCRIPTS_FOLDER}'

    # Generate a kernel version for the current tree
    alias kver='make kernelversion'

    # Setup build for AOSP
    alias senv='. build/envsetup.sh'
}

# Setup PS1 and such
function linux_prompt() {
    source ~/.git-prompt.sh
    export GIT_PS1_SHOWDIRTYSTATE=1
    export GIT_PS1_SHOWUPSTREAM=auto
    export PROMPT_COMMAND='__git_ps1 "\[\033[01;34m\]\u@\h \[\033[01;32m\]\w\[\033[01;31m\]" " \[\033[39m\]\$\[\033[0m\] "'
}

# Log support so I can see what compiled and at what time
function log_support() {
    export LOG_FOLDER=${WEB_FOLDER}/me/logs

    # Create LOG_FOLDER if it doesn't exist
    [[ ! -d ${LOG_FOLDER} ]] && mkdir -p ${LOG_FOLDER}/results
    
    export LOG=${LOG_FOLDER}/results/compile_log_$(date +%m_%d_%y).log
}

# Setup ccache
# ccache_setup <size>
function ccache_setup() {
    if [[ -n $(command -v ccache) ]]; then
        if [[ -n ${1} ]]; then
            ccache -M ${1}G &> /dev/null
            export USE_CCACHE=1
            add_to_path_pre "/usr/lib/ccache/bin"
        else
            echo "${RED}Please specify ccache size!${RST}"
        fi
    else
        echo "${RED}Please install ccache!${RST}"
    fi
}

# Additional setup steps for Linux
function linux_setup() {
    ccache_setup 150
    log_support
}

# Repo sync shorthand
function rps {
    local ARGS

    if [[ -n ${1} ]]; then
        case ${1} in
            "g")
                ARGS="vendor/google/build "
                ARGS+="vendor/opengapps/sources/all "
                ARGS+="vendor/opengapps/sources/arm "
                ARGS+="vendor/opengapps/sources/arm64" ;;
            *)
                ARGS="$@" ;;
        esac
    fi

    repo sync ${JOBS_FLAG} --force-sync -c --no-clone-bundle --no-tags --optimized-fetch --prune ${ARGS}
}

# Repo init and sync function
# ris <url> <branch> |-s|
function ris {
    # User requested a shallow clone
    [[ ${3} = "-s" ]] && local DEPTH="--depth=1"

    repo init -u ${1} -b ${2} --no-clone-bundle ${DEPTH}

    time repo sync ${JOBS_FLAG} --force-sync -c --no-clone-bundle --no-tags --optimized-fetch --prune
}

# Update Linux stable mirror
function upstb() {
    CUR_FOLDER=$(pwd)

    if [[ ! -d ${KERNEL_FOLDER}/mirrors/stable ]]; then
        cd ${KERNEL_FOLDER}/mirrors
        git clone --mirror https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git stable
        cd stable
        git remote set-url --push origin git@github.com:nathanchance/linux-stable
    fi

    if [[ ! -d ${KERNEL_FOLDER}/mirrors/stable-rc ]]; then
        cd ${KERNEL_FOLDER}/mirrors
        git clone --mirror https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable-rc.git stable-rc
    fi

    cd ${KERNEL_FOLDER}/mirrors/stable

    git fetch -p origin
    git push --mirror

    cd ${KERNEL_FOLDER}/mirrors/stable-rc

    git fetch -p origin

    cd ${CUR_FOLDER}
}

# Clone kernel repos
# ckr |-m|
function ckr() {
    if [[ "$@" =~ "-m" ]]; then
        FOLDER=${KERNEL_FOLDER}/mirrors
        local MIRROR="--mirror"
    else
        FOLDER=${KERNEL_FOLDER}/repos
    fi

    mkdir -p ${FOLDER}
    cd ${FOLDER}

    git clone ${MIRROR} https://android.googlesource.com/kernel/common aosp-kc
    git clone ${MIRROR} https://android.googlesource.com/kernel/msm aosp-msm
    git clone ${MIRROR} https://chromium.googlesource.com/chromiumos/third_party/kernel chromium
    git clone ${MIRROR} https://source.codeaurora.org/quic/la/kernel/msm-4.4 caf-4.4
    git clone ${MIRROR} https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git linux
    git clone ${MIRROR} https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git stable
    git clone ${MIRROR} https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable-rc.git stable-rc
}

# Update kernel repos
# ukr |-m|
function ukr() {
    CUR_FOLDER=$(pwd)

    if [[ "$@" =~ "-m" ]]; then
        FOLDER=${KERNEL_FOLDER}/mirrors
        local MIRROR=true
    else
        FOLDER=${KERNEL_FOLDER}/repos
    fi

    REPO_LIST="aosp-kc aosp-msm caf-4.4 chromium linux stable stable-rc"

    for REPO in ${REPO_LIST}; do
        cd ${FOLDER}/${REPO}
        [[ ${MIRROR} ]] && git fetch -p origin \
                        || git pull
    done

    cd ${CUR_FOLDER}
    git remote update
}

# Add kernel remotes to a kernel repo
function kremotes() {
    [[ ! -f Makefile ]] && echo "\n${RED}Run this in a kernel tree!${RST}\n" && return 1

    REPO_LIST="aosp-kc aosp-msm caf-4.4 chromium linux stable stable-rc"

    for REPO in ${REPO_LIST}; do add_remote ${REPO} ${KERNEL_FOLDER}/mirrors/${REPO}; done

    git remote update
}

# Merge one git branch into current branch
# mrgb <branch> <url|remote>
function mrgb() {
    [[ $# -lt 2 ]] && echo "\n${RED}mrgb <branch> <remote|url>${RST}\n" && return 1

    git fetch ${2} ${1}

    local CB=$(git rev-parse --abbrev-ref HEAD)
    local BTM=${1}
    local RANGE=${CB}..FETCH_HEAD
    local URL

    [[ $(echo ${2} | grep http) ]] && URL=${2} \
                                   || URL=$(git remote get-url ${2})

    git merge FETCH_HEAD -m "Merge branch '${BTM}' of ${URL} into ${CB}

Commits in ${BTM}: ($(git rev-list --count ${RANGE}) commits)
$(git log --reverse --format="        %s" ${RANGE})

Signed-off-by: $(git config --get user.name) <$(git config --get user.email)>"

[[ $? -ne 0 ]] && echo "Merge needs manual intervention!

Resolve conflicts then run git merge --continue!" && return 1

header "${BTM} merged cleanly!" ${GRN}
}

# Merge one git tag into current branch
# mrgt <tag> [<remote|url>]
function mrgt() {
    [[ $# -gt 1 ]] && git fetch --tags ${2}

    local CB=$(git rev-parse --abbrev-ref HEAD)
    local TTM=${1}
    local RANGE=${CB}..${TTM}

    git merge ${TTM} -m "Merge ${TTM} into ${CB}

Commits in ${TTM}: ($(git rev-list --count ${RANGE}) commits)
$(git log --reverse --format="        %s" ${RANGE})

Signed-off-by: $(git config --get user.name) <$(git config --get user.email)>"

[[ $? -ne 0 ]] && echo "Merge needs manual intervention!

Resolve conflicts then run git merge --continue!" && return 1

header "${TTM} merged cleanly!" ${GRN}
}

# Neofetch alias
function nf() {
    echo
    neofetch \
        --kernel_shorthand off \
        --distro_shorthand tiny \
        --os_arch off \
        --uptime_shorthand tiny \
        --speed_shorthand on \
        --install_time off
    echo
    echo
}

# Find config values in a kernel tree
# kfg [-c <defconfig_file>] [-f <config>] [-e <config>] [-d <config>]
function kfg() {
    local DEFCONFIG CONFIG LIST

    while [[ $# -ge 1 ]]; do
        case ${1} in
            "-c"|"--config")
                shift

                DEFCONFIG=${1} ;;

            "-d"|"--disable")
                shift

                CONFIG=$(echo ${1} | sed s/CONFIG_//)

                [[ -z ${DEFCONFIG} ]] && DEFCONFIG=flash_defconfig

                echo "# CONFIG_${CONFIG} is not set" >> arch/arm64/configs/${DEFCONFIG} ;;

            "-e"|"--enable")
                shift

                CONFIG=$(echo ${1} | sed s/CONFIG_//)

                [[ -z ${DEFCONFIG} ]] && DEFCONFIG=flash_defconfig

                echo "CONFIG_${CONFIG}=y" >> arch/arm64/configs/${DEFCONFIG} ;;

            "-f"|"--find")
                shift

                CONFIG=$(echo ${1} | sed s/CONFIG_//)

                header "LOCATIONS OF ${CONFIG} IN TREE"
                git grep -n -1 ${CONFIG} | ag --nocolor Kconfig

                header "LOCATIONS OF ${CONFIG} IN CONFIG FILE"
                LIST=$(ag --nocolor ${CONFIG} out/.config)
                [[ -z ${LIST} ]] && echo "None found!" \
                                 || echo "${LIST}"
                echo ;;
        esac

        shift
    done
}

# Build a toolchain and release Flash Kernel builds
# frel <version>
function frel() {
    [[ ${2} != "-nt" ]] && toolchain -p -a arm64 -s linaro -t a73.a53
    flash -v ${1} -m stable -os Custom -b 7.1.x-custom -av 7.1.x
    flash -v ${1} -m stable -os OOS -b 7.1.x-oos -av 7.1.x
}

# Build Flash Kernel test builds
# ftest <version> <dirty_version> <type>
function ftest() {
    flash -v ${1} -r ${2} -m ${3} -os Custom -b 7.1.x-custom-for-${1} -av 7.1.x
    flash -v ${1} -r ${2} -m ${3} -os OOS -b 7.1.x-oos-for-${1} -av 7.1.x
}

# Applies patches from the 4.4 stable queue
function sq() {
    [[ ! -f Makefile ]] && echo "\n${RED}Run this in a kernel tree!${RST}\n" && return 1

    local FOLDER=${KERNEL_FOLDER}/repos/stable-queue/queue-4.4

    header "UPDATING QUEUE"
    git -C ${FOLDER} pull

    header "SERIES INFORMATION"
    local NUM_TOTAL=$(cat ${FOLDER}/series | wc -l)
    echo "${BOLD}SERIES LOCATION:${RST} ${FOLDER}/series"
    echo "${BOLD}NUMBER OF PATCHES:${RST} ${NUM_TOTAL}"

    header "APPLYING PATCHES"
    for PATCH in $(cat ${FOLDER}/series); do
        git am ${FOLDER}/${PATCH}

        if [[ $? -ne 0 ]]; then
            local NUM_DID=$(grep -n ${PATCH} ${FOLDER}/series | cut -d : -f 1)
            local NUM_TOGO=$((${NUM_TOTAL} - ${NUM_DID}))

            header "MANUAL INTERVENTION NEEDED"
            echo "git apply -3 ${FOLDER}/${PATCH}"
            echo
            echo "for PATCH in \$(cat ${FOLDER}/series | tail -n ${NUM_TOGO}); do git am ${FOLDER}/\${PATCH}; done"
            echo

            return
        fi
    done

    header "PATCHES SUCESSFULLY APPLIED" ${GRN}
}

# Sync private repo
function sync_private() {
    [[ ! -f Makefile ]] && echo "\n${RED}Run this in a kernel tree!${RST}\n" && return 1

    local BRANCHES="7.1.x-base 7.1.x-custom 7.1.x-oos"

    for BRANCH in ${BRANCHES}; do
        git checkout ${BRANCH}
        git push private ${BRANCH}
    done

    local TAGS="$(git tag -l | grep Flash)"

    for TAG in ${TAGS}; do
        [[ -z $(git ls-remote private refs/tags/${TAG}) ]] && git push private ${TAG} \
                                                           || echo "${TAG} already present!"
    done
}

# Manage private branches
# priv_branches [-c|-d] <ver>
function priv_branches() {
    [[ ! -f Makefile ]] && echo "\n${RED}Run this in a kernel tree!${RST}\n" && return 1

    local BRANCH_SFX="base custom oos"

    for BRANCH in ${BRANCH_SFX}; do
        TARGET_BRANCH=7.1.x-${BRANCH}-for-${2}
        BASE_BRANCH=7.1.x-${BRANCH}

        case ${1} in
            "-c"|"--create")
                git checkout -b ${TARGET_BRANCH} ${BASE_BRANCH}
                git push --set-upstream private ${TARGET_BRANCH} ;;

            "-d"|"--delete")
                git checkout ${BRANCH}
                git branch -d ${TARGET_BRANCH}
                git push private :${TARGET_BRANCH} ;;
        esac
    done
}

# Regenerate flash_defconfig using savedefconfig for minimalness
# rgn_kfg [-d <defconfig>]
function rgn_kfg() {
    [[ ! -f Makefile ]] && echo "\n${RED}Run this in a kernel tree!${RST}\n" && return 1
    [[ ! -d /opt/a-4.9 ]] && echo "\n${RED}Clone Google's 4.9 toolchain to /opt!${RST}\n" && return 1

    [[ $# -lt 2 ]] && local DEFCONFIG=flash_defconfig \
                   || local DEFCONFIG=${2}

    rm -rf out
    make O=out ARCH=arm64 ${DEFCONFIG}
    make O=out ARCH=arm64 savedefconfig
    cp -v out/defconfig arch/arm64/configs/flash_defconfig
}
