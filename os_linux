#!/usr/bin/env bash
#
# Utility and terminal setup functions for Linux
#
# Copyright (C) 2017 Nathan Chancellor
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>


function linux_aliases() {
    # default Arch ls alias
    alias ls='ls --color=auto'

    # Update alias
    alias update='pacaur -Syyu'

    # Change directory aliases
    alias 6p='cd ${KERNEL_FOLDER}/angler'
    alias asu='cd ${REPO_FOLDER}/asu'
    alias ayk='cd ${KERNEL_FOLDER}/anykernel'
    alias lnx='cd ${KERNEL_FOLDER}/linux'
    alias pkg='cd ${REPO_FOLDER}/pkgbuilds'
    alias op5='cd ${KERNEL_FOLDER}/op5'
    alias tlc='cd ${TC_FOLDER}'
    alias spt='cd ${SCRIPTS_FOLDER}'
}

# Setup PS1 and such
function linux_prompt() {
    source ~/.git-prompt.sh
    export GIT_PS1_SHOWDIRTYSTATE=1
    export GIT_PS1_SHOWUPSTREAM=auto
    export PROMPT_COMMAND='__git_ps1 "\[\033[01;34m\]\u@\h \[\033[01;32m\]\w\[\033[01;31m\]" " \[\033[39m\]\$\[\033[0m\] "'
}

# Log support so I can see what compiled and at what time
function log_support() {
    export LOG_FOLDER=${WEB_FOLDER}/me/logs

    # Create LOG_FOLDER if it doesn't exist
    [[ ! -d ${LOG_FOLDER} ]] && mkdir -p ${LOG_FOLDER}/results
    
    export LOG=${LOG_FOLDER}/results/compile_log_$(date +%m_%d_%y).log
}

# Setup ccache
function ccache_setup() {
    if [[ -n $(command -v ccache) ]]; then
        if [[ -n ${1} ]]; then
            ccache -M ${1}G &> /dev/null
            export USE_CCACHE=1
            add_to_path_pre "/usr/lib/ccache/bin"
        else
            echo "${RED}Please specify ccache size!${RST}"
        fi
    else
        echo "${RED}Please install ccache!${RST}"
    fi
}

function linux_setup() {
    ccache_setup 150
    log_support
}

# Set up a virtual environment for Python
function mkavenv {
    virtualenv2 ${HOME}/venv && source ${HOME}/venv/bin/activate
}

# Deactivate and remove venv
function rmvenv {
    deactivate && rm -rf ${HOME}/venv
}

# Repo sync shorthand
function rps {
    local ARGS

    if [[ -n ${1} ]]; then
        case ${1} in
            "k")
                ARGS="kernel/huawei/angler" ;;
            "g")
                ARGS="vendor/google/build "
                ARGS+="vendor/opengapps/sources/all "
                ARGS+="vendor/opengapps/sources/arm "
                ARGS+="vendor/opengapps/sources/arm64" ;;
            *)
                ARGS="$@" ;;
        esac
    fi

    repo sync ${JOBS_FLAG} --force-sync -c --no-clone-bundle --no-tags --optimized-fetch --prune ${ARGS}
}

function ris-sparse {
    repo init -u ${1} -b ${2} --no-clone-bundle --depth=1

    time repo sync ${JOBS_FLAG} --force-sync -c --no-clone-bundle --no-tags --optimized-fetch --prune
}

function ris {
    repo init -u ${1} -b ${2}

    time repo sync ${JOBS_FLAG} --force-sync -c --no-clone-bundle --no-tags --optimized-fetch --prune
}

function upstable() {
    CUR_FOLDER=$(pwd)

    if [[ ! -d ${KERNEL_FOLDER}/stable ]]; then
        cd ${KERNEL_FOLDER}
        git clone --mirror https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git stable
        cd stable
        git remote set-url --push origin git@github.com:nathanchance/linux-stable
    fi

    cd ${KERNEL_FOLDER}/stable

    git fetch -p origin
    git push --mirror

    cd ${CUR_FOLDER}
}

function kremotes() {
    [[ ! -f Makefile ]] && echo "\n${RED}Run this in a kernel tree!${RST}\n" && return 1

    add_remote aosp-kc https://android.googlesource.com/kernel/common
    add_remote aosp-msm https://android.googlesource.com/kernel/msm
    add_remote chromium https://chromium.googlesource.com/chromiumos/third_party/kernel
    add_remote linux https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
    add_remote stable https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git
    add_remote stable-rc https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable-rc.git

    git fetch --all
}

function gmrg() {
    [[ $# -lt 2 ]] && echo "\n${RED}gmrg <remote> <branch>${RST}\n" && return 1

    git fetch ${1} ${2}

    local CB=$(git rev-parse --abbrev-ref HEAD)
    local BTM=${2}
    local RANGE=${CB}..FETCH_HEAD
    local URL

    [[ $(echo ${1} | grep http) ]] && URL=${1} \
                                   || URL=$(git remote get-url ${1})

    git merge FETCH_HEAD -m "Merge branch '${BTM}' of ${URL} into ${CB}

Commits in ${BTM}: ($(git rev-list --count ${RANGE}) commits)
$(git log --reverse --format="        %s" ${RANGE})

Signed-off-by: $(git config --get user.name) <$(git config --get user.email)>"

[[ $? -ne 0 ]] && echo "Merge needs manual intervention!

Resolve conflicts then run git merge --continue!" && return 1

header "${BTM} merged cleanly!" ${GRN}
}

function nf() {
    echo
    neofetch \
        --kernel_shorthand off \
        --distro_shorthand tiny \
        --os_arch off \
        --uptime_shorthand tiny \
        --speed_shorthand on \
        --install_time off
    echo
    echo
}

