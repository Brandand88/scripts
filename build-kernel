#!/usr/bin/env bash
#
# Script to build a zImage from a kernel tree
#
# Copyright (C) 2017-2018 Nathan Chancellor
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>


# Source our universal functions script and macOS check
source common

# Start time
START=$(date +%s)

# Gather parameters
while [[ $# -ge 1 ]]; do
    case ${1} in
        # Architecture to build
        "-a"|"--arch")
            shift && enforce_value "$@"

            ARCH=${1} ;;

        # Use Clang for compiling the kernel
        "-c"|"--clang")

            CLANG=true ;;

        # Specify which Clang toolchain to use
        "-ct"|"--clang-toolchain")
            shift && enforce_value "$@"

            CLANG_TOOLCHAIN_FOLDER=${1} ;;

        # Config to build
        "-d"|"--defconfig")
            shift && enforce_value "$@"

            DEFCONFIG=${1} ;;

        # Show full compilation
        "-D"|"--debug")
            VERBOSITY=2 ;;

        # Kernel folder
        "-f"|"--folder")
            shift && enforce_value "$@"

            FOLDER=${1} ;;

        # Specify which GCC toolchain to use
        "-gt"|"--gcc-toolchain")
            shift && enforce_value "$@"

            GCC_TOOLCHAIN_FOLDER=${1} ;;

        # Upload image to transfer.sh
        "-u"|"--upload")
            UPLOAD=true ;;

        # Show only warnings and errors during compilation
        "-w"|"--warnings")
            VERBOSITY=1 ;;
    esac

    shift
done

# Defaults
[[ -z ${ARCH} ]] && ARCH=arm64
[[ -z ${GCC_TOOLCHAIN_FOLDER} ]] && GCC_TOOLCHAIN_FOLDER=/opt/aosp-gcc

# Error out if defconfig wasn't supplied
[[ -z ${DEFCONFIG} ]] && die "Please supply a defconfig!"

# Set toolchains
GCC_TOOLCHAIN=$(find ${GCC_TOOLCHAIN_FOLDER}/bin \( -type f -o -type l \) -name '*-gcc' | head -n1)
[[ -z ${GCC_TOOLCHAIN} ]] && die "GCC toolchain could not be found!"
if [[ ${CLANG} ]]; then
    [[ -z ${CLANG_TOOLCHAIN_FOLDER} ]] && CLANG_TOOLCHAIN_FOLDER=/opt/aosp-clang/clang-4053586
    CLANG_TOOLCHAIN=${CLANG_TOOLCHAIN_FOLDER}/bin/clang
    [[ ! -f ${CLANG_TOOLCHAIN} ]] && die "Clang toolchain could not be found!"
fi

# Kernel make function
function kmake() {
    # Set make variable
    MAKE="make ${JOBS_FLAG} O=out ARCH=${ARCH}"

    if [[ ${CLANG} ]]; then
        PATH=${BIN_FOLDER}:${PATH} ${MAKE} CC="${CCACHE} ${CLANG_TOOLCHAIN}" \
                                           CLANG_TRIPLE=aarch64-linux-gnu- \
                                           CROSS_COMPILE="${GCC_TOOLCHAIN%gcc}" \
                                           HOSTCC="${CCACHE} ${CLANG_TOOLCHAIN}" \
                                           "$@"
    else
        PATH=${BIN_FOLDER}:${PATH} ${MAKE} CROSS_COMPILE="${CCACHE} ${GCC_TOOLCHAIN%gcc}" "$@"
    fi
}


# Basic build function
function build() {
    # Clean up from last compile
    rm -rf out && mkdir -p out

    # Build kernel image
    kmake "${DEFCONFIG}"
    kmake
}

# Report error if we aren't in a tree with a Makefile
[[ -n ${FOLDER} ]] && cd "${FOLDER}"
[[ ! -f Makefile ]] && die "This must be run in a kernel tree!"

# Show the base version we are making
header "BUILDING $(make CROSS_COMPILE="" kernelversion)"

# Show compilation based on flags
case ${VERBOSITY} in
    "2")
        build ;;
    "1")
        build |& ag --nocolor "error:|warning" ;;
    *)
        build &> /dev/null ;;
esac

# Report success
FINAL_IMAGE=$(find out -name '*Image*-dtb')
END=$(date +%s)
if [[ -f ${FINAL_IMAGE} ]]; then
    echo "\n${GRN}BUILT IN $(format_time "${START}" "${END}")${RST}\n
${BOLD}IMAGE:${RST} ${FINAL_IMAGE}\n
${BOLD}VERSION:${RST} $(cat out/include/config/kernel.release)"
else
    die "Kernel build failed!"
fi

# Upload image if necessary
if [[ ${UPLOAD} ]]; then
    echo
    curl --upload-file "${FINAL_IMAGE}" https://transfer.sh/"${IMAGE}"
fi

# Alert of script end
echo "\n\a"
