#!/usr/bin/env bash
#
# Flash Kernel compilation script
#
# Copyright (C) 2016-2017 Nathan Chancellor
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>



###########
#         #
#  USAGE  #
#         #
###########

# PURPOSE: Build Flash Kernel and package it into a flashable zip
# USAGE: $ bash kernel.sh -h



###################
#                 #
#  INITIAL SETUP  #
#                 #
###################

# SOURCE OUR UNIVERSAL FUNCTIONS SCRIPT AND MAC CHECK
SCRIPT_DIR=$( cd $( dirname $( readlink -f "${BASH_SOURCE[0]}" ) ) && pwd )
BIN_DIR=${SCRIPT_DIR}/bin
source ${SCRIPT_DIR}/funcs && macCheck

# PRINT A HELP MENU IF REQUESTED
function help_menu() {
    echo -e ""
    echo -e "${BOLD}OVERVIEW:${RST} Builds and packages Flash Kernel\n"
    echo -e "${BOLD}USAGE:${RST} bash ${0} <options>\n"
    echo -e "${BOLD}EXAMPLE:${RST} bash ${0} -m public -t 4.9 -c angler_defconfig\n"
    echo -e "${BOLD}OPTIONAL PARAMETERS:${RST}"
    echo -e "    -b | --branch:      The branch to compile"
    echo -e "    -c | --config:      The defconfig to use while compiling"
    echo -e "    -d | --device:      The device to compile"
    echo -e "    -m | --mode:        A public, private, or test kernel"
    echo -e "    -n | --no-clean:    Don't clean the zip clean folder"
    echo -e "    -t | --toolchain:   Compile with 4.9 or 7.x"
    echo -e "    -v | --version:     Set LOCALVERSION externally from defconfig\n"
    echo -e "    -w | --warnings:    Compile verbosely (show full errors/warnings)"
    echo -e "No options will build an Angler kernel and push to private folder\n"
    exit
}



################
#              #
#  PARAMETERS  #
#              #
################

# GATHER PARAMETERS
while [[ $# -ge 1 ]]; do
    case "${1}" in
        "-b"|"--branch")
            shift

            if [[ $# -ge 1 ]]; then
                KERNEL_BRANCH=${1}
            else
                reportError "Please specify a branch!"
            fi ;;

        "-c"|"--config")
            shift

            if [[ $# -ge 1 ]]; then
                DEFCONFIG=${1}
            else
                reportError "Please specify a defconfig!"
            fi ;;

        "-d"|"--device")
            shift

            case ${1} in
                "angler")
                    DEVICE=${1} ;;
                *)
                    reportError "Invalid device!" ;;
            esac ;;

        "-h"|"--help")
            help_menu ;;

        "-m"|"--mode")
            shift

            case ${1} in
                "private"|"public"|"test")
                    MODE=${1} ;;
                *)
                    reportError "Invalid mode!" ;;
            esac ;;

        "-n"|"--no-clean")
            NOCLEAN=true ;;

        "-t"|"--toolchain")
            shift

            case "${1}" in
                "4.9"|"7.x"|"8.x")
                    TOOLCHAIN_NAME=${1} ;;
                *)
                    reportError "Invalid toolchain!" ;;
            esac ;;

        "-v"|"--version")
            shift

            if [[ $# -ge 1 ]]; then
                export LOCALVERSION="${1}"
            else
                reportError "Please specify something for LOCALVERSION!"
            fi ;;

        "-w"|"--warnings")
            VERBOSE=true ;;

        *)
            reportError "Invalid parameter" ;;
    esac

    shift
done

# DEFAULT PARAMETERS
[[ -z ${KERNEL_BRANCH} ]] && KERNEL_BRANCH="7.1.2-flash-dev"
[[ -z ${DEFCONFIG} ]] && DEFCONFIG="flash_defconfig"
[[ -z ${DEVICE} ]] && DEVICE="angler"
[[ -z ${MODE} ]] && MODE="private"
[[ -z ${TOOLCHAIN_NAME} ]] && TOOLCHAIN_NAME="7.x"



###############
#             #
#  VARIABLES  #
#             #
###############

# FOLDERS
KERNEL_HEAD=${HOME}/Kernels
SOURCE_FOLDER=${KERNEL_HEAD}/${DEVICE}
OUT_FOLDER=${SOURCE_FOLDER}/out
ANYKERNEL_FOLDER=${KERNEL_HEAD}/anykernel
ZIP_MOVE_HEAD=${HOME}/Web/Downloads

case ${TOOLCHAIN_NAME} in
    "4.9")
        TOOLCHAIN_FOLDER=aosp-4.9
        TOOLCHAIN_PREFIX=aarch64-linux-android- ;;
    "7.x")
        TOOLCHAIN_FOLDER=aarch64-linaro-linux-android-7.x
        TOOLCHAIN_PREFIX=aarch64-linaro-linux-android- ;;
    "8.x")
        TOOLCHAIN_FOLDER=gcc-8.x
        TOOLCHAIN_PREFIX=aarch64-gnu-linux-gnu- ;;
esac

TOOLCHAIN_FOLDER=${HOME}/Toolchains/${TOOLCHAIN_FOLDER}

case ${MODE} in
    "private")
        ZIP_MOVE=${ZIP_MOVE_HEAD}/../me/Flash-Kernel
        ANYKERNEL_BRANCH=${DEVICE}-flash-personal-7.1.2
        KEYS=nathan ;;
    "public")
        ZIP_MOVE=${ZIP_MOVE_HEAD}/Kernels
        ANYKERNEL_BRANCH=${DEVICE}-flash-public-7.1.2
        KEYS=testkey ;;
    "test")
        ZIP_MOVE=${ZIP_MOVE_HEAD}/Kernels/.tests
        ANYKERNEL_BRANCH=${DEVICE}-flash-public-7.1.2
        KEYS=testkey ;;
esac

# KERNEL INFO
ARCHITECTURE=arm64
KERNEL_IMAGE=Image.gz-dtb
THREADS=-j$( nproc --all )
KERNEL=${OUT_FOLDER}/arch/${ARCHITECTURE}/boot/${KERNEL_IMAGE}



###############
#             #
#  FUNCTIONS  #
#             #
###############


# CLEAN UP
function cleanUp() {
    # CLEAN ANYKERNEL FOLDER
    cd "${ANYKERNEL_FOLDER}"
    git checkout ${ANYKERNEL_BRANCH}
    git clean -fxd

    # CLEAN SOURCE FOLDER
    cd "${SOURCE_FOLDER}"
    # ONLY CHECKOUT IF WE AREN'T BISECTING OR REBASING
    [[ ! $( git status | ag "bisec|rebas" ) ]] && git checkout ${KERNEL_BRANCH}
    git clean -fxd
}


# MAKE KERNEL
function makeKernel() {
    cd "${SOURCE_FOLDER}"

    # SET MAKE VARIABLE FOR CONVENIENCE
    # AS I FOOLISHLY LEARNED, ALL CAF CODE REQUIRES AN OUTPUT DIRECTORY
    # TO WORK PROPERLY SO WHILE MY NEXUS DOESN'T CURRENTLY REQUIRE IT,
    # IT'S GOOD TO BE AHEAD OF THE CURVE IF IT WORKS.
    MAKE="make O=${OUT_FOLDER}"
    CCACHE=$( command -v ccache )

    # PROPERLY POINT COMPILER TO TOOLCHAIN AND ARCHITECTURE
    export CROSS_COMPILE="${CCACHE} ${TOOLCHAIN_FOLDER}/bin/${TOOLCHAIN_PREFIX}"
    export ARCH=${ARCHITECTURE}
    export SUBARCH=${ARCHITECTURE}

    # SETUP OUT FOLDER OR CLEAN IT
    if [[ -d ${OUT_FOLDER} ]]; then
        ${MAKE} clean
        ${MAKE} mrproper
    else
        mkdir -p ${OUT_FOLDER}
    fi

    # POINT TO PROPER DEFCONFIG
    ${MAKE} ${DEFCONFIG}

    # MAKE THE KERNEL
    time ${MAKE} ${THREADS}
}


# PRINT ZIP INFO
function printKernelInfo() {
    # KERNEL VERSION IS AUTOMATICALLY GENERATED
    export KERNEL_VERSION=$( cat ${OUT_FOLDER}/include/config/kernel.release )
    export ZIP_NAME=$( echo ${KERNEL_VERSION} | sed "s/^[^-]*-//g" )
    export KERNEL_ZIP=${ZIP_NAME}-signed.zip

    echo -e "${BOLD}Kernel version:${RST} ${KERNEL_VERSION}"
    echo -e "${BOLD}Kernel zip:${RST} ${KERNEL_ZIP}"; newLine
}


# SETUP FOLDERS
function setupFolders() {
    # IF ZIPMOVE DOESN'T EXIST, MAKE IT
    [[ ! -d "${ZIP_MOVE}" ]] && mkdir -p "${ZIP_MOVE}"

    # IF IT ISN'T A PUBLIC BUILD, CLEAN THE FOLDER
    if [[ ${MODE} != "public" ]]; then
        [[ -z ${NOCLEAN} ]] && rm -rf "${ZIP_MOVE}"/*
    else
        # OTHERWISE, MOVE THE OLD FILES TO AN "OLD" FOLDER
        [[ ! -d "${ZIP_MOVE}"/Old ]] && mkdir -p "${ZIP_MOVE}"/Old
        mv $( find "${ZIP_MOVE}"/* -maxdepth 0 -type f ) "${ZIP_MOVE}"/Old
    fi
}


# PACKAGE ZIP
function packageZip() {
    cd "${ANYKERNEL_FOLDER}"

    # MOVE THE KERNEL IMAGE
    cp "${KERNEL}" "${ANYKERNEL_FOLDER}"

    # PACKAGE THE ZIP WITHOUT THE README
    zip -q -r9 ${ZIP_NAME}-unsigned.zip * -x README.md ${ZIP_NAME}-unsigned.zip

    # SIGN ZIP
    java -jar ${BIN_DIR}/signapk.jar \
              ${BIN_DIR}/${KEYS}.x509.pem \
              ${BIN_DIR}/${KEYS}.pk8 \
              ${ZIP_NAME}-unsigned.zip \
              ${ZIP_NAME}.zip

    ${BIN_DIR}/zipadjust ${ZIP_NAME}.zip ${ZIP_NAME}-adjusted.zip &>/dev/null

    java -jar ${BIN_DIR}/minsignapk.jar \
              ${BIN_DIR}/${KEYS}.x509.pem \
              ${BIN_DIR}/${KEYS}.pk8 \
              ${ZIP_NAME}-adjusted.zip \
              ${KERNEL_ZIP}
}

# MOVE FILES
function moveFiles() {
    # IF PACKAGING FAILED, ERROR OUT
    [[ ! -f ${KERNEL_ZIP} ]] && reportError "Kernel zip not found!"

    # MOVE THE KERNEL ZIP TO WHERE IT NEEDS TO GO
    mv ${KERNEL_ZIP} "${ZIP_MOVE}"

    # GENERATE MD5SUM
    md5sum "${ZIP_MOVE}"/${KERNEL_ZIP} > "${ZIP_MOVE}"/${KERNEL_ZIP}.md5
}


# GENERATE CHANGELOG
function generateChangelog() {
    GITHUB="http://github.com/nathanchance"

    # KERNEL SOURCE FIRST
    cd "${SOURCE_FOLDER}"

    # WE NEED TO MARK THE PREVIOUS TAG FOR CHANGELOG
    PREV_TAG_NAME=$( git describe --abbrev=0 --tags )

    echo -e "${GITHUB}/${DEVICE}/commits/${KERNEL_BRANCH}\n" \
    > "${ZIP_MOVE}"/${ZIP_NAME}-changelog.txt

    git log --format="%h %s by %aN" --abbrev=12 ${PREV_TAG_NAME}..HEAD \
    >> "${ZIP_MOVE}"/${ZIP_NAME}-changelog.txt

    # ANYKERNEL NEXT
    cd "${ANYKERNEL_FOLDER}"

    # WE ONLY WANT TO SHOW ANYKERNEL CHANGES IF THERE HAVE BEEN SOME
    PREV_TAG_NAME=$( git describe --abbrev=0 --tags --always )
    NUM_COMMITS=$( git log ${PREV_TAG_NAME}..HEAD --pretty=oneline | wc -l )

    if [[ ${NUM_COMMITS} -gt 0 ]]; then
        echo -e "\n\n${GITHUB}/AnyKernel2/commits/${ANYKERNEL_BRANCH}\n" \
        >> "${ZIP_MOVE}"/${ZIP_NAME}-changelog.txt

        git log --format="%h %s by %aN" --abbrev=12 ${PREV_TAG_NAME}..HEAD \
        >> "${ZIP_MOVE}"/${ZIP_NAME}-changelog.txt
    fi
}


# TAG FOR RELEASES
function tagRelease() {
    cd "${SOURCE_FOLDER}"

    git tag -a "${ZIP_NAME}" -m "${ZIP_NAME}"
    git push origin "${ZIP_NAME}"

    cd "${ANYKERNEL_FOLDER}"

    git tag -a "${ZIP_NAME}" -m "${ZIP_NAME}"
    git push origin "${ZIP_NAME}"
}


# PRINT FILE INFO
function endingInfo() {
    # ONLY PRINT FILE INFO IF IT EXISTS
    if [[ ${SUCCESS} = true ]]; then
        echo -e ${RED}"FILE LOCATION: ${ZIP_MOVE}/${KERNEL_ZIP}"
        echo -e "SIZE: $( du -h ${ZIP_MOVE}/${KERNEL_ZIP} |
                          awk '{print $1}' )"${RST}
    fi

    # PRINT TIME INFO REGARDLESS OF SUCCESS
    echo -e ${RED}"TIME: $( date +%D\ %r | awk '{print toupper($0)}' )"
    echo -e "DURATION: $( format_time ${END} ${START} )"${RST}; newLine
}


# LOG GENERATION
function generateLog() {
    # DATE: BASH_SOURCE (PARAMETERS)
    # BUILD <SUCCESSFUL|FAILED> IN # MINUTES AND # SECONDS
    echo -e "\n$( date +"%m/%d/%Y %H:%M:%S" ): ${BASH_SOURCE} ${1}" >> ${LOG}
    echo -e "${BUILD_RESULT} IN $( format_time ${END} ${START} )" >> ${LOG}

    # ONLY ADD A LINE ABOUT FILE LOCATION IF SCRIPT COMPLETED SUCCESSFULLY
    if [[ ${SUCCESS} = true ]]; then
        # FILE LOCATION: PATH
        echo -e "FILE LOCATION: ${ZIP_MOVE}/${KERNEL_ZIP}" >> ${LOG}
    fi
}



################
#              #
# SCRIPT START #
#              #
################

# SET THE START OF THE SCRIPT AND CLEAR TERMINAL
START=$( date +"%s" ) && clear


###################
# SHOW ASCII TEXT #
###################

echo -e ${RED}; newLine
echo -e "================================================================================================"; newLine; newLine
echo -e "  ___________________________________  __   ______ _______________________   ________________   "
echo -e "  ___  ____/__  /___    |_  ___/__  / / /   ___  //_/__  ____/__  __ \__  | / /__  ____/__  /   "
echo -e "  __  /_   __  / __  /| |____ \__  /_/ /    __  ,<  __  __/  __  /_/ /_   |/ /__  __/  __  /    "
echo -e "  _  __/   _  /___  ___ |___/ /_  __  /     _  /| | _  /___  _  _, _/_  /|  / _  /___  _  /___  "
echo -e "  /_/      /_____/_/  |_/____/ /_/ /_/      /_/ |_| /_____/  /_/ |_| /_/ |_/  /_____/  /_____/  "; newLine; newLine; newLine
echo -e "================================================================================================"; newLine


#################
# MAKING KERNEL #
#################

echoText "CLEANING UP AND MAKING KERNEL"

# DON'T SHOW CLEAN UP OUTPUT
cleanUp &>/dev/null

# ONLY SHOW ERRORS, WARNINGS, AND THE IMAGE LINE WHEN COMPILING (UNLESS VERBOSE)
if [[ ${VERBOSE} = true ]]; then
    makeKernel
else
    makeKernel |& ag --no-color "error:|warning:|${KERNEL_IMAGE}"
fi


######################
# IF KERNEL COMPILED #
######################

if [[ $( ls ${KERNEL} | wc -l ) != 0 ]]; then
    # SET BUILD SUCCESS STRING AND SUCCESS VARIABLE
    BUILD_RESULT="BUILD SUCCESSFUL" && SUCCESS=true

    newLine; echoText "MAKING AND MOVING FLASHABLE ZIP"

    # PRINT KERNEL AND ZIP INFO
    printKernelInfo

    # SETUP ENVIRONMENT AND MAKE/MOVE ZIP
    setupFolders
    packageZip
    moveFiles
    generateChangelog

    # TAG THE HEAD COMMIT FOR PUBLIC BUILD (SILENTLY)
    [[ ${MODE} = "public" ]] && tagRelease &>/dev/null

###################
# IF BUILD FAILED #
###################

else
    BUILD_RESULT="BUILD FAILED"
    SUCCESS=false
fi


######################
# ENDING INFORMATION #
######################

END=$( date +"%s" )

echoText "${BUILD_RESULT}!"

endingInfo

generateLog

echo -e "\a"
