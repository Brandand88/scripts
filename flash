#!/usr/bin/env bash
#
# Flash Kernel compilation script
#
# Copyright (C) 2016-2017 Nathan Chancellor
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>


################
#              #
#  PARAMETERS  #
#              #
################

# SOURCE OUR UNIVERSAL FUNCTIONS SCRIPT AND MAC CHECK
source common
# UNSET THE UNIVERSAL OS VARIABLE FOR THIS SCRIPT ONLY
unset OS

# GATHER PARAMETERS
PARAMS="$@"
while [[ $# -ge 1 ]]; do
    case ${1} in
        # ANDROID VERSION
        "-av"|"--android-version")
            shift && enforce_value $@

            ANDROID_VERSION=${1} ;;

        # BRANCH TO COMPILE; IF ABSENT, USE CURRENT BRANCH
        "-b"|"--branch")
            shift && enforce_value $@

            KERNEL_BRANCH=${1} ;;

        # DEFCONFIG TO USE WHILE COMPILING; IF ABSENT, USE FLASH_DEFCONFIG
        "-c"|"--config")
            shift && enforce_value $@

            DEFCONFIG=${1} ;;

        # CLANG TOOLCHAIN TO USE WHILE COMPILING
        "-ct"|"--clang-toolchain")
            shift && enforce_value $@

            CLANG_TOOLCHAIN_FOLDER=${1} ;;

        # DEVICE TO COMPILE FOR; IF ABSENT, USE PIXEL 2 XL
        "-d"|"--device")
            shift && enforce_value $@

            DEVICE=${1} ;;

        # SHOW FULL COMPILATION, NOT JUST WARNINGS AND ERRORS
        "-D"|"--debug")
            DEBUG=true ;;

        # EXTRA MAKE FLAGS IF NECESSARY (LIKE MISMATCH CONFIG)
        "-f"|"--flags")
            shift && enforce_value $@

            EXTRA_MAKE_FLAGS=${1} ;;

        # GCC TOOLCHAIN TO USE WHILE COMPILING
        "-gt"|"--gcc-toolchain")
            shift && enforce_value $@

            GCC_TOOLCHAIN_FOLDER=${1} ;;

        # DO NOT PACKAGE KERNEL IMAGE
        "-io"|"--image-only")
            IMAGE_ONLY=true ;;

        # WHERE TO MOVE ZIP AFTER COMPILATION (PRIVATE, TEST, OR PUBLIC)
        "-m"|"--mode")
            shift && enforce_value $@

            MODE=${1} ;;

        # DON'T MOVE/DELETE ZIPS IN FILE_MOVE FOLDER
        "-n"|"--no-clean")
            NOCLEAN=true ;;

        # (ONEPLUS 5 ONLY) CUSTOM ROMS OR OXYGENOS BUILD
        "-os"|"--operating-system")
            shift && enforce_value $@

            OS=${1} ;;

        # BETA VERSIONING (# IN KERNEL VERSION)
        "-r"|"--revision")
            shift && enforce_value $@

            REVISION=${1} ;;

        # VERSION CODE
        "-v"|"--version")
            shift && enforce_value $@

            VERSION=${1} ;;

        *)
            report_error "Invalid parameter" ;;
    esac

    shift
done

# DEFAULT PARAMETERS
[[ -z ${DEFCONFIG} ]] && DEFCONFIG="flash_defconfig"
[[ -z ${DEVICE} ]] && DEVICE="taimen"
[[ -z ${MODE} ]] && MODE="personal"

# EASY TO USE VARIABLES FOR IF STATEMENTS
[[ ${MODE} != "stable" ]] && NOT_STABLE=true

# DEVICE "BOARD" FLAGS
case ${DEVICE} in
    "angler")
        # REQUIRED FLAGS
        AK_SFX=public-8.0.0

        COMPILER=gcc

        COMPRESSION=gz

        DEVICE_NAME_FILE=${DEVICE^}
        DEVICE_NAME_GITHUB=${DEVICE}
        DEVICE_NAME_WEB=${DEVICE}

        MATCH_FLAG="Flash*"

        PACKAGE_METHOD=zip

        [[ -z ${GCC_TOOLCHAIN_FOLDER} ]] && GCC_TOOLCHAIN_FOLDER="l-7.x-a57.a53" ;;

    "op5")
        # DEVICE SPECIFIC HANDLING
        [[ -z ${OS} ]] && report_error "OS must be specified for OnePlus 5!"
        OS_FOLDER=/${OS,,}

        # REQUIRED FLAGS
        [[ -z ${ANDROID_VERSION} ]] && ANDROID_VERSION=8.0.0
        AK_SFX=${ANDROID_VERSION}

        case ${VERSION} in
            1.*) COMPILER=gcc ;;
            2.*) COMPILER=clang ;;
        esac
        [[ -z ${CLANG_TOOLCHAIN_FOLDER} ]] && CLANG_TOOLCHAIN_FOLDER=clang-4053586

        COMPRESSION=gz

        DEVICE_NAME_FILE=${DEVICE^^}
        DEVICE_NAME_GITHUB=${DEVICE}
        DEVICE_NAME_WEB=${DEVICE}

        if [[ -z ${GCC_TOOLCHAIN_FOLDER} ]]; then
            case ${COMPILER} in
                "gcc") GCC_TOOLCHAIN_FOLDER="l-7.x-a73.a53" ;;
                "clang") GCC_TOOLCHAIN_FOLDER="aosp-gcc" ;;
            esac
        fi

        MATCH_FLAG="*${OS}-v${VERSION::1}*"

        PACKAGE_METHOD=zip ;;

    "taimen"|"walleye")
        # REQUIRED FLAGS
        [[ -z ${ANDROID_VERSION} ]] && ANDROID_VERSION=8.1.0
        AK_SFX=${ANDROID_VERSION}

        COMPILER=clang
        [[ -z ${CLANG_TOOLCHAIN_FOLDER} ]] && CLANG_TOOLCHAIN_FOLDER=clang-4053586

        COMPRESSION=lz4

        DEVICE_NAME_FILE=${DEVICE^}
        DEVICE_NAME_GITHUB=wahoo
        DEVICE_NAME_WEB=${DEVICE}

        [[ -z ${GCC_TOOLCHAIN_FOLDER} ]] && GCC_TOOLCHAIN_FOLDER="aosp-gcc"

        MATCH_FLAG="Flash*"

        PACKAGE_METHOD=image_zip ;;

    *)
        report_error "Invalid device!" ;;
esac


###############
#             #
#  VARIABLES  #
#             #
###############

# FOLDERS
SOURCE_FOLDER=${KERNEL_FOLDER}/flash/${DEVICE_NAME_GITHUB}
OUT_FOLDER=${SOURCE_FOLDER}/out
ANYKERNEL_FOLDER=${KERNEL_FOLDER}/flash/anykernel
ANYKERNEL_BRANCH=${DEVICE_NAME_GITHUB}-flash-${AK_SFX}
MODULES_FOLDER=${ANYKERNEL_FOLDER}/modules
FILE_MOVE_HEAD=${WEB_FOLDER}/downloads

case ${MODE} in
    "alpha"|"beta"|"rc"|"stable"|"tmp")
        FILE_MOVE=${FILE_MOVE_HEAD}/kernels/${DEVICE_NAME_WEB}/${ANDROID_VERSION}${OS_FOLDER}/${MODE}
        FILE_MOVE_OLD=$(readlink -f ${FILE_MOVE}/../archive) ;;
    "personal")
        FILE_MOVE=$(readlink -f ${FILE_MOVE_HEAD}/../me/fk) ;;
    *)
        report_error "Invalid mode specified!" ;;
esac

case ${GCC_TOOLCHAIN_FOLDER} in
    "aosp-gcc")
        GCC_TOOLCHAIN_PREFIX=aarch64-linux-android- ;;
    "l-7.x"|"l-7.x-a73.a53"|"l-7.x-a57.a53")
        GCC_TOOLCHAIN_PREFIX=aarch64-linaro-linux-android- ;;
    *)
        report_error "Invalid GCC toolchain specified!" ;;
esac

# COMPILATION VARIABLES
ARCHITECTURE=arm64
CCACHE=$(command -v ccache)
OUT_KERNEL_IMAGE=${OUT_FOLDER}/arch/${ARCHITECTURE}/boot/Image.${COMPRESSION}-dtb
OUT_DTBO_IMAGE=${OUT_FOLDER}/arch/${ARCHITECTURE}/boot/dtbo.img
GCC_TOOLCHAIN=/opt/${GCC_TOOLCHAIN_FOLDER}/bin/${GCC_TOOLCHAIN_PREFIX}
if [[ ${COMPILER} = "clang" ]]; then
    CLANG_TOOLCHAIN=/opt/aosp-clang/${CLANG_TOOLCHAIN_FOLDER}/bin/clang
    case ${CLANG_TOOLCHAIN_FOLDER} in
        "clang-3289846"|"clang-3859424"|"clang-4053586")
            CLANG_VERSION=$(${CLANG_TOOLCHAIN} --version | head -n 1) ;;
        "clang-4393122"|"clang-4479392")
            CLANG_VERSION=$(${CLANG_TOOLCHAIN} --version | head -n 1 | cut -d'(' -f1,4) ;;
        *)
            report_error "Invalid Clang version specified!" ;;
    esac
fi


###############
#             #
#  FUNCTIONS  #
#             #
###############

# CLEAN UP
function clean_up() {
    # CLEAN ANYKERNEL FOLDER
    cd ${ANYKERNEL_FOLDER}
    git checkout ${ANYKERNEL_BRANCH}
    git clean -fxd

    # ONLY CHECKOUT IF KERNEL_BRANCH EXISTS AND WE AREN'T BISECTING OR REBASING
    cd ${SOURCE_FOLDER}
    if [[ -n ${KERNEL_BRANCH} ]]; then
        [[ ! $(git status | ag "bisec|rebas") ]] && git checkout ${KERNEL_BRANCH}
    # OTHERWISE, NOTATE CURRENT BRANCH FOR CHANGELOG
    else
        export KERNEL_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    fi
    # CLEAN SOURCE FOLDER
    git clean -fxd
}


# MAKE WRAPPER FOR MAKE FUNCTION FOR GCC
function make_wrapper_gcc() {
    make ${JOBS_FLAG} \
         ARCH=${ARCHITECTURE} \
         CROSS_COMPILE="${CCACHE} ${GCC_TOOLCHAIN}" \
         O=${OUT_FOLDER} \
         $@
}


# MAKE WRAPPER FOR MAKE FUNCTION FOR GCC
function make_wrapper_clang() {
    PATH=${BIN_FOLDER}:${PATH} make ${JOBS_FLAG} \
                                    ARCH=${ARCHITECTURE} \
                                    CC="${CCACHE} ${CLANG_TOOLCHAIN}" \
                                    CLANG_TRIPLE=aarch64-linux-gnu- \
                                    CROSS_COMPILE=${GCC_TOOLCHAIN} \
                                    HOSTCC="${CCACHE} ${CLANG_TOOLCHAIN}" \
                                    O=${OUT_FOLDER} \
                                    $@
}


# SILENCE OUTPUT FUNCTION
function kmake() {
    # ONLY SHOW ERRORS AND WARNINGS WHEN COMPILING (UNLESS DEBUG)
    [[ ${DEBUG} ]] && make_wrapper_${COMPILER} $@ \
                   || make_wrapper_${COMPILER} $@ |& ag --no-color "error:|warning:" && echo
}


# SETUP COMPILATION
function generate_variables() {
    # GENERATE KERNEL VERSION
    KVER=$(make kernelversion)

    # FORM LOCAL VERSION BASELINE
    [[ -n ${OS} ]] && OS="-${OS}"
    LOCALVERSION_BASELINE="Flash-${DEVICE_NAME_FILE}${OS}"
    export LOCALVERSION="-${LOCALVERSION_BASELINE}"

    # ADD VERSION IF PRESENT
    if [[ -n ${VERSION} ]]; then
        VERSION_TEXT="-v${VERSION}"
        export LOCALVERSION="${LOCALVERSION}${VERSION_TEXT}"
    fi

    # IF THE MODE ISN'T STABLE, ADD SHA INFORMATION TO THE FILE FOR DEBUGGING
    if [[ ${NOT_STABLE} ]]; then
        SHA="-g$(git rev-parse --verify --short HEAD)"
        export LOCALVERSION="${LOCALVERSION}${SHA}"
    fi

    # IF THERE ARE UNCOMMITTED CHANGES, MARK AS DIRTY
    if [[ $( git diff-index --name-only HEAD ) ]]; then
        DIRTY="-dirty"
        export LOCALVERSION="${LOCALVERSION}${DIRTY}"
    fi

    # GENERATE FIRST LINE VARIABLE
    # CONFIG_LOCALVERSION + CONFIG_LOCALVERSION_AUTO ARE DISABLED
    FIRST_LINE="${KVER}${LOCALVERSION}"

    # IF REVISION EXISTS, USE IT FOR THE FILE
    [[ -n ${REVISION} ]] && REVISION_FOR_FILE=".${MODE::1}${REVISION}"

    # IF REVISION IS LESS THAN 1, UNSET IT SO BUILD DOESN'T ERROR
    [[ ${REVISION} -lt 1 ]] && unset REVISION

    # GENERATE SECOND LINE VARIABLE
    SECOND_LINE="$(whoami)@$(uname -n) #${REVISION:-1}"

    # GENERATE THIRD LINE VARIABLE
    THIRD_LINE="$(date)"

    # EXPORT KERNEL_NAME BASED ON THE ABOVE INFORMATION
    export KERNEL_NAME="${LOCALVERSION_BASELINE}${VERSION_TEXT}${REVISION_FOR_FILE}${SHA}"

    # SET FINAL NAMES
    if [[ ${PACKAGE_METHOD} =~ "image" ]]; then
        export BOOT_IMAGE=${KERNEL_NAME}-boot.img
        export DTBO_IMAGE=${KERNEL_NAME}-dtbo.img
    fi

    if [[ ${PACKAGE_METHOD} =~ "zip" ]]; then
        export UNSIGNED_ZIP=${KERNEL_NAME}-unsigned.zip
        export SIGNAPK_ZIP=${KERNEL_NAME}-signapk.zip
        export ADJUSTED_ZIP=${KERNEL_NAME}-adjusted.zip
        export SIGNED_ZIP=${KERNEL_NAME}.zip
    fi
}


# PRINT VARIABLES
function print_variables() {
    echo "${BOLD}Kernel version:${RST}    ${FIRST_LINE}"
    echo "                   ${SECOND_LINE}"
    echo "                   ${THIRD_LINE}\n"

    echo "${BOLD}Kernel branch:${RST}     ${KERNEL_BRANCH}\n"

    [[ ${COMPILER} = "clang" ]] && echo "${BOLD}Clang info:${RST}        ${CLANG_VERSION}"
    echo "                   ${CLANG_TOOLCHAIN}\n"

    echo "${BOLD}GCC info:${RST}          $(${GCC_TOOLCHAIN}gcc --version | head -1)"
    echo "                   ${GCC_TOOLCHAIN}gcc\n"
}


# MAKE KERNEL
function build_kernel() {
    # POINT TO PROPER DEFCONFIG AND GENERATE VERSION FILES
    kmake ${DEFCONFIG} prepare

    # INCREMENT DIRTY VERSION NUMBER IF PASSED ABOVE
    echo $((${REVISION:-1} - 1)) > ${OUT_FOLDER}/.version

    # MAKE THE KERNEL
    kmake ${EXTRA_MAKE_FLAGS}
}


# PACKAGE ZIP
function package_zip() {
    header "PACKAGING AND SIGNING ZIP"

    echo "${BOLD}Signed zip name:${RST}   ${SIGNED_ZIP}\n"

    # MOVE THE KERNEL IMAGE
    cp ${OUT_KERNEL_IMAGE} ${ANYKERNEL_FOLDER}
    [[ -f ${OUT_DTBO_IMAGE} ]] && cp ${OUT_DTBO_IMAGE} ${ANYKERNEL_FOLDER}/dtbo

    # GRAB MODULES TOO IF THEY ARE PRESENT
    mkdir -p ${MODULES_FOLDER}
    find ${OUT_FOLDER} -name "*.ko" -exec cp {} ${MODULES_FOLDER} \;
    # IF MODULES WERE FOUND, STRIP THEM; OTHERWISE, REMOVE THE FOLDER
    if [[ $(ls -A ${MODULES_FOLDER}) ]]; then
        echo "${BOLD}Kernel modules:${RST}    $(ls ${MODULES_FOLDER}/*.ko | wc -l)\n"
        ${GCC_TOOLCHAIN}strip --strip-unneeded ${MODULES_FOLDER}/*.ko
        for MOD in $(ls ${MODULES_FOLDER}/*.ko); do
            ${OUT_FOLDER}/scripts/sign-file sha512 \
                                            ${OUT_FOLDER}/certs/signing_key.pem \
                                            ${OUT_FOLDER}/certs/signing_key.x509 \
                                            ${MOD}
        done
    else
        rm -rf ${MODULES_FOLDER}
    fi

    cd ${ANYKERNEL_FOLDER}

    # PACKAGE THE ZIP WITHOUT THE README
    zip -q -r9 ${UNSIGNED_ZIP} * -x README.md ${UNSIGNED_ZIP}

    # SIGN ZIP
    java -jar ${BIN_FOLDER}/signapk.jar \
              ${BIN_FOLDER}/testkey.x509.pem \
              ${BIN_FOLDER}/testkey.pk8 \
              ${UNSIGNED_ZIP} \
              ${SIGNAPK_ZIP}

    ${BIN_FOLDER}/zipadjust ${SIGNAPK_ZIP} ${ADJUSTED_ZIP} &>/dev/null

    java -jar ${BIN_FOLDER}/minsignapk.jar \
              ${BIN_FOLDER}/testkey.x509.pem \
              ${BIN_FOLDER}/testkey.pk8 \
              ${ADJUSTED_ZIP} \
              ${SIGNED_ZIP}

    # IF PACKAGING FAILED, ERROR OUT
    [[ ! -f ${SIGNED_ZIP} ]] && echo "${RED}Kernel zip not found after signing!${RST}\n" && ending_info \
                             || echo "${GRN}Kernel zip successfully generated!${RST}\n"
}


# SILENCE OUTPUT FUNCTION FOR PACKAGE_IMAGE
function package_image() {
    AOSP_FOLDER=${KERNEL_FOLDER}/sources/aosp-pixel2 && cd ${AOSP_FOLDER}

    git -C device/google/wahoo-kernel reset --hard --quiet

    cp ${OUT_KERNEL_IMAGE} ${AOSP_FOLDER}/device/google/wahoo-kernel
    cp ${OUT_DTBO_IMAGE} ${AOSP_FOLDER}/device/google/wahoo-kernel

    header "COMPILING BOOT IMAGE"

    echo "${BOLD}Image name:${RST}        ${BOOT_IMAGE}\n"

    echo "${BOLD}Current tag:${RST}       $(git -C device/google/wahoo describe --tags HEAD)\n"

    package_image_wrapper

    COMPILED_BOOT_IMAGE=${AOSP_FOLDER}/out/target/product/${DEVICE_NAME_WEB}/boot.img

    [[ ! -f ${COMPILED_BOOT_IMAGE} ]] && echo "${RED}Boot image not found!${RST}\n" && ending_info \
                                      || echo "${GRN}Boot image compiled successfully!${RST}\n"
}


# PACKAGE IMAGE WRAPPER
function package_image_wrapper() {
    # ONLY SHOW ERRORS WHEN COMPILING (UNLESS DEBUG)
    [[ ${DEBUG} ]] && package_image_commands \
                   || package_image_commands |& ag --no-color "error:" && echo
}


# PACKAGE IMAGE COMMANDS
function package_image_commands() {
    mkavenv
    . build/envsetup.sh
    lunch aosp_${DEVICE_NAME_WEB}-user
    make ${JOBS_FLAG} clean
    make ${JOBS_FLAG} bootimage
    rmvenv
}


# PACKAGE BOTH AN IMAGE AND ZIP
function package_image_zip() {
    package_zip
    package_image
}


# SETUP FOLDERS
function setup_folders() {
    echo "  - Setting up final folders"

    # IF ZIPMOVE DOESN'T EXIST, MAKE IT
    [[ ! -d ${FILE_MOVE} ]] && mkdir -p ${FILE_MOVE}

    # IF IT ISN'T A STABLE BUILD, CLEAN THE FOLDER
    if [[ ${NOT_STABLE} ]]; then
        [[ ! ${NOCLEAN} ]] && rm -rf ${FILE_MOVE}/*${DEVICE_NAME_FILE}*
    else
        # OTHERWISE, MOVE THE OLD FILES TO AN "OLD" FOLDER
        [[ ! -d ${FILE_MOVE_OLD} ]] && mkdir -p ${FILE_MOVE_OLD}
        mv $(find ${FILE_MOVE}/* -maxdepth 0 -type f) \
           ${FILE_MOVE_OLD} &>/dev/null
    fi
}


# MOVE FILES AND GENERATE MD5SUM
function move_flashable_files() {
    echo "  - Moving files"

    if [[ ${PACKAGE_METHOD} =~ "image" ]]; then
        mv ${COMPILED_BOOT_IMAGE} ${FILE_MOVE}/${BOOT_IMAGE}
        md5sum ${FILE_MOVE}/${BOOT_IMAGE} > ${FILE_MOVE}/${BOOT_IMAGE}.md5

        mv $(dirname ${OUT_KERNEL_IMAGE})/dtbo.img ${FILE_MOVE}/${DTBO_IMAGE}
        md5sum ${FILE_MOVE}/${DTBO_IMAGE} > ${FILE_MOVE}/${DTBO_IMAGE}.md5
    fi

    if [[ ${PACKAGE_METHOD} =~ "zip" ]]; then
        mv ${ANYKERNEL_FOLDER}/${SIGNED_ZIP} ${FILE_MOVE}
        md5sum ${FILE_MOVE}/${SIGNED_ZIP} > ${FILE_MOVE}/${SIGNED_ZIP}.md5
    fi
}


# GENERATE CHANGELOG
function generate_changelog() {
    echo "  - Generating changelog"

    GITHUB="http://github.com/nathanchance"
    CHANGELOG=${FILE_MOVE}/${KERNEL_NAME}-changelog.txt

    # KERNEL SOURCE FIRST
    cd ${SOURCE_FOLDER}

    # WE NEED TO MARK THE PREVIOUS TAG FOR CHANGELOG
    PREV_TAG_NAME=$(git tag --sort=-taggerdate -l ${MATCH_FLAG} | head -n 1)
    [[ -z ${PREV_TAG_NAME} ]] && return
    RANGE=${PREV_TAG_NAME}..HEAD

    # SHOW WHERE COMMITS ARE LOCATED
    echo "${GITHUB}/${DEVICE_NAME_GITHUB}/commits/${KERNEL_BRANCH}\n" > ${CHANGELOG}

    # USE SHORTLOG FOR PRETTY OUTPUT
    git log ${RANGE} | git shortlog >> ${CHANGELOG}

    # GENERATE A DIFF AS WELL
    git diff --find-renames --stat --summary ${RANGE} >> ${CHANGELOG}

    if [[ ${PACKAGE_METHOD} =~ "zip" ]]; then
        # ANYKERNEL NEXT
        cd ${ANYKERNEL_FOLDER}

        # WE ONLY WANT TO SHOW ANYKERNEL CHANGES IF THERE HAVE BEEN SOME
        NUM_COMMITS=$(git log ${RANGE} --pretty=oneline | wc -l)

        if [[ ${NUM_COMMITS} -gt 0 ]]; then
            echo "\n\n${GITHUB}/AnyKernel2/commits/${ANYKERNEL_BRANCH}\n" >> ${CHANGELOG}

            git log ${RANGE} | git shortlog >> ${CHANGELOG}

            git diff --find-renames --stat --summary ${RANGE} >> ${CHANGELOG}
        fi
    fi
}


# PUSH KERNEL FILES (ZIPS/IMAGES) TO GITHUB
function push_flashable_files() {
    echo "  - Pushing files to GitHub"

    cd ${FILE_MOVE}

    git add ..

    git commit --gpg-sign --quiet --signoff --message "$(date +%Y%m%d): ${KERNEL_NAME}"

    git push --quiet
}


# TAG FOR STABLE RELEASES
function tag_stable() {
    echo "  - Tagging ${KERNEL_NAME} as stable"

    cd ${SOURCE_FOLDER}

    git tag --sign --annotate ${KERNEL_NAME} --message ${KERNEL_NAME}
    git push --quiet origin ${KERNEL_NAME}

    if [[ ${PACKAGE_METHOD} =~ "zip" ]]; then
        cd ${ANYKERNEL_FOLDER}

        git tag --sign -annotate ${KERNEL_NAME} --message ${KERNEL_NAME}
        git push --quiet origin ${KERNEL_NAME}
    fi
}


# PRINT FILE INFO
function ending_info() {
    header "SCRIPT FINISHED!"

    END=$(date +"%s")

    echo "\n$(date +"%m/%d/%Y %H:%M:%S"): ${BASH_SOURCE} ${PARAMS}" >> ${LOG}

    if [[ "$@" =~ "-s" ]]; then
        echo "BUILD SUCCESSFUL IN $(format_time ${END} ${START})" >> ${LOG}
        if [[ ! ${IMAGE_ONLY} ]]; then
            FILE_LOCATION=$(web_link ${FILE_MOVE})
            echo "FILE LINK: ${FILE_LOCATION}" >> ${LOG}

            echo ${RED}"FILE LOCATION: ${FILE_LOCATION}"
            case ${PACKAGE_METHOD} in
                "image")
                    echo "SIZE: $(du -h ${FILE_MOVE}/${BOOT_IMAGE} |
                                      awk '{print $1}')"${RST} ;;
                "zip")
                    echo "SIZE: $(du -h ${FILE_MOVE}/${SIGNED_ZIP} |
                                      awk '{print $1}')"${RST} ;;
            esac
        fi
    else
        echo "BUILD FAILED IN $(format_time ${END} ${START})" >> ${LOG}
    fi

    echo "${RED}DURATION: $(format_time ${END} ${START})${RST}"; echo; echo "\a"
    exit
}



################
#              #
# SCRIPT START #
#              #
################

START=$(date +"%s")

clear
echo ${RED}
echo
echo "================================================================================================"
echo
echo
echo "  ___________________________________  __   ______ _______________________   ________________   "
echo "  ___  ____/__  /___    |_  ___/__  / / /   ___  //_/__  ____/__  __ \__  | / /__  ____/__  /   "
echo "  __  /_   __  / __  /| |____ \__  /_/ /    __  ,<  __  __/  __  /_/ /_   |/ /__  __/  __  /    "
echo "  _  __/   _  /___  ___ |___/ /_  __  /     _  /| | _  /___  _  _, _/_  /|  / _  /___  _  /___  "
echo "  /_/      /_____/_/  |_/____/ /_/ /_/      /_/ |_| /_____/  /_/ |_| /_/ |_/  /_____/  /_____/  "
echo
echo
echo
echo "================================================================================================"
echo


#################
# MAKING KERNEL #
#################

header "COMPILING KERNEL"

# DON'T SHOW CLEAN UP OUTPUT
clean_up &>/dev/null

# GENERATE VARIABLES SUCH AS VERSIONS
generate_variables

# PRINT RELEVANT VARIABLES
print_variables

# BUILD KERNEL
build_kernel


######################
# IF KERNEL COMPILED #
######################

if [[ -f ${OUT_KERNEL_IMAGE} ]]; then
    echo "${GRN}$(basename ${OUT_KERNEL_IMAGE}) compiled successfully!${RST}\n"
    if [[ ! ${IMAGE_ONLY} ]]; then
        package_${PACKAGE_METHOD}

        header "SHUFFLING FILES"

        setup_folders
        move_flashable_files
        generate_changelog

        [[ ${MODE} != "personal" ]] && push_flashable_files

        [[ ! ${NOT_STABLE} ]] && tag_stable

        echo
    fi

    ending_info -s

###################
# IF BUILD FAILED #
###################

else
    echo "${RED}$(basename ${OUT_KERNEL_IMAGE}) not found!${RST}\n"
    ending_info
fi
