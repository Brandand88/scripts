#!/usr/bin/env bash
#
# Flash Kernel compilation script
#
# Copyright (C) 2016-2017 Nathan Chancellor
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>



###########
#         #
#  USAGE  #
#         #
###########

# PURPOSE: Build Flash Kernel and package it into a flashable zip
# USAGE: $ bash flash -h



###################
#                 #
#  INITIAL SETUP  #
#                 #
###################

# SOURCE OUR UNIVERSAL FUNCTIONS SCRIPT AND MAC CHECK
SCRIPT_DIR=$( cd $( dirname $( readlink -f "${BASH_SOURCE[0]}" ) ) && pwd )
BIN_DIR=${SCRIPT_DIR}/bin
source ${SCRIPT_DIR}/funcs && macCheck

# PRINT A HELP MENU IF REQUESTED
function help_menu() {
    SCRIPT_NAME=$( basename ${0} )
    echo -e ""
    echo -e "${BOLD}OVERVIEW:${RST} Builds and packages Flash Kernel\n"
    echo -e "${BOLD}USAGE:${RST} bash ${SCRIPT_NAME} <options>\n"
    echo -e "${BOLD}EXAMPLE:${RST} bash ${SCRIPT_NAME} -m public -t 4.9 -c angler_defconfig\n"
    echo -e "${BOLD}OPTIONAL PARAMETERS:${RST}"
    echo -e "  -b  | --branch:
            The branch to compile\n"
    echo -e "  -bv | --beta-version:
            Add an additional versioning to zip\n"
    echo -e "  -c  | --config:
            The defconfig to use while compiling\n"
    echo -e "  -d  | --device:
            The device to compile\n"
    echo -e "  -db | --debug:
            Compile verbosely (show full errors/warnings)\n"
    echo -e "  -f  | --flags:
            Add extra CONFIG or CFLAGS for compilation\n"
    echo -e "  -m  | --mode:
            A public, private, or test kernel\n"
    echo -e "  -n  | --no-clean:
            Don't clean the zip clean folder\n"
    echo -e "  -os | --operating-system:
            (OnePlus 5 only) OxygenOS or custom ROMs\n"
    echo -e "  -t  | --toolchain:
            Compile with 4.9, 5.x, 6.x, 7.x, or 8.x\n"
    echo -e "  -v  | --version:
            Set LOCALVERSION externally from defconfig\n"
    exit
}



################
#              #
#  PARAMETERS  #
#              #
################

# GATHER PARAMETERS
while [[ $# -ge 1 ]]; do
    case "${1}" in
        "-b"|"--branch")
            shift && enforceValue $@

            KERNEL_BRANCH=${1} ;;

        "-bv"|"--beta-version")
            shift && enforceValue $@

            BETA_VERSION=${1} ;;

        "-c"|"--config")
            shift && enforceValue $@

            DEFCONFIG=${1} ;;

        "-d"|"--device")
            shift && enforceValue $@

            DEVICE=${1} ;;

        "-db"|"--debug")
            DEBUG=true ;;

        "-f"|"--flags")
            shift && enforceValue $@

            EXTRA_MAKE_FLAGS=${1} ;;

        "-h"|"--help")
            help_menu ;;

        "-m"|"--mode")
            shift && enforceValue $@

            MODE=${1} ;;

        "-n"|"--no-clean")
            NOCLEAN=true ;;

        "-os"|"--operating-system")
            shift && enforceValue $@

            OS=${1} ;;

        "-t"|"--toolchain")
            shift && enforceValue $@

            TOOLCHAIN_NAME=${1} ;;

        "-v"|"--version")
            shift && enforceValue $@

            VERSION=${1} ;;

        *)
            reportError "Invalid parameter" ;;
    esac

    shift
done

# DEFAULT PARAMETERS
[[ -z ${DEFCONFIG} ]] && DEFCONFIG="flash_defconfig"
[[ -z ${DEVICE} ]] && DEVICE="oneplus5"
[[ -z ${MODE} ]] && MODE="private"
[[ -z ${TOOLCHAIN_NAME} ]] && TOOLCHAIN_NAME="7.x"


###############
#             #
#  VARIABLES  #
#             #
###############

# FOLDERS
KERNEL_HEAD=${HOME}/Kernels
SOURCE_FOLDER=${KERNEL_HEAD}/${DEVICE}
OUT_FOLDER=${SOURCE_FOLDER}/out
ANYKERNEL_FOLDER=${KERNEL_HEAD}/anykernel
MODULES_FOLDER=${ANYKERNEL_FOLDER}/modules
ZIP_MOVE_HEAD=${HOME}/Web/Downloads

# DEVICE HANDLING
case ${DEVICE} in
    "angler")
        ANDROID_VERSION=8.0.0
        TC_TARGET=-a57.a53 ;;
    "oneplus5")
        ANDROID_VERSION=7.1.x
        TC_TARGET=-a73

        [[ -z ${OS} ]] && OS=OOS

        [[ -n ${VERSION} ]] && VERSION="-v${VERSION}"

        export LOCALVERSION="-${OS}${VERSION}"

        case "${OS}" in
            *custom*|*Custom*)
                ZIP_MOVE_ADD=/Custom
                MATCH_FLAG="--match=*Custom*" ;;
            *oos*|*OOS*)
                ZIP_MOVE_ADD=/OOS
                MATCH_FLAG="--match=*OOS*" ;;
        esac ;;

    *)
        reportError "Invalid device!" ;;
esac

case ${TOOLCHAIN_NAME} in
    "4.9")
        TOOLCHAIN_FOLDER=aosp-4.9
        TOOLCHAIN_PREFIX=aarch64-linux-android- ;;
    "5.x")
        TOOLCHAIN_FOLDER=aarch64-linaro-linux-gnu-5.x
        TOOLCHAIN_PREFIX=aarch64-linaro-linux-gnu- ;;
    "7.x")
        TOOLCHAIN_FOLDER=aarch64-linaro-linux-android-7.x${TC_TARGET}
        TOOLCHAIN_PREFIX=aarch64-linaro-linux-android- ;;
    "8.x")
        TOOLCHAIN_FOLDER=gcc-8.x
        TOOLCHAIN_PREFIX=aarch64-gnu-linux-gnu- ;;
    *)
        reportError "Invalid toolchain specified!" ;;
esac

TOOLCHAIN_FOLDER=${HOME}/Toolchains/${TOOLCHAIN_FOLDER}

case ${MODE} in
    "private")
        ZIP_MOVE=${ZIP_MOVE_HEAD}/../me/Flash-Kernel/${DEVICE}${ZIP_MOVE_ADD}
        ANYKERNEL_BRANCH=${DEVICE}-flash-personal-${ANDROID_VERSION}
        KEYS=testkey ;;
    "public")
        ZIP_MOVE=${ZIP_MOVE_HEAD}/Kernels/${DEVICE}${ZIP_MOVE_ADD}
        ANYKERNEL_BRANCH=${DEVICE}-flash-public-${ANDROID_VERSION}
        KEYS=testkey ;;
    "test")
        ZIP_MOVE=${ZIP_MOVE_HEAD}/Kernels/${DEVICE}/Tests${ZIP_MOVE_ADD}
        ANYKERNEL_BRANCH=${DEVICE}-flash-public-${ANDROID_VERSION}
        KEYS=testkey ;;
    *)
        reportError "Invalid mode specified!" ;;
esac

# KERNEL INFO
ARCHITECTURE=arm64
KERNEL_IMAGE=Image.gz-dtb
THREADS=-j$( nproc --all )
KERNEL=${OUT_FOLDER}/arch/${ARCHITECTURE}/boot/${KERNEL_IMAGE}


###############
#             #
#  FUNCTIONS  #
#             #
###############


# CLEAN UP
function cleanUp() {
    # CLEAN ANYKERNEL FOLDER
    cd "${ANYKERNEL_FOLDER}"
    git checkout ${ANYKERNEL_BRANCH}
    git clean -fxd

    # ONLY CHECKOUT IF KERNEL_BRANCH EXISTS AND WE AREN'T BISECTING OR REBASING
    cd "${SOURCE_FOLDER}"
    if [[ -n ${KERNEL_BRANCH} ]]; then
        [[ ! $( git status | ag "bisec|rebas" ) ]] && git checkout ${KERNEL_BRANCH}
    # OTHERWISE, NOTATE CURRENT BRANCH FOR CHANGELOG
    else
        export KERNEL_BRANCH=$( git rev-parse --abbrev-ref HEAD )
    fi
    # CLEAN SOURCE FOLDER:
    git clean -fxd
}


# SETUP COMPILATION
function setupCompilation() {
    # MAKE OUT FOLDER (IT GETS REMOVED PER CLEAN UP FUNCTION)
    mkdir -p ${OUT_FOLDER}

    # SHOW TOOLCHAIN LOCATION
    TOOLCHAIN="${TOOLCHAIN_FOLDER}/bin/${TOOLCHAIN_PREFIX}"
    echo -e "${BOLD}Toolchain location:${RST} ${TOOLCHAIN}"

    # GET PRECISE LOCATION OF CCACHE
    CCACHE=$( command -v ccache )
    echo -e "${BOLD}ccache location:${RST} ${CCACHE}"

    # SHOW TARGET ARCHITECTURE
    echo -e "${BOLD}Target architecture:${RST} ${ARCHITECTURE}\n"
}


# MAKE KERNEL
function makeKernel() {
    # SET MAKE VARIABLE FOR CONVENIENCE
    # AS I FOOLISHLY LEARNED, ALL CAF CODE REQUIRES AN OUTPUT DIRECTORY
    # TO WORK PROPERLY SO WHILE MY NEXUS DOESN'T CURRENTLY REQUIRE IT,
    # IT'S GOOD TO BE AHEAD OF THE CURVE IF IT WORKS.
    MAKE="make -j$( nproc --all ) O=${OUT_FOLDER} ARCH=${ARCHITECTURE}"

    # INCREMENT DIRTY VERSION NUMBER IF PASSED ABOVE
    [[ -n ${BETA_VERSION} ]] && echo $(( ${BETA_VERSION} - 1 )) \
                                 > ${OUT_FOLDER}/.version

    # POINT TO PROPER DEFCONFIG
    ${MAKE} ${DEFCONFIG}

    # MAKE THE KERNEL
    ${MAKE} CROSS_COMPILE="${CCACHE} ${TOOLCHAIN}" ${EXTRA_MAKE_FLAGS}
}


# PRINT ZIP INFO
function printKernelInfo() {
    # KERNEL VERSION IS AUTOMATICALLY GENERATED AT BUILD TIME
    export KERNEL_VERSION=$( cat ${OUT_FOLDER}/include/config/kernel.release )
    echo -e "${BOLD}Kernel version:${RST} ${KERNEL_VERSION}"

    # REMOVE EVERYTHING BEFORE FLASH IN THE KERNEL_VERSION
    KERNEL_VERSION=$( echo ${KERNEL_VERSION} | sed "s/^.*F/F/g" )

    # DIRTY VERSION IS PASSED AS A PARAMETER FOR BETA VERSIONS
    [[ -n ${BETA_VERSION} ]] && BETA_VERSION=".r${BETA_VERSION}"

    # IF THE MODE ISN'T PUBLIC, ADD SHA INFORMATION TO THE ZIP
    [[ "${MODE}" != "public" ]] && SHA="-g$( git rev-parse --verify --short HEAD )"

    # EXPORT KERNEL_NAME BASED ON THE ABOVE INFORMATION
    export KERNEL_NAME=${KERNEL_VERSION}${BETA_VERSION}${SHA}

    # SET ZIP NAMES
    export UNSIGNED_ZIP=${KERNEL_NAME}-unsigned.zip
    export SIGNAPK_ZIP=${KERNEL_NAME}-signapk.zip
    export ADJUSTED_ZIP=${KERNEL_NAME}-adjusted.zip
    export SIGNED_ZIP=${KERNEL_NAME}.zip
    echo -e "${BOLD}Kernel zip:${RST} ${SIGNED_ZIP}"; newLine
}


# SETUP FOLDERS
function setupFolders() {
    # IF ZIPMOVE DOESN'T EXIST, MAKE IT
    [[ ! -d "${ZIP_MOVE}" ]] && mkdir -p "${ZIP_MOVE}"

    # IF IT ISN'T A PUBLIC BUILD, CLEAN THE FOLDER
    if [[ ${MODE} != "public" ]]; then
        [[ -z ${NOCLEAN} ]] && rm -rf "${ZIP_MOVE}"/*
    else
        # OTHERWISE, MOVE THE OLD FILES TO AN "OLD" FOLDER
        [[ ! -d "${ZIP_MOVE}"/Old ]] && mkdir -p "${ZIP_MOVE}"/Old
        mv $( find "${ZIP_MOVE}"/* -maxdepth 0 -type f ) \
           "${ZIP_MOVE}"/Old &>/dev/null
    fi
}


# PACKAGE ZIP
function packageZip() {
    cd "${ANYKERNEL_FOLDER}"

    # MOVE THE KERNEL IMAGE
    cp "${KERNEL}" "${ANYKERNEL_FOLDER}"

    # GRAB MODULES TOO IF THEY ARE PRESENT
    mkdir -p ${MODULES_FOLDER}
    find ${OUT_FOLDER} -name "*.ko" -exec cp {} ${MODULES_FOLDER} \;
    [[ ! $( ls -A ${MODULES_FOLDER} ) ]] && rm -rf ${MODULES_FOLDER}

    # PACKAGE THE ZIP WITHOUT THE README
    zip -q -r9 ${UNSIGNED_ZIP} * -x README.md ${UNSIGNED_ZIP}

    # SIGN ZIP
    java -jar ${BIN_DIR}/signapk.jar \
              ${BIN_DIR}/${KEYS}.x509.pem \
              ${BIN_DIR}/${KEYS}.pk8 \
              ${UNSIGNED_ZIP} \
              ${SIGNAPK_ZIP}

    ${BIN_DIR}/zipadjust ${SIGNAPK_ZIP} ${ADJUSTED_ZIP} &>/dev/null

    java -jar ${BIN_DIR}/minsignapk.jar \
              ${BIN_DIR}/${KEYS}.x509.pem \
              ${BIN_DIR}/${KEYS}.pk8 \
              ${ADJUSTED_ZIP} \
              ${SIGNED_ZIP}
}

# MOVE FILES
function moveFiles() {
    # IF PACKAGING FAILED, ERROR OUT
    [[ ! -f ${SIGNED_ZIP} ]] && reportError "Kernel zip not found after signing!"

    # MOVE THE KERNEL ZIP TO WHERE IT NEEDS TO GO
    mv ${SIGNED_ZIP} "${ZIP_MOVE}"

    # GENERATE MD5SUM
    md5sum "${ZIP_MOVE}"/${SIGNED_ZIP} > "${ZIP_MOVE}"/${SIGNED_ZIP}.md5
}


# GENERATE CHANGELOG
function generateChangelog() {
    GITHUB="http://github.com/nathanchance"
    CHANGELOG="${ZIP_MOVE}"/${KERNEL_NAME}-changelog.txt

    # KERNEL SOURCE FIRST
    cd "${SOURCE_FOLDER}"

    # WE NEED TO MARK THE PREVIOUS TAG FOR CHANGELOG
    PREV_TAG_NAME=$( git describe --abbrev=0 --tags ${MATCH_FLAG} )
    RANGE=${PREV_TAG_NAME}..HEAD

    # SHOW WHERE COMMITS ARE LOCATED
    echo -e "${GITHUB}/${DEVICE}/commits/${KERNEL_BRANCH}\n" > ${CHANGELOG}

    # USE SHORTLOG FOR PRETTY OUTPUT
    git log ${RANGE} | git shortlog >> ${CHANGELOG}

    # GENERATE A DIFF AS WELL
    git diff -M --stat --summary ${RANGE} >> ${CHANGELOG}

    # ANYKERNEL NEXT
    cd "${ANYKERNEL_FOLDER}"

    # WE ONLY WANT TO SHOW ANYKERNEL CHANGES IF THERE HAVE BEEN SOME
    NUM_COMMITS=$( git log ${RANGE} --pretty=oneline | wc -l )

    if [[ ${NUM_COMMITS} -gt 0 ]]; then
        echo -e "\n\n${GITHUB}/AnyKernel2/commits/${ANYKERNEL_BRANCH}\n" >> ${CHANGELOG}

        git log ${RANGE} | git shortlog >> ${CHANGELOG}

        git diff -M --stat --summary ${RANGE} >> ${CHANGELOG}
    fi
}


# PUSH KERNEL ZIPS TO GITHUB
function pushRelease() {
    cd "${ZIP_MOVE}"

    git add .

    git commit --signoff -m "$(date +%Y%m%d): ${KERNEL_NAME}"

    git push -q

    newLine
}


# TAG FOR RELEASES
function tagRelease() {
    cd "${SOURCE_FOLDER}"

    git tag -a "${KERNEL_NAME}" -m "${KERNEL_NAME}"
    git push origin "${KERNEL_NAME}"

    cd "${ANYKERNEL_FOLDER}"

    git tag -a "${KERNEL_NAME}" -m "${KERNEL_NAME}"
    git push origin "${KERNEL_NAME}"
}


# PRINT FILE INFO
function endingInfo() {
    # ONLY PRINT FILE INFO IF IT EXISTS
    if [[ ${SUCCESS} = true ]]; then
        echo -e ${RED}"FILE LOCATION: ${ZIP_MOVE}/${SIGNED_ZIP}"
        echo -e "SIZE: $( du -h ${ZIP_MOVE}/${SIGNED_ZIP} |
                          awk '{print $1}' )"${RST}
    fi

    # PRINT TIME INFO REGARDLESS OF SUCCESS
    echo -e ${RED}"TIME: $( date +%D\ %r | awk '{print toupper($0)}' )"
    echo -e "DURATION: $( format_time ${END} ${START} )"${RST}; newLine
}


# LOG GENERATION
function generateLog() {
    # DATE: BASH_SOURCE (PARAMETERS)
    # BUILD <SUCCESSFUL|FAILED> IN # MINUTES AND # SECONDS
    echo -e "\n$( date +"%m/%d/%Y %H:%M:%S" ): ${BASH_SOURCE} ${1}" >> ${LOG}
    echo -e "${BUILD_RESULT} IN $( format_time ${END} ${START} )" >> ${LOG}

    # ONLY ADD A LINE ABOUT FILE LOCATION IF SCRIPT COMPLETED SUCCESSFULLY
    if [[ ${SUCCESS} = true ]]; then
        # FILE LOCATION: PATH
        echo -e "FILE LOCATION: ${ZIP_MOVE}/${SIGNED_ZIP}" >> ${LOG}
    fi
}



################
#              #
# SCRIPT START #
#              #
################

# SET THE START OF THE SCRIPT AND CLEAR TERMINAL
START=$( date +"%s" ) && clear


###################
# SHOW ASCII TEXT #
###################

echo -e ${RED}; newLine
echo -e "================================================================================================"; newLine; newLine
echo -e "  ___________________________________  __   ______ _______________________   ________________   "
echo -e "  ___  ____/__  /___    |_  ___/__  / / /   ___  //_/__  ____/__  __ \__  | / /__  ____/__  /   "
echo -e "  __  /_   __  / __  /| |____ \__  /_/ /    __  ,<  __  __/  __  /_/ /_   |/ /__  __/  __  /    "
echo -e "  _  __/   _  /___  ___ |___/ /_  __  /     _  /| | _  /___  _  _, _/_  /|  / _  /___  _  /___  "
echo -e "  /_/      /_____/_/  |_/____/ /_/ /_/      /_/ |_| /_____/  /_/ |_| /_/ |_/  /_____/  /_____/  "; newLine; newLine; newLine
echo -e "================================================================================================"; newLine


#################
# MAKING KERNEL #
#################

echoText "CLEANING UP AND MAKING KERNEL"

# DON'T SHOW CLEAN UP OUTPUT
cleanUp &>/dev/null

# SETUP COMPILATION
setupCompilation

# ONLY SHOW ERRORS, WARNINGS, AND THE IMAGE LINE WHEN COMPILING (UNLESS DEBUG)
[[ ${DEBUG} = true ]] && makeKernel \
                      || makeKernel |& ag --no-color "error:|warning:" && echo


######################
# IF KERNEL COMPILED #
######################

if [[ -f ${KERNEL} ]]; then
    # SET BUILD SUCCESS STRING AND SUCCESS VARIABLE
    BUILD_RESULT="BUILD SUCCESSFUL" && SUCCESS=true

    echoText "MAKING FLASHABLE ZIP"

    # PRINT KERNEL AND ZIP INFO
    printKernelInfo

    # SETUP ENVIRONMENT AND MAKE/MOVE ZIP
    setupFolders
    packageZip
    moveFiles
    generateChangelog

    # ONLY PUSH RELEASE FOR PUBLIC OR TEST BUILDS
    [[ ${MODE} != "private" ]] && echoText "PUSHING RELEASE" && pushRelease

    # TAG THE HEAD COMMIT FOR PUBLIC BUILD (SILENTLY)
    [[ ${MODE} = "public" ]] && tagRelease &>/dev/null

###################
# IF BUILD FAILED #
###################

else
    BUILD_RESULT="BUILD FAILED"
    SUCCESS=false
fi


######################
# ENDING INFORMATION #
######################

END=$( date +"%s" )

echoText "${BUILD_RESULT}!"

endingInfo

generateLog

echo -e "\a"
