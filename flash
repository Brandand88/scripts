#!/usr/bin/env bash
#
# Flash Kernel compilation script
#
# Copyright (C) 2016-2017 Nathan Chancellor
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>



###################
#                 #
#  INITIAL SETUP  #
#                 #
###################

# SOURCE OUR UNIVERSAL FUNCTIONS SCRIPT AND MAC CHECK
SCRIPT_DIR=$( cd $( dirname $( readlink -f "${BASH_SOURCE[0]}" ) ) && pwd )
BIN_DIR=${SCRIPT_DIR}/bin
source ${SCRIPT_DIR}/funcs && mac_check


################
#              #
#  PARAMETERS  #
#              #
################

# GATHER PARAMETERS
PARAMS="$@"
while [[ $# -ge 1 ]]; do
    case "${1}" in
        # BRANCH TO COMPILE; IF ABSENT, USE CURRENT BRANCH
        "-b"|"--branch")
            shift && enforce_value $@

            KERNEL_BRANCH=${1} ;;

        # DEFCONFIG TO USE WHILE COMPILING; IF ABSENT, USE FLASH_DEFCONFIG
        "-c"|"--config")
            shift && enforce_value $@

            DEFCONFIG=${1} ;;

        # DEVICE TO COMPILE FOR; IF ABSENT, USE ONEPLUS5
        "-d"|"--device")
            shift && enforce_value $@

            DEVICE=${1} ;;

        # SHOW FULL COMPILATION, NOT JUST WARNINGS AND ERRORS
        "-D"|"--debug")
            DEBUG=true ;;

        # EXTRA MAKE FLAGS IF NECESSARY (LIKE MISMATCH CONFIG)
        "-f"|"--flags")
            shift && enforce_value $@

            EXTRA_MAKE_FLAGS=${1} ;;

        # WHERE TO MOVE ZIP AFTER COMPILATION (PRIVATE, TEST, OR PUBLIC)
        "-m"|"--mode")
            shift && enforce_value $@

            MODE=${1} ;;

        # DON'T MOVE/DELETE ZIPS IN ZIP_MOVE FOLDER
        "-n"|"--no-clean")
            NOCLEAN=true ;;

        # (ONEPLUS 5 ONLY) CUSTOM ROMS OR OXYGENOS BUILD
        "-os"|"--operating-system")
            shift && enforce_value $@

            OS=${1} ;;

        # BETA VERSIONING (# IN KERNEL VERSION)
        "-r"|"--revision")
            shift && enforce_value $@

            REVISION=${1} ;;

        # TOOLCHAIN TO USE WHILE COMPILING
        "-t"|"--toolchain")
            shift && enforce_value $@

            TOOLCHAIN_NAME=${1} ;;

        # (ONEPLUS 5 ONLY) VERSION CODE
        "-v"|"--version")
            shift && enforce_value $@

            VERSION=${1} ;;

        *)
            report_error "Invalid parameter" ;;
    esac

    shift
done

# DEFAULT PARAMETERS
[[ -z ${DEFCONFIG} ]] && DEFCONFIG="flash_defconfig"
[[ -z ${DEVICE} ]] && DEVICE="oneplus5"
[[ -z ${MODE} ]] && MODE="private"
[[ -z ${TOOLCHAIN_NAME} ]] && TOOLCHAIN_NAME="l-7.x"


###############
#             #
#  VARIABLES  #
#             #
###############

# FOLDERS
KERNEL_HEAD=${HOME}/Kernels
SOURCE_FOLDER=${KERNEL_HEAD}/${DEVICE}
OUT_FOLDER=${SOURCE_FOLDER}/out
ANYKERNEL_FOLDER=${KERNEL_HEAD}/anykernel
MODULES_FOLDER=${ANYKERNEL_FOLDER}/modules
ZIP_MOVE_HEAD=${HOME}/Web/Downloads

# DEVICE HANDLING
case ${DEVICE} in
    "angler")
        ANDROID_VERSION=8.0.0
        TC_TARGET=-a57.a53 ;;
    "oneplus5")
        ANDROID_VERSION=7.1.x
        TC_TARGET=-a73

        [[ -z ${OS} ]] && OS=OOS

        [[ -n ${VERSION} ]] && VERSION="-v${VERSION}"

        export LOCALVERSION="-${OS}${VERSION}"

        case "${OS}" in
            *custom*|*Custom*)
                ZIP_MOVE_ADD=/Custom
                MATCH_FLAG="--match=*Custom*" ;;
            *oos*|*OOS*)
                ZIP_MOVE_ADD=/OOS
                MATCH_FLAG="--match=*OOS*" ;;
        esac ;;

    *)
        report_error "Invalid device!" ;;
esac

case ${TOOLCHAIN_NAME} in
    "a-4.9")
        unset TC_TARGET
        TOOLCHAIN_PREFIX=aarch64-linux-android- ;;
    "l-7.x")
        TOOLCHAIN_PREFIX=aarch64-linaro-linux-android- ;;
    "g-8.x")
        TOOLCHAIN_PREFIX=aarch64-gnu-linux-gnu- ;;
    *)
        report_error "Invalid toolchain specified!" ;;
esac

TOOLCHAIN_FOLDER=${HOME}/TCs/${TOOLCHAIN_NAME}${TC_TARGET}

case ${MODE} in
    "private")
        ZIP_MOVE=${ZIP_MOVE_HEAD}/../me/FK
        ANYKERNEL_BRANCH=${DEVICE}-flash-personal-${ANDROID_VERSION}
        KEYS=testkey ;;
    "public")
        ZIP_MOVE=${ZIP_MOVE_HEAD}/Kernels/${DEVICE}${ZIP_MOVE_ADD}
        ANYKERNEL_BRANCH=${DEVICE}-flash-public-${ANDROID_VERSION}
        KEYS=testkey ;;
    "test")
        ZIP_MOVE=${ZIP_MOVE_HEAD}/Kernels/${DEVICE}/Tests${ZIP_MOVE_ADD}
        ANYKERNEL_BRANCH=${DEVICE}-flash-public-${ANDROID_VERSION}
        KEYS=testkey ;;
    *)
        report_error "Invalid mode specified!" ;;
esac

# COMPILATION VARIABLES
ARCHITECTURE=arm64
CCACHE=$( command -v ccache )
IMAGE=Image.gz-dtb
KERNEL=${OUT_FOLDER}/arch/${ARCHITECTURE}/boot/${IMAGE}
TOOLCHAIN=${TOOLCHAIN_FOLDER}/bin/${TOOLCHAIN_PREFIX}


###############
#             #
#  FUNCTIONS  #
#             #
###############


# CLEAN UP
function clean_up() {
    # CLEAN ANYKERNEL FOLDER
    cd "${ANYKERNEL_FOLDER}"
    git checkout ${ANYKERNEL_BRANCH}
    git clean -fxd

    # ONLY CHECKOUT IF KERNEL_BRANCH EXISTS AND WE AREN'T BISECTING OR REBASING
    cd "${SOURCE_FOLDER}"
    if [[ -n ${KERNEL_BRANCH} ]]; then
        [[ ! $( git status | ag "bisec|rebas" ) ]] && git checkout ${KERNEL_BRANCH}
    # OTHERWISE, NOTATE CURRENT BRANCH FOR CHANGELOG
    else
        export KERNEL_BRANCH=$( git rev-parse --abbrev-ref HEAD )
    fi
    # CLEAN SOURCE FOLDER:
    git clean -fxd
    # MAKE OUT FOLDER (IT GETS REMOVED PER CLEAN UP FUNCTION)
    mkdir -p ${OUT_FOLDER}
}

# MAKE WRAPPER FOR MAKE FUNCTION
function kernel_make() {
    make -j$( nproc --all ) \
         ARCH=${ARCHITECTURE} \
         CROSS_COMPILE="${CCACHE} ${TOOLCHAIN}" \
         O=${OUT_FOLDER} \
         "$@"
}


# SILENCE OUTPUT FUNCTION
function make_wrapper() {
    # ONLY SHOW ERRORS, WARNINGS, AND THE IMAGE LINE WHEN COMPILING (UNLESS DEBUG)
    [[ ${DEBUG} = true ]] && kernel_make "$@" \
                          || kernel_make "$@" |& ag --no-color "error:|warning:" && echo
}


# SETUP COMPILATION
function setup_compilation() {
    # POINT TO PROPER DEFCONFIG AND GENERATE VERSION FILES
    make_wrapper ${DEFCONFIG} prepare

    export FULL_VERSION=$( cat ${OUT_FOLDER}/include/config/kernel.release )

    [[ -n ${CCACHE} ]] && CCACHE_SUPPORT="${GRN}Yes, found at ${CCACHE}${RST}" \
                       || CCACHE_SUPPORT="${RED}No, please install it!${RSR}"

    echo "${BOLD}Kernel version:${RST}    ${FULL_VERSION}\n"

    echo "${BOLD}Current branch:${RST}    ${KERNEL_BRANCH}\n"

    echo "${BOLD}Toolchain path:${RST}    ${TOOLCHAIN}\n"

    echo "${BOLD}GCC version:${RST}       $( ${TOOLCHAIN}gcc --version | head -1 )\n"

    echo "${BOLD}ccache support?${RST}    ${CCACHE_SUPPORT}\n"
}


# MAKE KERNEL
function build_kernel() {
    # INCREMENT DIRTY VERSION NUMBER IF PASSED ABOVE
    [[ -n ${REVISION} ]] && echo $(( ${REVISION} - 1 )) > ${OUT_FOLDER}/.version

    # MAKE THE KERNEL
    make_wrapper ${EXTRA_MAKE_FLAGS}
}


# SETUP ZIP INFO
function setup_zip_info() {
    echo "  - Generating zip info"

    # REMOVE EVERYTHING BEFORE FLASH IN THE FLASH_VERSION
    FLASH_VERSION=$( echo ${FULL_VERSION} | sed s/"$( make kernelversion)"-// )

    # REVISION IS PASSED AS A PARAMETER FOR BETA VERSIONS
    [[ -n ${REVISION} ]] && REVISION=".r${REVISION}"

    # IF THE MODE ISN'T PUBLIC, ADD SHA INFORMATION TO THE ZIP
    [[ "${MODE}" != "public" ]] && SHA="-g$( git rev-parse --verify --short HEAD )"

    # EXPORT KERNEL_NAME BASED ON THE ABOVE INFORMATION
    export KERNEL_NAME=${FLASH_VERSION}${REVISION}${SHA}

    # SET ZIP NAMES
    export UNSIGNED_ZIP=${KERNEL_NAME}-unsigned.zip
    export SIGNAPK_ZIP=${KERNEL_NAME}-signapk.zip
    export ADJUSTED_ZIP=${KERNEL_NAME}-adjusted.zip
    export SIGNED_ZIP=${KERNEL_NAME}.zip
}


# SETUP FOLDERS
function setup_folders() {
    echo "  - Creating folders"

    # IF ZIPMOVE DOESN'T EXIST, MAKE IT
    [[ ! -d "${ZIP_MOVE}" ]] && mkdir -p "${ZIP_MOVE}"

    # IF IT ISN'T A PUBLIC BUILD, CLEAN THE FOLDER
    if [[ ${MODE} != "public" ]]; then
        [[ -z ${NOCLEAN} ]] && rm -rf "${ZIP_MOVE}"/*
    else
        # OTHERWISE, MOVE THE OLD FILES TO AN "OLD" FOLDER
        [[ ! -d "${ZIP_MOVE}"/Old ]] && mkdir -p "${ZIP_MOVE}"/Old
        mv $( find "${ZIP_MOVE}"/* -maxdepth 0 -type f ) \
           "${ZIP_MOVE}"/Old &>/dev/null
    fi
}


# PACKAGE ZIP
function package_zip() {
    echo "  - Creating zip ${SIGNED_ZIP}"

    cd "${ANYKERNEL_FOLDER}"

    # MOVE THE KERNEL IMAGE
    cp "${KERNEL}" "${ANYKERNEL_FOLDER}"

    # GRAB MODULES TOO IF THEY ARE PRESENT
    mkdir -p ${MODULES_FOLDER}
    find ${OUT_FOLDER} -name "*.ko" -exec cp {} ${MODULES_FOLDER} \;
    [[ $( ls -A ${MODULES_FOLDER} ) ]] \
            && ${TOOLCHAIN}strip --strip-unneeded ${MODULES_FOLDER}/*.ko \
            || rm -rf ${MODULES_FOLDER}

    # PACKAGE THE ZIP WITHOUT THE README
    zip -q -r9 ${UNSIGNED_ZIP} * -x README.md ${UNSIGNED_ZIP}

    # SIGN ZIP
    java -jar ${BIN_DIR}/signapk.jar \
              ${BIN_DIR}/${KEYS}.x509.pem \
              ${BIN_DIR}/${KEYS}.pk8 \
              ${UNSIGNED_ZIP} \
              ${SIGNAPK_ZIP}

    ${BIN_DIR}/zipadjust ${SIGNAPK_ZIP} ${ADJUSTED_ZIP} &>/dev/null

    java -jar ${BIN_DIR}/minsignapk.jar \
              ${BIN_DIR}/${KEYS}.x509.pem \
              ${BIN_DIR}/${KEYS}.pk8 \
              ${ADJUSTED_ZIP} \
              ${SIGNED_ZIP}

    # IF PACKAGING FAILED, ERROR OUT
    [[ ! -f ${SIGNED_ZIP} ]] && report_error "Kernel zip not found after signing!"
}

# MOVE FILES AND GENERATE MD5SUM
function move_files() {
    echo "  - Moving zip"

    mv ${SIGNED_ZIP} "${ZIP_MOVE}"

    md5sum "${ZIP_MOVE}"/${SIGNED_ZIP} > "${ZIP_MOVE}"/${SIGNED_ZIP}.md5
}


# GENERATE CHANGELOG
function generate_changelog() {
    echo "  - Generating changelog"

    GITHUB="http://github.com/nathanchance"
    CHANGELOG="${ZIP_MOVE}"/${KERNEL_NAME}-changelog.txt

    # KERNEL SOURCE FIRST
    cd "${SOURCE_FOLDER}"

    # WE NEED TO MARK THE PREVIOUS TAG FOR CHANGELOG
    PREV_TAG_NAME=$( git describe --abbrev=0 --tags ${MATCH_FLAG} )
    RANGE=${PREV_TAG_NAME}..HEAD

    # SHOW WHERE COMMITS ARE LOCATED
    echo "${GITHUB}/${DEVICE}/commits/${KERNEL_BRANCH}\n" > ${CHANGELOG}

    # USE SHORTLOG FOR PRETTY OUTPUT
    git log ${RANGE} | git shortlog >> ${CHANGELOG}

    # GENERATE A DIFF AS WELL
    git diff -M --stat --summary ${RANGE} >> ${CHANGELOG}

    # ANYKERNEL NEXT
    cd "${ANYKERNEL_FOLDER}"

    # WE ONLY WANT TO SHOW ANYKERNEL CHANGES IF THERE HAVE BEEN SOME
    NUM_COMMITS=$( git log ${RANGE} --pretty=oneline | wc -l )

    if [[ ${NUM_COMMITS} -gt 0 ]]; then
        echo "\n\n${GITHUB}/AnyKernel2/commits/${ANYKERNEL_BRANCH}\n" >> ${CHANGELOG}

        git log ${RANGE} | git shortlog >> ${CHANGELOG}

        git diff -M --stat --summary ${RANGE} >> ${CHANGELOG}
    fi
}


# PUSH KERNEL ZIPS TO GITHUB
function push_release() {
    echo "  - Pushing release"

    cd "${ZIP_MOVE}"

    git add .

    git commit -q --signoff -m "$(date +%Y%m%d): ${KERNEL_NAME}"

    git push -q
}


# TAG FOR RELEASES
function tag_release() {
    echo "  - Tagging release"

    cd "${SOURCE_FOLDER}"

    git tag -a "${KERNEL_NAME}" -m "${KERNEL_NAME}"
    git push -q origin "${KERNEL_NAME}"

    cd "${ANYKERNEL_FOLDER}"

    git tag -a "${KERNEL_NAME}" -m "${KERNEL_NAME}"
    git push -q origin "${KERNEL_NAME}"
}


# PRINT FILE INFO
function ending_info() {
    if [[ ${BUILD_RESULT} = "BUILD SUCCESSFUL" ]]; then
        echo ${RED}"FILE LOCATION: ${ZIP_MOVE}/${SIGNED_ZIP}"
        echo "SIZE: $( du -h ${ZIP_MOVE}/${SIGNED_ZIP} |
                          awk '{print $1}' )"${RST}
    fi

    echo ${RED}"TIME: $( date +%D\ %r | awk '{print toupper($0)}' )"
    echo "DURATION: $( format_time ${END} ${START} )"${RST}; echo
}


# LOG GENERATION
function generate_log() {
    echo "\n$( date +"%m/%d/%Y %H:%M:%S" ): ${BASH_SOURCE} ${PARAMS}" >> ${LOG}
    echo "${BUILD_RESULT} IN $( format_time ${END} ${START} )" >> ${LOG}

    if [[ ${BUILD_RESULT} = "BUILD SUCCESSFUL" ]]; then
        # FILE LOCATION: PATH
        echo "FILE LOCATION: ${ZIP_MOVE}/${SIGNED_ZIP}" >> ${LOG}
    fi
}



################
#              #
# SCRIPT START #
#              #
################

START=$( date +"%s" )


###################
# SHOW ASCII TEXT #
###################

clear
echo ${RED}
echo
echo "================================================================================================"
echo
echo
echo "  ___________________________________  __   ______ _______________________   ________________   "
echo "  ___  ____/__  /___    |_  ___/__  / / /   ___  //_/__  ____/__  __ \__  | / /__  ____/__  /   "
echo "  __  /_   __  / __  /| |____ \__  /_/ /    __  ,<  __  __/  __  /_/ /_   |/ /__  __/  __  /    "
echo "  _  __/   _  /___  ___ |___/ /_  __  /     _  /| | _  /___  _  _, _/_  /|  / _  /___  _  /___  "
echo "  /_/      /_____/_/  |_/____/ /_/ /_/      /_/ |_| /_____/  /_/ |_| /_/ |_/  /_____/  /_____/  "
echo
echo
echo
echo "================================================================================================"
echo

#################
# MAKING KERNEL #
#################

header "CLEANING UP AND MAKING KERNEL"

# DON'T SHOW CLEAN UP OUTPUT
clean_up &>/dev/null

# SETUP FOR COMPILATION
setup_compilation

# BUILD KERNEL
build_kernel


######################
# IF KERNEL COMPILED #
######################

if [[ -f ${KERNEL} ]]; then
    BUILD_RESULT="BUILD SUCCESSFUL"

    header "BUILDING FLASHABLE ZIP"

    setup_zip_info
    setup_folders
    package_zip
    move_files
    generate_changelog

    [[ ${MODE} != "private" ]] && push_release

    [[ ${MODE} = "public" ]] && tag_release

    echo

###################
# IF BUILD FAILED #
###################

else
    BUILD_RESULT="BUILD FAILED"
fi


######################
# ENDING INFORMATION #
######################

END=$( date +"%s" )

header "${BUILD_RESULT}!"

ending_info

generate_log

echo "\a"
