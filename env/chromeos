# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2018-2019 Nathan Chancellor
#
# Utility and terminal setup functions for my Pixelbook


# Setup function
#
# Using crouton (https://goo.gl/fd3zc):
# $ sudo install -Dt /usr/local/bin -m 755 ~/Downloads/crouton
# $ sudo crouton -r buster -t cli-extra
# $ sudo enter-chroot
# $ sudo sh -c 'apt update && apt install -y --no-install-recommends curl zsh && chsh -s /bin/zsh nathan'
#
# Using crostini:
# $ vmc start termina
# $ vmc container termina penguin
# $ sudo sh -c 'apt update && apt install -y --no-install-recommends zsh && chsh -s /bin/zsh natechancellor'
# $ exit
# $ vsh termina penguin
function bootstrap() {(
    # Grab common functions/variables
    source <(curl -LSs https://github.com/nathanchance/scripts/raw/master/common) &>/dev/null

    # Check hostname to see if we are using Crostini (default) or Crouton
    [[ "$(uname -n)" = "localhost" ]] && CROSTINI=false

    # Make sure keys are present
    if ${CROSTINI:=true}; then
        # crostini locations (mount them in via Files, USB first, SD card second, Google Drive third)
        for FOLDER in "removable/USB Drive/Keys" "removable/SD Card/Keys" "GoogleDrive/MyDrive/Crostini"; do
            KEYS=/mnt/chromeos/"${FOLDER}"
            [[ -d ${KEYS} ]] && break
        done
    else
        # crouton folder options (USB first, SD card second, Google Drive third)
        for KEYS in "/var/host/media/removable/USB Drive/Keys" "/var/host/media/removable/SD Card/Keys" "${HOME}/Downloads/Crostini"; do
            [[ -d ${KEYS} ]] && break
        done
    fi
    [[ ! -d ${KEYS} ]] && die "Key folders not found!"

    # Ensure that packages are all up to date
    sudo apt update
    sudo apt upgrade -y

    # Install packages from Debian repos
    sudo apt install -y --no-install-recommends \
        build-essential \
        bc \
        bison \
        devscripts \
        flex \
        gettext \
        git \
        git-email \
        gpg \
        irssi \
        jq \
        libcurl4-openssl-dev \
        libevent-dev \
        libexpat-dev \
        libncurses-dev \
        libpcre2-dev \
        libssl-dev \
        mosh \
        most \
        mutt \
        openvpn \
        pass \
        python-pip \
        ssh \
        tmux \
        unzip \
        vim \
        xclip \
        zlib1g-dev

    # Install speedtest-cli
    sudo curl -LSo /usr/local/bin/speedtest-cli https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py
    sudo chmod +x /usr/local/bin/speedtest-cli

    # Install latest version of LLVM/Clang
    if [[ ${ARCH:=$(get_arch)} = "amd64" ]]; then
        if grep -q "unstable" /etc/apt/sources.list; then
            REPO=llvm-toolchain
            URL=http://apt.llvm.org/unstable/
        else
            case $(source /etc/os-release; echo "${VERSION_ID:?}") in
                "9") DISTRO="stretch" ;;
                "10") DISTRO="buster" ;;
            esac
            REPO=llvm-toolchain-${DISTRO:?}
            URL=http://apt.llvm.org/${DISTRO}/
        fi
        curl https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        grep -q "apt.llvm.org" /etc/apt/sources.list || echo "deb ${URL} ${REPO} main" | sudo tee -a /etc/apt/sources.list
        sudo apt update -qq
        sudo apt install -y --no-install-recommends \
            clang-9 \
            lld-9
    fi

    # Setup SSH and GPG if keys are present
    mkdir -p "${HOME}"/.ssh
    cp "${KEYS}"/id_ed25519{,.pub} "${HOME}"/.ssh
    chmod 600 "${HOME}"/.ssh/id_ed25519

    # Setup GPG
    gpg --pinentry-mode loopback --import "${KEYS}"/{public*,private*}.asc
    gpg --import-ownertrust "${KEYS}"/ownertrust*.asc
    {
        echo "default-cache-ttl 3600"
        echo "max-cache-ttl 86400"
    } > "${HOME}"/.gnupg/gpg-agent.conf
    gpg-connect-agent reloadagent /bye

    # Clone scripts
    GITHUB=${HOME}/github
    mkdir -p "${GITHUB}"
    local SCRIPTS; SCRIPTS=${GITHUB}/scripts
    git clone git@github.com:nathanchance/scripts "${SCRIPTS}" || die "Error cloning script!"
    source "${SCRIPTS}"/env/setup && global_gitignore && create_zshrc
    source "${SCRIPTS}"/funcs/bldupdbin && { bldupdbin || die "bldupdbin failed!"; }
    path_push "${HOME}/usr/bin"
    source "${SCRIPTS}"/funcs/git && git_setup
    source "${SCRIPTS}"/funcs/pure && pure_prompt
    ln -fs "${SCRIPTS}"/configs/local/.tmux.conf "${HOME}"/.tmux.conf
    zsh "${SCRIPTS}"/configs/common/vim/vim_setup.sh
    gpg --pinentry-mode loopback --output "${HOME}"/.muttrc --decrypt "${SCRIPTS}"/configs/common/muttrc.gpg
    decrypt_serv_ip

    # Clone password store
    git clone git@github.com:nathanchance/password-store.git "${HOME}"/.password-store || die "Error cloning password store!"

    # Install hugo
    HUGO_VERSION=$(glr gohugoio/hugo)
    if [[ ${ARCH} = "amd64" ]]; then
        SUFFIX=64bit
    else
        SUFFIX=ARM64
    fi
    curl -LSso "${TMP_DEB:=$(mktemp --suffix=.deb)}" https://github.com/gohugoio/hugo/releases/download/"${HUGO_VERSION}"/hugo_"${HUGO_VERSION//v}"_Linux-"${SUFFIX}".deb
    sudo dpkg -i "${TMP_DEB}"
    rm -rf "${TMP_DEB}"

    # Download website files
    for REPO in hugo-files nathanchance.github.io; do
        git clone git@github.com:nathanchance/"${REPO}" "${GITHUB}/${REPO}"
    done
    git -C "${GITHUB}"/hugo-files submodule update --init --recursive

    # We need UTF characters in crouton for the prompt to work
    if [[ "$(uname -n)" = "localhost" ]]; then
        sudo apt install -y --no-install-recommends locales
        sudo dpkg-reconfigure locales
    fi

    # Download Android platform-tools
    if [[ ${ARCH} = "amd64" ]]; then
        curl -LSso "${TMP_ZIP:=$(mktemp --suffix=.zip)}" "https://dl.google.com/android/repository/platform-tools-latest-linux.zip"
        unzip -d "${HOME}" "${TMP_ZIP}"
        rm -rf "${TMP_ZIP}"
    fi
) && source "${HOME}"/.zshrc; }


# Update function
function upd() {
    sudo sh -c 'apt update && apt upgrade'
}


# Laptop specific aliases
function chromeos_aliases() {
    alias ls='ls --color=auto'
    alias mshsvr='mosh nathan@${SERVER_IP}'
}


# Laptop specific setup
function chromeos_setup() {
    # Until crbug.com/829934 hits stable/beta
    export TZ=/usr/share/zoneinfo/US/Arizona

    path_push "${HOME}/platform-tools"

    # Load the stock completions to make sure we don't miss out on anything
    echo "$fpath" | grep -q -s "vendor-completions" || fpath=( $fpath /usr/share/zsh/vendor-completions )
    compinit
}
# vi: filetype=zsh
