# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2018-2019 Nathan Chancellor
#
# Utility and terminal setup functions for my Pixelbook


# Setup function
#
# Using crouton (https://goo.gl/fd3zc):
# $ sudo install -Dt /usr/local/bin -m 755 ~/Downloads/crouton
# $ sudo crouton -r buster -t cli-extra
# $ sudo enter-chroot
# $ sudo sh -c 'apt update && apt install -y --no-install-recommends curl zsh && chsh -s /bin/zsh nathan'
#
# Using crostini:
# $ vmc start termina
# $ vmc container termina penguin
# $ sudo sh -c 'apt update && apt install -y --no-install-recommends zsh && chsh -s /bin/zsh natechancellor'
# $ exit
# $ vsh termina penguin
# $ ln -s /mnt/chromeos .
function bootstrap() {(
    # Grab common functions/variables
    source <(curl -LSs https://github.com/nathanchance/scripts/raw/master/common) &>/dev/null
    source <(curl -LSs https://github.com/nathanchance/scripts/raw/master/constants/versions) &>/dev/null

    # Check hostname to see if we are using Crostini (default) or Crouton
    [[ "$(uname -n)" = "localhost" ]] && CROSTINI=false

    # Make sure keys are present
    if ${CROSTINI:=true}; then
        # crostini locations (mount them in via Files, USB first, SD card second, Google Drive third)
        for FOLDER in "removable/VERBATIM/Keys" "removable/USB Drive/Keys" "removable/SD Card/Keys" "GoogleDrive/MyDrive/Crostini"; do
            KEYS=/mnt/chromeos/"${FOLDER}"
            [[ -d ${KEYS} ]] && break
        done
    else
        # crouton folder options (USB first, SD card second, Google Drive third)
        for KEYS in "/var/host/media/removable/VERBATIM/Keys" "/var/host/media/removable/SD Card/Keys" "${HOME}/Downloads/Crostini"; do
            [[ -d ${KEYS} ]] && break
        done
    fi
    [[ ! -d ${KEYS} ]] && die "Key folders not found!"

    # Set architecture variables
    case "$(uname -m)" in
        "aarch64") ARCH=arm64 ;;
        "x86_64") ARCH=amd64 ;;
        *) die "Unsupported architecture!" ;;
    esac

    # Ensure that packages are all up to date
    sudo apt update
    sudo apt upgrade -y

    # Install packages from Debian repos
    sudo apt install -y --no-install-recommends \
        build-essential \
        bc \
        bison \
        devscripts \
        flex \
        git \
        gpg \
        irssi \
        jq \
        libssl-dev \
        mosh \
        most \
        mutt \
        openvpn \
        pass \
        python-pip \
        ssh \
        tmux \
        vim \
        xclip

    # Install speedtest-cli
    sudo curl -LSo /usr/local/bin/speedtest-cli https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py
    sudo chmod +x /usr/local/bin/speedtest-cli

    # Install latest version of LLVM/Clang
    if [[ ${ARCH} = "amd64" ]]; then
        if grep -q "unstable" /etc/apt/sources.list; then
            REPO=llvm-toolchain
            URL=http://apt.llvm.org/unstable/
        else
            DISTRO=$(cat /etc/os-release | grep VERSION_CODENAME | cut -d= -f2)
            REPO=llvm-toolchain-${DISTRO}
            URL=http://apt.llvm.org/${DISTRO}/
        fi
        curl https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        grep -q "apt.llvm.org" /etc/apt/sources.list || echo "deb ${URL} ${REPO} main" | sudo tee -a /etc/apt/sources.list
        sudo apt update -qq
        sudo apt install -y --no-install-recommends \
            clang-9 \
            lld-9
    fi

    # Build updated ccache
    curl -LSs https://www.samba.org/ftp/ccache/ccache-"${CCACHE_VERSION:?}".tar.gz | tar -xzf -
    cd ccache-"${CCACHE_VERSION}" || die "Downloading or extracting ccache failed!"
    ./configure
    make -j"$(nproc)"
    sudo make install
    cd "${OLDPWD}" || die "${OLDPWD} doesn't exist??"
    rm -rf ccache*

    # Setup git
    git config --global core.editor vim
    git config --global user.name "Nathan Chancellor"
    git config --global user.email "natechancellor@gmail.com"

    # Install hub
    curl -LSsO https://github.com/github/hub/releases/download/v"${HUB_VERSION:?}"/hub-linux-${ARCH}-"${HUB_VERSION}".tgz
    tar -xf hub-linux-${ARCH}-"${HUB_VERSION}".tgz
    cd hub-linux-${ARCH}-"${HUB_VERSION}" || die "Downloading or extracting hub failed!"
    sudo ./install
    cd "${OLDPWD}" || die "${OLDPWD} doesn't exist??"
    rm -rf hub*

    # Install prebuilt ripgrep and fd binaries if available
    if [[ ${ARCH} = "amd64" ]]; then
        for URL in https://github.com/sharkdp/bat/releases/download/v${BAT_VERSION:?}/bat_${BAT_VERSION}_amd64.deb \
                   https://github.com/sharkdp/fd/releases/download/v${FD_VERSION:?}/fd_${FD_VERSION}_amd64.deb \
                   https://github.com/BurntSushi/ripgrep/releases/download/${RG_VERSION:?}/ripgrep_${RG_VERSION}_amd64.deb; do
            curl -LSsO "${URL}"
            sudo dpkg -i "$(basename "${URL}")" && rm "$(basename "${URL}")"
        done
    # Build them from source otherwise
    else
        # Install rust
        curl https://sh.rustup.rs -sSf | sh
        source "${HOME}"/.cargo/env

        for PAIR in fd:https://github.com/sharkdp/fd/archive/v${FD_VERSION:?}.zip \
                    ripgrep:https://github.com/BurntSushi/ripgrep/archive/${RG_VERSION:?}.zip; do
            BINARY=${PAIR%%:*}
            URL=${PAIR#*:}
            TMP=$(mktemp)

            curl -LSs "${URL}" -o "${TMP}"
            unzip "${TMP}"
            cd "${BINARY}"-* || die "Downloading or extracting ${BINARY} failed!"
            cargo build --release
            cargo install
            cd "${OLDPWD}" || die "${OLDPWD} doesn't exist??"
            rm -rf "${OLDPWD}" "${TMP}"
        done
    fi

    # Setup SSH and GPG if keys are present
    mkdir -p "${HOME}"/.ssh
    cp "${KEYS}"/id_ed25519{,.pub} "${HOME}"/.ssh
    chmod 600 "${HOME}"/.ssh/id_ed25519

    # Setup GPG
    gpg --pinentry-mode loopback --import "${KEYS}"/{public*,private*}.asc
    gpg --import-ownertrust "${KEYS}"/ownertrust*.asc
    git config --global commit.gpgsign true
    git config --global user.signingkey 2437CB76E544CB6AB3D9DFD399739260CB6CB716
    {
        echo "default-cache-ttl 3600"
        echo "max-cache-ttl 86400"
    } > "${HOME}"/.gnupg/gpg-agent.conf
    gpg-connect-agent reloadagent /bye

    # Clone scripts
    local SCRIPTS; SCRIPTS=${HOME}/scripts
    git clone git@github.com:nathanchance/scripts "${SCRIPTS}" || die "Error cloning script!"
    source "${SCRIPTS}"/funcs/git && git_aliases
    source "${SCRIPTS}"/funcs/pure && pure_prompt

    # Clone repos
    mkdir -p "${HOME}"/repos
    local DOTFILES; DOTFILES=${HOME}/repos/dotfiles
    git clone git@github.com:nathanchance/dotfiles "${DOTFILES}" || die "Error cloning dotfiles!"

    # Clone password store
    git clone git@github.com:nathanchance/password-store.git "${HOME}"/.password-store || die "Error cloning password store!"

    # Copy files into their proper locations
    # tmux
    cp "${DOTFILES}"/chromeos/.tmux.conf "${HOME}"

    # Run small setup scripts from dotfiles
    zsh "${DOTFILES}"/common/global_gitignore.sh
    zsh "${DOTFILES}"/common/vim/vim_setup.sh
    zsh "${DOTFILES}"/common/zshrc.sh

    # Decrypt .muttrc
    gpg --pinentry-mode loopback --output "${HOME}"/.muttrc --decrypt "${DOTFILES}"/common/muttrc.gpg

    # We need UTF characters in crouton for the prompt to work
    if [[ "$(uname -n)" = "localhost" ]]; then
        sudo apt install -y --no-install-recommends locales
        sudo dpkg-reconfigure locales
    fi

    # Download Android platform-tools
    curl -LSso "${TMP_ZIP:=$(mktemp --suffix=.zip)}" "https://dl.google.com/android/repository/platform-tools-latest-linux.zip"
    unzip -d "${HOME}" "${TMP_ZIP}"
    rm -rf "${TMP_ZIP}"
) && source "${HOME}"/.zshrc; }


# Laptop specific aliases
function chromeos_aliases() {
    alias ls='ls --color=auto'
    alias mshsvr='mosh nathan@${HETZNER_IP}'
}


# Laptop specific setup
function chromeos_setup() {
    # Until crbug.com/829934 hits stable/beta
    export TZ=/usr/share/zoneinfo/US/Arizona

    path_push "${HOME}/platform-tools"
}
# vi: filetype=zsh
