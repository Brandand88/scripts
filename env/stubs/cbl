# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2018-2020 Nathan Chancellor
#
# Functions used to assist with ClangBuiltLinux development

# Universal variables
CBL_ANDROID=${CBL}/android
CBL_CTTLFSH=${CBL_ANDROID}/cuttlefish
CBL_KC=${CBL_ANDROID}/common
CBL_KC_SRC=${CBL_KC}/common
CBL_SRC=${CBL}/src
CBL_TC=${CBL}/toolchains
CBL_LLVM=${CBL_TC}/llvm-tot/bin
CBL_BNTL=${CBL_TC}/binutils/bin
TCBLD=${CBL}/tc-build
CBL_CCACHE=${CBL}/.ccache
export CBL_ANDROID CBL_CTTLFSH CBL_KC CBL_KC_SRC CBL_SRC CBL_TC CBL_LLVM CBL_BNTL TCBLD CBL_CCACHE

# Configurations known to build with -Werror
CBLCFGS=(
    "arm32:multi_v7_defconfig"
    "arm32:allnoconfig"
    "arm32:allyesconfig"
    "arm32:allyesconfig-bfd"
    "arm32:allmodconfig"
    "arm32:allmodconfig-bfd"
    "arm64:defconfig"
    "arm64:allnoconfig"
    "arm64:allyesconfig"
    "arm64:allyesconfig-bfd"
    "arm64:allmodconfig"
    "arm64:allmodconfig-bfd"
    "mipsel:malta_kvm_guest_defconfig"
    "ppc32:ppc44x_defconfig"
    "ppc32:allnoconfig"
    "ppc64:pseries_defconfig"
    "ppc64:allnoconfig"
    "ppc64le:powernv_defconfig"
    "riscv64:defconfig"
    "s390x:defconfig"
    "s390x:allyesconfig"
    "s390x:allmodconfig"
    "x86_64:defconfig"
    "x86_64:allyesconfig"
    "x86_64:allyesconfig-bfd"
    "x86_64:allmodconfig"
    "x86_64:allmodconfig-bfd"
)

# Create build folders
function crbf() {
    local ITEM
    for ITEM in binutils kernel llvm; do
        export "$(echo ${ITEM:0:1} | tr '[:lower:]' '[:upper:]')BF=${BLDF}/${ITEM}"
        mkdir -p "${BLDF}/${ITEM}"
    done
}

# Patch check function
function pch() { (
    [[ ${#} -eq 0 ]] && FP_PARAMS=(-1 HEAD)
    [[ -z ${FP_PARAMS[*]} ]] && FP_PARAMS=("${@}")
    [[ -f scripts/checkpatch.pl ]] && git fp --stdout "${FP_PARAMS[@]}" | ./scripts/checkpatch.pl
    [[ -f scripts/get_maintainer.pl ]] && git fp --stdout "${FP_PARAMS[@]}" | ./scripts/get_maintainer.pl --scm
); }

# Quilt-like patch management function for Linux
function ptchmn() { (
    [[ ! -f Makefile ]] && die "You're not in a kernel folder!"

    REPO=${PWD##*/}
    TARGET_FOLDER=${GITHUB_FOLDER}/patches/${REPO}/$(git cb)
    [[ ! -d ${TARGET_FOLDER} ]] && die "${TARGET_FOLDER} doesn't exist!"

    case "${1:?}" in
        "-s" | "--sync")
            case ${REPO} in
                linux | linux-next) ;;
                *) die "${REPO} not supported by ptchmn!" ;;
            esac

            FIRST_HASH=$(git mfc)
            [[ -z ${FIRST_HASH} ]] && die "FIRST_HASH is empty...?"

            rm "${TARGET_FOLDER}"/*

            git fp -o "${TARGET_FOLDER}" --base="${FIRST_HASH}^" "${FIRST_HASH}"^..HEAD

            git -C "${TARGET_FOLDER}" aa

            git -C "${TARGET_FOLDER}" c -m "patches: ${REPO}: $(git cb): Sync as of $(git sh -s --format=%h)"

            git -C "${TARGET_FOLDER}" push
            ;;

        "-a" | "--apply")
            git am "${TARGET_FOLDER}"/*
            ;;
    esac
); }

# Rebase a linux-next branch
function rbln() { (
    [[ ! -f Makefile ]] && {
        display_error "You're not in a kernel folder!"
        return 1
    }
    FIRST_HASH=$(git mfc)
    SECOND_HASH=$(git show -s --format=%H "$(git cb)")
    git rh origin/master
    git cherry-pick --gpg-sign "${FIRST_HASH}^..${SECOND_HASH}"
); }

# Download and apply an LLVM/Clang/lld patch
function phabap() { (
    [[ ! -d llvm ]] && die "You're not in the llvm-project folder!"

    while ((${#})); do
        case ${1} in
            D*) REVISION=${1} ;;
            *) GIT_AP_ARGS=("${GIT_AP_ARGS[@]}" "${1}") ;;
        esac
        shift
    done

    curl -LSs "https://reviews.llvm.org/${REVISION:?}?download=true" | git ap "${GIT_AP_ARGS[@]}" || exit ${?}
    git ac -m "${REVISION}

Link: https://reviews.llvm.org/${REVISION}"
); }

# Call ccache
function ccache_call() {
    header "${CCACHE_DIR:?}"
    [[ -d ${CCACHE_DIR} ]] && mkdir -p "${CCACHE_DIR}"
    ccache "${@}"
}

# Work with multiple ccache folders
function ccache_for_all() { (
    while ((${#})); do
        case ${1} in
            "binutils" | "kernel" | "llvm") CCACHE_DIR="${CBL_CCACHE}"/${1} ;;
            "clear") CCACHE_OPTS=(--clear --zero-stats) ;;
            "stats") CCACHE_OPTS=(--show-stats) ;;
        esac
        shift
    done

    if [[ -z ${CCACHE_DIR} ]]; then
        for CCACHE_DIR in "${CBL_CCACHE}"/*; do
            export CCACHE_DIR
            ccache_call "${CCACHE_OPTS[@]}"
        done
    else
        export CCACHE_DIR
        ccache_call "${CCACHE_OPTS[@]}"
    fi
); }

# Print specific folder ccache stats
function ccache_stats() { (
    ccache_for_all stats "${@}"
); }

# Clear specific folder ccache
function ccache_clear() { (
    ccache_for_all clear "${@}"
); }

# Create ccache at specific size
function ccache_size() {
    while ((${#})); do
        case ${1} in
            "binutils" | "kernel" | "llvm") CCACHE_DIR="${CBL_CCACHE}"/${1} ;;
            *) SIZE=${1} ;;
        esac
        shift
    done
    export CCACHE_DIR
    ccache_call --max-size="${SIZE:?}"G >/dev/null
    ccache --set-config=compression=true
    ccache --set-config=compression_level=9
}

# Build kernel with Clang (wrapper)
function bldkw() { (
    [[ -f Makefile ]] || die "No Makefile found! Are you in a kernel tree?"

    # Parameters
    MAKE_ARGS=()
    while ((${#})); do
        case ${1} in
            # Supported architectures
            arm) TARGET_ARCH=arm32 ;;
            arm32 | arm64 | mipsel | ppc32 | ppc64 | ppc64le | riscv64 | s390x | x86_64) TARGET_ARCH=${1} ;;
            x86) TARGET_ARCH=x86_64 ;;

            # Build utilities
            AR=* | CC=* | HOSTAR=* | HOSTCC=* | HOSTCXX=* | HOSTLD=* | LD=* | NM=* | OBJCOPY=* | OBJDUMP=* | OBJSIZE=* | READELF=* | STRIP=*) export "${1:?}" ;;

            # bldkw vars
            PO=* | Q=*) export "${1:?}" ;;

            # make flags that are interpreted by bldkw
            CROSS_COMPILE=* | KCFLAGS=* | LLVM_IAS=* | O=* | V=* | W=*) export "${1:?}" ;;

            # Assume everything else is destined for make (like configs and targets)
            *) MAKE_ARGS=("${MAKE_ARGS[@]}" "${1}") ;;
        esac

        shift
    done

    case ${TARGET_ARCH} in
        arm32)
            : "${CROSS_COMPILE:=arm-linux-gnueabi-}"
            ARCH_FLAGS=("ARCH=arm" "CROSS_COMPILE=${CROSS_COMPILE}")
            ;;

        arm64)
            : "${CROSS_COMPILE:=aarch64-linux-gnu-}"
            ARCH_FLAGS=("ARCH=arm64" "CROSS_COMPILE=${CROSS_COMPILE}")
            ;;

        mipsel)
            : "${CROSS_COMPILE:=mipsel-linux-gnu-}"
            ARCH_FLAGS=("ARCH=mips" "CROSS_COMPILE=${CROSS_COMPILE}")
            ;;

        ppc32)
            : "${CROSS_COMPILE:=powerpc-linux-gnu-}"
            ARCH_FLAGS=("ARCH=powerpc" "CROSS_COMPILE=${CROSS_COMPILE}")
            ;;

        ppc64)
            : "${CROSS_COMPILE:=powerpc64-linux-gnu-}" \
                "${LD:=${CROSS_COMPILE}ld}"
            ARCH_FLAGS=("ARCH=powerpc" "CROSS_COMPILE=${CROSS_COMPILE}")
            ;;

        ppc64le)
            : "${CROSS_COMPILE:=powerpc64le-linux-gnu-}"
            ARCH_FLAGS=("ARCH=powerpc" "CROSS_COMPILE=${CROSS_COMPILE}")
            ;;

        riscv64)
            : "${CROSS_COMPILE:=riscv64-linux-gnu-}" \
                "${LD:=${CROSS_COMPILE}ld}" \
                "${LLVM_IAS:=1}"
            ARCH_FLAGS=("ARCH=riscv" "CROSS_COMPILE=${CROSS_COMPILE}")
            ;;

        s390x)
            : "${CROSS_COMPILE:=s390x-linux-gnu-}" \
                "${LD:=${CROSS_COMPILE}ld}" \
                "${OBJCOPY:=${CROSS_COMPILE}objcopy}" \
                "${OBJDUMP:=${CROSS_COMPILE}objdump}"
            ARCH_FLAGS=("ARCH=s390" "CROSS_COMPILE=${CROSS_COMPILE}")
            ;;

        x86_64) ARCH_FLAGS=() ;;

        *) die "Invalid TARGET_ARCH specified!" ;;
    esac

    # Default values
    : "${AR:=llvm-ar}" \
        "${CC:=${CCACHE} clang}" \
        "${HOSTAR:=llvm-ar}" \
        "${HOSTCC:=${CCACHE} clang}" \
        "${HOSTCXX:=${CCACHE} clang++}" \
        "${HOSTLD:=ld.lld}" \
        "${HOSTLDFLAGS:=-fuse-ld=lld}" \
        "${LD:=ld.lld}" \
        "${LLVM_IAS:=0}" \
        "${NM:=llvm-nm}" \
        "${BLDKW_O:=${O:-out/${TARGET_ARCH}}}" \
        "${OBJCOPY:=llvm-objcopy}" \
        "${OBJDUMP:=llvm-objdump}" \
        "${OBJSIZE:=llvm-size}" \
        "${READELF:=llvm-readelf}" \
        "${STRIP:=llvm-strip}"

    # We are only concerned about little endian for ARM
    if [[ ${TARGET_ARCH} =~ arm ]]; then
        KCONFIG_ALLCONFIG=${O}/little-endian.config
        mkdir -p "${KCONFIG_ALLCONFIG%/*}"
        echo "CONFIG_CPU_BIG_ENDIAN=n" >"${KCONFIG_ALLCONFIG}"
    fi

    # Use our versions of Clang
    move_to_front_of_path "${CBL_BNTL}"
    move_to_front_of_path "${CBL_LLVM}"
    [[ -n ${PO} ]] && move_to_front_of_path "${PO}"

    if [[ ${Q:=1} -ne 2 ]]; then
        echo
        echo "${BOLD}LLVM location:${RST} $(dirname "$(command -v clang)")"
        echo
        clang --version | head -n1
        echo
        echo "${BOLD}binutils location:${RST} $(dirname "$(command -v "${CROSS_COMPILE}"as)")"
        echo
        "${CROSS_COMPILE}"as --version | head -n1
        echo
    fi

    # Don't set -s if V is set
    case ${Q} in
        1 | 2) [[ -z ${V} ]] && SILENT_FLAG=(-s) ;;
    esac

    # Setup ccache
    ccache_size kernel 100

    # Build the kernel
    set -x
    make \
        ${SILENT_FLAG:+"${SILENT_FLAG[@]}"} \
        "${JOBS_FLAG}" \
        ${ARCH_FLAGS:+"${ARCH_FLAGS[@]}"} \
        AR="${AR}" \
        CC="${CC}" \
        HOSTAR="${HOSTAR}" \
        HOSTCC="${HOSTCC}" \
        HOSTCXX="${HOSTCXX}" \
        HOSTLD="${HOSTLD}" \
        HOSTLDFLAGS="${HOSTLDFLAGS}" \
        ${KCFLAGS:+KCFLAGS="${KCFLAGS}"} \
        ${KCONFIG_ALLCONFIG:+KCONFIG_ALLCONFIG="${KCONFIG_ALLCONFIG}"} \
        LD="${LD}" \
        LLVM_IAS="${LLVM_IAS}" \
        NM="${NM}" \
        O="${BLDKW_O}" \
        OBJCOPY="${OBJCOPY}" \
        OBJDUMP="${OBJDUMP}" \
        OBJSIZE="${OBJSIZE}" \
        READELF="${READELF}" \
        STRIP="${STRIP}" \
        ${V:+V="${V}"} \
        ${W:+W="${W}"} \
        "${MAKE_ARGS[@]}"
    EXIT_CODE=${?}
    set +x
    exit ${EXIT_CODE}
); }

# Configure and build a kernel with Clang
function bldk() { (
    # Parameters
    BLDKW_ARGS=()
    FINAL_ARGS=()
    while ((${#})); do
        case ${1} in
            # Supported architectures
            arm) ARCH=arm32 ;;
            arm32 | arm64 | mipsel | ppc32 | ppc64 | ppc64le | riscv64 | s390x | x86_64) ARCH=${1} ;;
            x86) ARCH=x86_64 ;;

            # Build utilities
            AR=* | CC=* | HOSTAR=* | HOSTCC=* | HOSTCXX=* | HOSTLD=* | LD=* | NM=* | OBJCOPY=* | OBJDUMP=* | OBJSIZE=* | READELF=* | STRIP=*) BLDKW_ARGS=("${BLDKW_ARGS[@]}" "${1}") ;;

            # bldkw vars
            PO=* | Q=*) BLDKW_ARGS=("${BLDKW_ARGS[@]}" "${1}") ;;

            # make flags that are interpreted by bldkw
            CROSS_COMPILE=* | KCFLAGS=* | LLVM_IAS=* | V=* | W=*) BLDKW_ARGS=("${BLDKW_ARGS[@]}" "${1}") ;;

            # The wrapper needs knowledge about O=
            O=*)
                export "${1:?}"
                BLDKW_ARGS=("${BLDKW_ARGS[@]}" "${1}")
                ;;

            # The wrapper need to parse the config
            *config) CONFIG=${1} ;;

            # Assume everything else is destined for make (like configs and targets)
            *) FINAL_ARGS=("${FINAL_ARGS[@]}" "${1}") ;;
        esac

        shift
    done
    [[ -z ${FINAL_ARGS[*]} ]] && FINAL_ARGS=(all)

    # Sanity checks
    [[ -z ${ARCH} ]] && die "ARCH not specified!"
    if [[ -z ${CONFIG} ]]; then
        case ${ARCH} in
            mipsel) CONFIG=malta_kvm_guest_defconfig ;;
            ppc32) CONFIG=ppc44x_defconfig ;;
            ppc64) CONFIG=pseries_defconfig ;;
            ppc64le) CONFIG=powernv_defconfig ;;
            *) CONFIG=defconfig ;;
        esac
    fi
    { [[ ${PWD} =~ cbl ]] && ${IS_DEFCONFIG:=false}; } && CBL_DEFCONFIG=true

    BLDKW=(bldkw "${ARCH}" "${BLDKW_ARGS[@]}")

    # Configure kernel
    "${BLDKW[@]}" distclean "${CONFIG}"

    : "${BLDK_O:=${O:-out/${ARCH}}}"
    if ${CBL_DEFCONFIG:=false}; then
        # Extra configs for boot testings (runs extra tests)
        # From https://github.com/groeck/linux-build-test/blob/master/rootfs/scripts/common.sh
        echo "CONFIG_INIT_STACK_ALL=y
CONFIG_EXPERT=y
CONFIG_DEBUG_KERNEL=y
CONFIG_LOCK_DEBUGGING_SUPPORT=y
CONFIG_DEBUG_RT_MUTEXES=y
CONFIG_DEBUG_SPINLOCK=y
CONFIG_DEBUG_MUTEXES=y
CONFIG_DEBUG_WW_MUTEX_SLOWPATH=y
CONFIG_DEBUG_LOCK_ALLOC=y
CONFIG_DEBUG_LOCKDEP=y
CONFIG_DEBUG_ATOMIC_SLEEP=y
CONFIG_CRYPTO_MANAGER_DISABLE_TESTS=y
CONFIG_CRC32_SELFTEST=y
CONFIG_DEBUG_LOCKING_API_SELFTESTS=y
CONFIG_DEBUG_NMI_SELFTEST=y
CONFIG_DEBUG_RODATA_TEST=y
CONFIG_DEBUG_TLBFLUSH=y
CONFIG_DMATEST=y
CONFIG_GLOB_SELFTEST=y
CONFIG_PCI_EPF_TEST=y
CONFIG_PCI_ENDPOINT_TEST=y
CONFIG_PROVE_LOCKING=y
CONFIG_PROVE_RCU=y
CONFIG_RBTREE_TEST=y
CONFIG_RCU_EQS_DEBUG=y
CONFIG_STATIC_KEYS_SELFTEST=y
CONFIG_STRING_SELFTEST=y
CONFIG_TEST_BITMAP=y
CONFIG_TEST_FIRMWARE=y
CONFIG_TEST_SORT=y
CONFIG_TEST_SYSCTL=y
CONFIG_TEST_UUID=y
CONFIG_TORTURE_TEST=y
CONFIG_USB_TEST=y
CONFIG_USB_EHSET_TEST_FIXTURE=y
CONFIG_USB_LINK_LAYER_TEST=y
CONFIG_WW_MUTEX_SELFTEST=y
CONFIG_BLK_DEV_INITRD=y
CONFIG_DEVTMPFS=y
CONFIG_DEVTMPFS_MOUNT=y
CONFIG_SCSI=y
CONFIG_BLK_DEV_SD=y
CONFIG_SCSI_LOWLEVEL=y
CONFIG_SCSI_DC395x=y
CONFIG_SCSI_AM53C974=y
CONFIG_SCSI_SYM53C8XX_2=y
CONFIG_MEGARAID_SAS=y
CONFIG_FUSION=y
CONFIG_FUSION_SAS=y
CONFIG_MMC=y
CONFIG_MMC_SDHCI=y
CONFIG_MMC_SDHCI_PCI=y
CONFIG_BLK_DEV_NVME=y
CONFIG_USB=y
CONFIG_USB_XHCI_HCD=y
CONFIG_USB_EHCI_HCD=y
CONFIG_USB_OHCI_HCD=y
CONFIG_USB_STORAGE=y
CONFIG_USB_UAS=y
CONFIG_VIRTIO=y
CONFIG_VIRTIO_PCI=y
CONFIG_VIRTIO_PCI_LEGACY=y
CONFIG_VIRTIO_BALLOON=y
CONFIG_VIRTIO_MMIO=y
CONFIG_BLK_MQ_VIRTIO=y
CONFIG_VIRTIO_BLK=y
CONFIG_VIRTIO_BLK_SCSI=y
CONFIG_SCSI_VIRTIO=y" >>"${BLDK_O}"/.config

        [[ ${ARCH} != "x86_64" ]] && echo "CONFIG_LOCK_TORTURE_TEST=y
CONFIG_RCU_TORTURE_TEST=y" >>"${BLDK_O}"/.config

        "${BLDKW[@]}" olddefconfig &>/dev/null
    fi

    # Build kernel
    "${BLDKW[@]}" "${FINAL_ARGS[@]}"
); }

# Download EFI firmware
function download_efi_firmware() { (
    AAVMF=${HOME}/usr/share/AAVMF
    AAVMF_FILES=(AAVMF_CODE.fd AAVMF_VARS.fd)
    AAVMF_DEB=qemu-efi-aarch64_0~20190606.20d2e5a1-2_all.deb

    OVMF=${HOME}/usr/share/OVMF
    OVMF_FILES=(OVMF_CODE.fd OVMF_VARS.fd)
    OVMF_DEB=ovmf_0~20190606.20d2e5a1-2_all.deb

    cd "$(mktemp -d)"
    rm -rf "${AAVMF}"
    mkdir -p "${AAVMF}"
    curl -LSsO http://ftp.us.debian.org/debian/pool/main/e/edk2/"${AAVMF_DEB}"
    ar x "${AAVMF_DEB}"
    tar xJf data.tar.xz
    for AAVMF_FILE in "${AAVMF_FILES[@]}"; do
        mv "${AAVMF//${HOME}\//}"/"${AAVMF_FILE}" "${AAVMF}"
    done

    cd "$(mktemp -d)"
    rm -rf "${OVMF}"
    mkdir -p "${OVMF}"
    curl -LSsO http://http.us.debian.org/debian/pool/main/e/edk2/"${OVMF_DEB}"
    ar x "${OVMF_DEB}"
    tar xJf data.tar.xz
    for OVMF_FILE in "${OVMF_FILES[@]}"; do
        mv "${OVMF//${HOME}\//}"/"${OVMF_FILE}" "${OVMF}"
    done
); }

# Boot a kernel in QEMU
function bootk() { (
    ARCH=${1}
    shift
    [[ -z ${ARCH} ]] && die "ARCH not specified!"
    case ${ARCH} in
        arm | arm32)
            ARCH=arm32_v7
            O_ARCH=arm32
            ;;
        x86) ARCH=x86_64 ;;
    esac

    BOOT_QEMU_SH=${CBL}/git/boot-utils-master/boot-qemu.sh
    [[ -f ${BOOT_QEMU_SH} ]] || die "${BOOT_QEMU_SH} doesn't exist!"

    # Update boot-utils
    (cd "${BOOT_QEMU_SH%/*}" &&
        git rh --quiet &&
        git pull --quiet --rebase)

    "${BOOT_QEMU_SH}" -a "${ARCH}" -k "${O:-out/${O_ARCH:-${ARCH}}}" "${@}"
); }

# Build a kernel and boot it
function babk() { (
    ARCH=${1}
    shift
    [[ -z ${ARCH} ]] && die "ARCH not specified!"

    bldk "${ARCH}" KCFLAGS="${KCFLAGS--Werror}" "${@}"

    bootk "${ARCH}"
); }

# Show local LLVM patches via git log
function llvm_log() { (
    cd "${TCBLD:?}"/llvm-project || return
    MLFC=$(git mfc)
    if [[ -n ${MLFC} ]]; then
        echo
        echo "LLVM commit log:"
        echo
        git lo "${MLFC}"^^..HEAD
    fi
); }

# linux testing
function lt() { (
    : "${FOLDER:=${CBL}/${TREE:=linux-next}}"
    cd "${FOLDER}" || die "wtf"
    echo "${PWD}"

    while ((${#})); do
        case ${1} in
            # defconfig + little-endian allyesconfig
            -b | --basic) BASIC=true ;;
            -d | --debug) DEBUG=true ;;
            # Show non-fatal warnings
            -w | --warnings) SHOW_NF_WARNINGS=true ;;
            "") ;;
        esac
        shift
    done

    # Logging
    LOG_DIR=$(mktemp -d)
    LOG=${LOG_DIR}/main.log
    echo
    echo "Build log: ${LOG}"
    echo
    {
        echo "Host: $(uname -n)"
        echo
        (
            path_push "${CBL_BNTL}"
            path_push "${CBL_LLVM}"
            [[ -n ${PO} ]] && path_push "${PO}"
            echo "clang location: $(command -v clang)"
            echo
            clang --version | head -n1
        )
        echo
        echo "Version: $(make -s O=out alldefconfig &>/dev/null && make -s O=out kernelrelease && rm -rf out)"
        echo
        echo "Build results:"
        echo
    } >"${LOG}"

    for CONFIG in "${CBLCFGS[@]}"; do (
        ARCH=${CONFIG%%:*}
        CONFIG=${CONFIG##*:}

        # Basic configs are defconfigs + little endian allyesconfig
        # warning: This only exits the subshell caused by the (..) group. [SC2106]... that's the idea lol
        # shellcheck disable=SC2106
        [[ -n ${BASIC} && ! (${CONFIG} =~ defconfig || ${CONFIG} = "allyesconfig") ]] && continue

        header "${ARCH}:${CONFIG}" "${BOLD}"

        # Start timer
        START=$(date +%s)

        # Warning/error log
        WARNING_LOG=${LOG_DIR}/${ARCH}_${CONFIG}.log

        # Test bfd builds with ld.bfd
        [[ ${CONFIG} =~ -bfd ]] && BFD=true
        CONFIG=${CONFIG//-bfd/}
        if ${BFD:=false}; then
            case ${ARCH} in
                arm32) LD=arm-linux-gnueabi-ld ;;
                arm64) LD=aarch64-linux-gnu-ld ;;
                x86_64) LD=ld ;;
            esac
        fi

        # Build kernel silently normally
        if [[ -z ${DEBUG} ]]; then
            Q=2 bldk "${ARCH}" "${CONFIG}" KCFLAGS="${KCFLAGS--Werror}" ${LD:+LD="${LD}"} O="${KBF}/${ARCH}" |& tee "${WARNING_LOG}"
            # Shellcheck does not understand zsh-isms like pipestatus (bash has PIPESTATUS)
            # shellcheck disable=SC2154
            MAKE_RESULT=${pipestatus[1]}
        else
            bldk "${ARCH}" "${CONFIG}" KCFLAGS="${KCFLAGS--Werror}" ${LD:+LD="${LD}"} O="${KBF}/${ARCH}"
            MAKE_RESULT=${?}
        fi

        # Make sure that if make fails, it gets propgated to the if statement
        if [[ ${MAKE_RESULT} -eq 0 ]]; then
            COLOR=${GRN}
            LT_RESULT=successful
        else
            COLOR=${RED}
            LT_RESULT=failed
        fi
        echo "${COLOR}Build ${LT_RESULT}${RST}"
        {
            echo "${ARCH}:${CONFIG}$(${BFD} && echo "-bfd") | Build ${LT_RESULT} in $(format_time "${START}" "$(date +%s)")\c"
            case ${ARCH} in
                riscv64 | s390x) BOOT=false ;;
                *) BOOT=true ;;
            esac
            if ${BOOT} && [[ ${LT_RESULT} = "successful" && ${CONFIG} =~ defconfig ]]; then
                if O=${KBF}/${ARCH} bootk "${ARCH}" &>/dev/null; then
                    echo " | Boot successful\c"
                else
                    echo " | Boot failed\c"
                fi
            fi
            echo
            [[ -z ${DEBUG} && (-n ${SHOW_NF_WARNINGS} || ${LT_RESULT} = "failed") ]] &&
                rg --color=never "error:|warning:|undefined" "${WARNING_LOG}" | sed "s/${PWD//\//\\/}\///g"
            echo
        } >>"${LOG}"
    ); done

    {
        MFC=$(git mfc)
        if [[ -n ${MFC} ]]; then
            echo "${FOLDER##*/} commit log:"
            echo
            git lo "${MFC}"^^..HEAD
        fi
        llvm_log
    } >>"${LOG}"

    MESSAGE="linux$([[ -f localversion-next ]] && cat localversion-next) build results: $(deldog "${LOG}")"

    tg_msg "${MESSAGE}"

    echo
    echo "${MESSAGE}"
    echo

    rm "${LOG}"
); }

# Pull the latest CBL Docker image and run it with podman
function pdmnrn() { (
    [[ -z ${PODMAN_IMAGE} ]] && PODMAN_IMAGE=clangbuiltlinux/debian
    [[ -z ${LOCAL} ]] && podman pull "${PODMAN_IMAGE}"
    podman_mount \
        --interactive \
        --rm \
        --tty \
        "${PODMAN_IMAGE}" "${@}"
); }

# Strip executables within a folder
function stripall() { (
    cd "${1:?}"
    for FILE in $(fd -t file -x file | grep 'not stripped' | cut -d: -f1); do strip "${FILE}"; done
); }

# Build LLVM
function bldllvm() { (
    # Setup ccache
    ccache_size llvm 75

    "${TCBLD}"/build-llvm.py "${@}"
); }

# Build binutils
function bldbn() { (
    # Setup ccache
    ccache_size binutils 25

    "${TCBLD}"/build-binutils.py "${@}"
); }

# Build LLVM/Clang/lld and arm{32,64} and powerpc binutils from source
function bldtcs() { (
    DATE_TIME=$(date +%Y%m%d-%H%M)

    # Build binutils
    TC_BLD_BNTLS=${TCBLD}/binutils
    [[ -d ${TC_BLD_BNTLS} ]] || git clone git://sourceware.org/git/binutils-gdb.git "${TC_BLD_BNTLS}"
    git -C "${TC_BLD_BNTLS}" pull --rebase || die "Updating binutils failed (${?})"
    BLDBN_INSTALL_FOLDER=${CBL_TC}/binutils-${DATE_TIME}-$(git -C "${TC_BLD_BNTLS}" sh -s --format=%H origin/master)
    bldbn \
        --build-folder "${BBF:?}" \
        --install-folder "${BLDBN_INSTALL_FOLDER}" || die "bldbn failed with exit code ${?}"
    stripall "${BLDBN_INSTALL_FOLDER}"

    # Update binutils
    (cd "${CBL_TC}" &&
        rm -f binutils &&
        ln -s "${BLDBN_INSTALL_FOLDER##*/}" binutils)

    # Build LLVM/Clang/lld
    TC_BLD_LLVM_PRJCT=${TCBLD}/llvm-project
    [[ -d ${TC_BLD_LLVM_PRJCT} ]] || git -C "${TCBLD}" clone git://github.com/llvm/llvm-project
    git -C "${TC_BLD_LLVM_PRJCT}" pull --rebase || die "Updating llvm-project failed (${?})"
    BLDLLVM_INSTALL_FOLDER=${CBL_TC}/llvm-${DATE_TIME}-$(git -C "${TC_BLD_LLVM_PRJCT}" sh -s --format=%H origin/master)
    bldllvm \
        --assertions \
        --build-folder "${LBF:?}" \
        --check-targets lld clang llvm \
        --install-folder "${BLDLLVM_INSTALL_FOLDER}" \
        --lto=thin \
        --pgo || die "bldllvm failed with exit code ${?}"
    stripall "${BLDLLVM_INSTALL_FOLDER}"

    # Update llvm-tot symlink
    (cd "${CBL_TC}" &&
        rm -f llvm-tot &&
        ln -sf "${BLDLLVM_INSTALL_FOLDER##*/}" llvm-tot)

    # Invalidate our kernel ccache because we have a new compiler that will be used for it
    ccache_clear kernel
); }

# Switch cuttlefish branch
function switch_kc_branch() { (
    "${CBL_KC}"/build/multi-switcher.sh "${@}"
); }

# Sync kernel/common
function sync_cbl_kc() { (
    [[ -d ${CBL_KC} ]] || mkdir -p "${CBL_KC}"
    cd "${CBL_KC}" || exit ${?}
    REPO_INIT_CMD=(repo init -u https://android.googlesource.com/kernel/manifest -b common-android-multi)
    "${REPO_INIT_CMD[@]}" || die "${REPO_INIT_CMD[*]} failed (${?})"
    [[ -d ${CBL_KC_SRC} ]] && git -C "${CBL_KC_SRC}" rh
    REPO_SYNC_CMD=(repo sync "${JOBS_FLAG}")
    "${REPO_SYNC_CMD[@]}" || die "${REPO_SYNC_CMD[*]} failed (${?})"
); }

# kernel/common build wrapper
function kcbw() { (
    while ((${#})); do
        case ${1} in
            3.* | 4.* | 5.* | mainline) BRANCH=${1} ;;
            arm64) ARCH=aarch64 ;;
            x86*) ARCH=x86_64 ;;
            -s | --sync) SYNC=true ;;
        esac
        shift
    done
    : ${ARCH:?} "${BRANCH:=mainline}"
    CONFIG=build.config.cuttlefish.${ARCH}
    case ${BRANCH} in
        4.19 | 5.4 | mainline) CONFIG_DIR=${CBL_KC}/cuttlefish-modules ;;
        *) CONFIG_DIR=${CBL_KC_SRC} ;;
    esac

    # Download and setup kernel source
    [[ -d ${CBL_KC} ]] || mkdir -p "${CBL_KC}"
    cd "${CBL_KC}" || exit ${?}
    ${SYNC:=false} && sync_cbl_kc
    switch_kc_branch "${BRANCH}"

    REL_CBL_LLVM=$(realpath --relative-to="${CBL_KC}" "${CBL_LLVM}")
    if ! grep -q "${REL_CBL_LLVM}" "${CBL_KC_SRC}"/build.config.common; then
        # Build kernels with newer Clang
        sed -i "s;CLANG_PREBUILT_BIN=.*;CLANG_PREBUILT_BIN=${REL_CBL_LLVM};g" "${CBL_KC_SRC}"/build.config.common
        git -C "${CBL_KC_SRC}" ac -m "build.config.common: Use latest ClangBuiltLinux clang available"
    fi

    # Automatically move bzImage
    if [[ ${ARCH} = "x86_64" ]] && grep -q 'FILES=""' "${CONFIG_DIR}/${CONFIG}"; then
        sed -i '/FILES=""/d' "${CONFIG_DIR}/${CONFIG}"
        sed -i '/This build step is meant purely to generate/d' "${CONFIG_DIR}/${CONFIG}"
        sed -i -e :a -e '/^\n*$/{$d;N;};/\n$/ba' "${CONFIG_DIR}/${CONFIG}"
        git -C "${CONFIG_DIR}" ac -m "${CONFIG}: Move bzImage to DIST_FOLDER"
    fi

    case ${BRANCH} in
        4.9) BRANCH=4.9-q ;;
    esac
    rm -vrf out/android-${BRANCH}/dist
    BUILD_CONFIG=${CONFIG_DIR##*/}/${CONFIG} ./build/build.sh
); }

# Download Cuttlefish files
function upd_cuttlefish() { (
    while ((${#})); do
        case ${1} in
            -i | --img-zip) shift && CUTTLEFISH_ZIP_URL=${1} ;;
            -h | --host-tools-tar) shift && CUTTLEFISH_TAR_URL=${1} ;;
        esac
        shift
    done

    CUTTLEFISH_ZIP=$(mktemp --suffix=.zip)
    CUTTLEFISH_TAR=$(mktemp --suffix=.tar.gz)

    curl -LSso "${CUTTLEFISH_ZIP}" "${CUTTLEFISH_ZIP_URL:?}" || exit ${?}
    curl -LSso "${CUTTLEFISH_TAR}" "${CUTTLEFISH_TAR_URL:?}" || exit ${?}

    rm -rf "${CBL_CTTLFSH}"
    mkdir -p "${CBL_CTTLFSH}"
    cd "${CBL_CTTLFSH}" || exit ${?}

    unzip "${CUTTLEFISH_ZIP}" || exit ${?}
    tar -xvf "${CUTTLEFISH_TAR}" || exit ${?}

    rm -rf "${CUTTLEFISH_ZIP}" "${CUTTLEFISH_TAR}"
); }

# Boot Cuttlefish
function boot_cuttlefish() { (
    while ((${#})); do
        case ${1} in
            *) BRANCH=${1} ;;
        esac
        shift
    done

    DIST=${CBL_KC}/out/android-${BRANCH:?}/dist
    LAUNCH_CVD=(-daemon -kernel_path "${DIST}"/bzImage -report_anonymous_usage_stats n)
    [[ -f ${DIST}/initramfs.img ]] && LAUNCH_CVD=("${LAUNCH_CVD[@]}" -initramfs_path "${DIST}"/initramfs.img)

    cd "${CBL_CTTLFSH}" || exit ${?}

    HOME=${PWD} ./bin/stop_cvd &>/dev/null
    HOME=${PWD} ./bin/launch_cvd "${LAUNCH_CVD[@]}" &>/dev/null &

    sleep 60 &&
        ./bin/adb -e shell cat /proc/version &&
        HOME=${PWD} ./bin/stop_cvd
); }

# kernel/common build testing
function kct() { (
    while ((${#})); do
        case ${1} in
            -d | --debug) DEBUG=true ;;
            # Show non-fatal warnings
            -w | --warnings) SHOW_NF_WARNINGS=true ;;
            --x86)
                ARCHES=(x86)
                X86_ONLY=true
                ;;
            "") ;;
        esac
        shift
    done

    # Logging
    LOG=$(mktemp)
    echo
    echo "Build log: ${LOG}"
    echo
    {
        (
            path_push "${CBL_BNTL}"
            path_push "${CBL_LLVM}"
            [[ -n ${CPB} ]] && path_push "${CPB}"
            echo "clang location: $(command -v clang)"
            echo
            clang --version | head -n1
            llvm_log
            echo
            echo "Build results:"
            echo
        )
    } >"${LOG}"

    ${X86_ONLY:=false} || ARCHES=(arm64 x86)

    sync_cbl_kc

    for VERSION in 4.9 4.14 4.19 5.4 mainline; do (
        for ARCH in "${ARCHES[@]}"; do (
            START=$(date +%s)

            # Error log
            ERRORS=$(mktemp)

            case ${VERSION} in
                4.9)
                    DIST_BRANCH=4.9-q
                    UPSTREAM_BRANCH=${DIST_BRANCH}
                    ;;
                4.14)
                    DIST_BRANCH=${VERSION}
                    UPSTREAM_BRANCH=4.14-stable
                    ;;
                *)
                    DIST_BRANCH=${VERSION}
                    UPSTREAM_BRANCH=${VERSION}
                    ;;
            esac
            UPSTREAM_BRANCH=android-${UPSTREAM_BRANCH}

            header "${UPSTREAM_BRANCH} ${ARCH}" "${BOLD}"

            # Build kernel silently normally
            if [[ -z ${DEBUG} ]]; then
                kcbw "${ARCH}" "${VERSION}" "${SYNC_FLAG[@]}" |&
                    rg --color=never "error:|warning:|undefined" |& sed "s/${CBL_KC_SRC//\//\\/}\///g" |& tee "${ERRORS}"
                MAKE_RESULT=${pipestatus[1]}
            else
                kcbw "${ARCH}" "${VERSION}" "${SYNC_FLAG[@]}"
                MAKE_RESULT=${?}
            fi

            # Make sure that if make fails, it gets propgated to the if statement
            if [[ ${MAKE_RESULT} -eq 0 ]]; then
                BUILD_COLOR=${GRN}
                BUILD_RESULT=successful
            else
                BUILD_COLOR=${RED}
                BUILD_RESULT=failed
            fi
            echo "${BUILD_COLOR}Build ${BUILD_RESULT}${RST}"
            TIME_STRING=$(format_time "${START}" "$(date +%s)")

            # Boot Cuttlefish for x86
            if [[ ${ARCH} = "x86" && ${BUILD_RESULT} = "successful" ]]; then
                if boot_cuttlefish "${DIST_BRANCH}"; then
                    BOOT_COLOR=${GRN}
                    BOOT_RESULT=successful
                else
                    BOOT_COLOR=${RED}
                    BOOT_RESULT=failed
                    [[ "${ARCH}-${VERSION}" = "x86-4.19" ]] && BOOT_RESULT="failed (expected)"
                fi
                echo "${BOOT_COLOR}Boot ${BOOT_RESULT}${RST}"
                BOOT_RESULT=" | Boot ${BOOT_RESULT}"
            fi

            # Log result
            {
                echo "${UPSTREAM_BRANCH} ${ARCH} | $(cd "${CBL_KC_SRC}" && git kf aosp/${UPSTREAM_BRANCH}) | Build ${BUILD_RESULT} in ${TIME_STRING}${BOOT_RESULT}"
                [[ -z ${DEBUG} && (-n ${SHOW_NF_WARNINGS} || ${BUILD_RESULT} = "failed") ]] && cat "${ERRORS}"
                echo
            } >>"${LOG}"
            rm "${ERRORS}"
        ); done
    ); done

    MESSAGE="kernel/common build results: $(deldog "${LOG}")"

    tg_msg "${MESSAGE}"

    echo
    echo "${MESSAGE}"
    echo

    rm "${LOG}"

); }

# Build all kernel trees
function bldallk() { (
    TREE=linux lt ""
    TREE=linux-next lt ""
    kct ""
    "${CBL}"/wsl2/bin/build.sh
); }

# Build new LLVM/Clang/lld and test all kernel trees
function bldall() { (
    export TG=true
    bldtcs && bldallk
); }

# Function to test build-{binutils,llvm}.py in multiple Docker images
function bld_llvm_bntls_py() { (
    CCACHE_FOLDER=${CBL}/git/ccache
    LOG=$(mktemp)
    echo "Log: ${LOG}"
    SCRIPT=$(mktemp --suffix=.sh)
    TC_BLD=${CBL}/git/tc-build

    mkdir -p "${CCACHE_FOLDER}"
    cd "${TC_BLD}" || die "Could not move into ${TC_BLD}!"
    [[ -f build-llvm.py ]] || die "build-llvm.py script could not be found!"

    cat <<'EOF' >"${SCRIPT}"
#!/usr/env/bash

PACKAGES=( ccache clang cmake git python3 )

# Debian/Ubuntu
if command -v apt-get &>/dev/null; then
    PACKAGES+=( ca-certificates curl file gcc g++ make ninja-build texinfo xz-utils zlib1g-dev )
    case "$(cat /etc/os-release)" in
        *buster*|*bionic*|*cosmic*|*disco*) PACKAGES+=( lld ) ;;
    esac
    apt-get update
    apt-get upgrade -y
    apt-get install --no-install-recommends -y "${PACKAGES[@]}"
# Fedora
elif command -v dnf &>/dev/null; then
    PACKAGES+=( gcc gcc-c++ lld make ninja-build texinfo-tex xz zlib-devel )
    dnf update -y
    dnf install -y "${PACKAGES[@]}"
# Arch
elif command -v pacman &>/dev/null; then
    PACKAGES+=( base-devel lld ninja )
    pacman -Syyu --noconfirm
    pacman -S --noconfirm "${PACKAGES[@]}"
# OpenSUSE Leap/Tumbleweed
elif command -v zypper &>/dev/null; then
    PACKAGES+=( curl gcc gcc-c++ gzip lld make ninja tar texinfo xz zlib-devel )
    zypper -n up
    zypper -n in "${PACKAGES[@]}"
fi

ccache -M 50G
ccache --set-config=compression=true
ccache --set-config=compression_level=9
ccache --set-config=cache_dir=/ccache

TEXT_TO_REPLACE

./build-binutils.py -t all || exit 1
CC=gcc ./build-llvm.py || exit 1
CC=clang ./build-llvm.py || exit 1

for FILE in clang ld.lld aarch64-linux-gnu-as arm-linux-gnueabi-as mips-linux-gnu-as mipsel-linux-gnu-as powerpc-linux-gnu-as powerpc64-linux-gnu-as powerpc64le-linux-gnu-as riscv64-linux-gnu-as s390x-linux-gnu-as as; do
    ./install/bin/${FILE} --version || exit 1
done
EOF

    sed -i "s;TEXT_TO_REPLACE;git clone /${PWD##*/} /${PWD##*/}2 \&\& cd /${PWD##*/}2;g" "${SCRIPT}"

    for IMAGE in \
        archlinux/base:latest \
        debian:stable-slim \
        debian:testing-slim \
        debian:unstable-slim \
        fedora:latest \
        fedora:rawhide \
        opensuse/leap:latest \
        opensuse/tumbleweed:latest \
        ubuntu:xenial \
        ubuntu:latest \
        ubuntu:rolling \
        ubuntu:devel; do
        podman pull "${IMAGE}"
        podman_mount \
            --interactive \
            --mount type=bind,source="${CCACHE_FOLDER}",target=/ccache \
            --mount type=bind,source="${SCRIPT}",target=/script.sh \
            --rm \
            --tty \
            "${IMAGE}" bash /script.sh || {
            echo "${IMAGE} failed" >>"${LOG}"
            continue
        }
        echo "${IMAGE} successful" >>"${LOG}"
    done

    echo
    echo "Results:"
    cat "${LOG}"
    tg_msg "$(cat "${LOG}")"
    echo
); }

function yapf() {
    PYTHONPATH=${CBL}/git/yapf python3 "${CBL}"/git/yapf/yapf -i -p "${@}"
}

function qualify_tc_bld_uprev() { (
    TC_BLD=${HOME}/cbl/git/tc-build

    cd "$(mktemp -d)"

    "${TC_BLD}"/build-binutils.py --install-folder "${PWD}"

    "${TC_BLD}"/build-llvm.py --install-folder "${PWD}" --use-good-revision --check-targets lld clang llvm

    PATH=${PWD}/bin:${PATH} clang --version

    git -C "${TC_BLD}"/llvm-project show -s

    PATH_OVERRIDE=${PWD}/bin "${TC_BLD}"/kernel/build.sh --allyesconfig
); }

function upd_lnx_tcbld() { (
    while ((${#})); do
        case ${1} in
            "-p" | "--personal") MODE=personal ;;
            "-r" | "--release") MODE=release ;;
        esac
        shift
    done
    : ${MODE:=personal}

    LINUX=${HOME}/src/linux
    cd "${LINUX}"
    git fetch origin
    KVER=$(git describe --abbrev=0 origin/master | sed 's/v//')

    case ${MODE} in
        "personal")
            BPREFIX=pgo
            KERNEL=${HOME}/cbl/tc-build/kernel
            TAR_EXT=gz
            URL=https://git.kernel.org/torvalds/t
            ;;
        "release")
            BPREFIX=v${KVER}-pgo
            KERNEL=${HOME}/cbl/git/tc-build/kernel
            TAR_EXT=xz
            URL=https://cdn.kernel.org/pub/linux/kernel/v5.x
            ;;
    esac

    set -ex

    rm -f "${KERNEL}"/linux*
    for CONFIG in defconfig allyesconfig; do
        git checkout "${BPREFIX}"-${CONFIG} || continue
        case ${CONFIG} in
            defconfig) git rebase v"${KVER}" ;;
            allyesconfig) git rebase "${BPREFIX}"-defconfig ;;
        esac
        git format-patch --stdout v"${KVER}".."${BPREFIX}"-"${CONFIG}" >"${KERNEL}"/linux-"${KVER}"-"${CONFIG}".patch
    done

    TARBALL=linux-${KVER}.tar.${TAR_EXT}
    cd "${KERNEL}"
    gen_sha256sum "${URL}/${TARBALL}"

    sed -i "s/LINUX=.*/LINUX=linux-${KVER}/" "${KERNEL}"/build.sh
); }
# vi: filetype=zsh
