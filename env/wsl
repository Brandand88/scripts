# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2019-2020 Nathan Chancellor
#
# Utility and terminal setup functions for WSL

# Setup function for my Ubuntu WSL instance (from an LXC container, not Microsoft Store)
function rootstrap() { (
    [[ $(id -u) -eq 0 ]] || { printf '\n\033[01;31mThis function must be run as root!\033[0m\n\n' && exit 255; }

    while ((${#})); do
        case ${1} in
            -p | --password)
                shift
                PASSWORD=${1}
                ;;
            -u | --user)
                shift
                USER=${1}
                ;;
        esac
        shift
    done

    set -eux

    : "${USER}" "${PASSWORD}"

    # Some WSL specific tuning
    printf '[user]\ndefault = nathan\n' | tee /etc/wsl.conf

    # Always turn on '--no-install-recommends'
    apt-config dump | grep -we Recommends -e Suggests | sed 's/1/0/g' | tee /etc/apt/apt.conf.d/999norecommend

    # Update and install some necessary packages
    apt update
    apt upgrade -y
    apt install -y ca-certificates curl zsh

    # Create my user account
    if getent passwd "${USER}" &>/dev/null; then
        set +x
        printf '\n\033[01;33mNot creating user "%s" because they already exist!\033[0m\n\n' "${USER}"
    else
        useradd -m -G sudo -s /bin/zsh "${USER}"
        echo "${USER}:${PASSWORD}" | chpasswd
    fi

    set +eux

    printf '\n\033[01;34mDo not forget to run \n\n\t$ wsl.exe --terminate ubuntu\n\nso that /etc/wsl.conf changes reflect properly!\033[0m\n\n'
); }

# Setup function
#
# Requires Keys folder to be available in /mnt/c/Users/natec/Documents
function bootstrap() { (
    # Grab common functions/variables
    source <(curl -LSs https://github.com/nathanchance/scripts/raw/main/common) &>/dev/null

    # Do not run this as root
    [[ $(id -u) -eq 0 ]] && die "Do not run bootstrap as root"

    # Keys location
    KEYS=/mnt/c/Users/natec/Documents/Keys
    [[ -d ${KEYS} ]] || die "Keys are not available"

    # Install packages from Ubuntu repos
    sudo apt install -y \
        build-essential \
        bc \
        bison \
        cowsay \
        cpio \
        curl \
        devscripts \
        expect \
        flex \
        fortune \
        fortunes \
        gettext \
        git \
        git-email \
        gpg \
        htop \
        irssi \
        jq \
        libauthen-sasl-perl \
        libcurl4-openssl-dev \
        libelf-dev \
        libemail-valid-perl \
        libevent-dev \
        libexpat-dev \
        libglib2.0-dev \
        libgmp-dev \
        libio-socket-ssl-perl \
        libmailtools-perl \
        libmpc-dev \
        libmpfr-dev \
        libncurses-dev \
        libnet-smtp-ssl-perl \
        libpcre2-dev \
        libpixman-1-dev \
        libsasl2-modules \
        libssl-dev \
        lolcat \
        lsb-release \
        mosh \
        most \
        mutt \
        neofetch \
        pass \
        pkg-config \
        python-is-python3 \
        python3-pip \
        re2c \
        software-properties-common \
        ssh \
        texinfo \
        tmux \
        u-boot-tools \
        unzip \
        vim \
        wget \
        wslu \
        zlib1g-dev \
        zstd

    # Reinstall 'ping' to avoid issues with permissions
    sudo apt install -y --reinstall iputils-ping

    # Setup SSH and GPG if keys are present
    mkdir -p "${HOME}"/.ssh
    cp "${KEYS}"/id_ed25519{,.pub} "${HOME}"/.ssh
    chmod 600 "${HOME}"/.ssh/id_ed25519

    # Setup GPG
    if ! gpg_key_usable; then
        gpg --pinentry-mode loopback --import "${KEYS}"/{public*,private}.asc
        gpg --import-ownertrust "${KEYS}"/ownertrust*.asc
        printf 'default-cache-ttl 604800\nmax-cache-ttl 2419200\n' | tee "${HOME}"/.gnupg/gpg-agent.conf
        gpg-connect-agent reloadagent /bye
    fi

    # Clone scripts
    GITHUB=${HOME}/github
    mkdir -p "${GITHUB}"
    SCRIPTS=${GITHUB}/scripts
    [[ -d ${SCRIPTS} ]] || { git clone git@github.com:nathanchance/scripts "${SCRIPTS}" || die "Error cloning script"; }
    source <(cat "${SCRIPTS}"/env/common)
    source "${SCRIPTS}"/env/stubs/zsh && setup_zsh_env
    source "${SCRIPTS}"/env/stubs/setup && global_gitignore
    SCRIPTS_FOLDER=${SCRIPTS} rbld_usr
    path_push "${HOME}/usr/bin"
    source "${SCRIPTS}"/env/stubs/git && git_setup
    ln -fs "${SCRIPTS}"/configs/local/.tmux.conf "${HOME}"/.tmux.conf
    zsh "${SCRIPTS}"/configs/common/vim/vim_setup.sh
    decrypt_del_dog_api_key
    decrypt_gpg_file muttrc
    decrypt_serv_ip

    # Clone password store
    [[ -d ${HOME}/.password-store ]] || { git clone git@github.com:nathanchance/password-store.git "${HOME}"/.password-store || die "Error cloning password store"; }

    # Download website files
    for REPO in hugo-files nathanchance.github.io; do
        [[ -d ${GITHUB}/${REPO} ]] || git clone git@github.com:nathanchance/"${REPO}" "${GITHUB}/${REPO}"
    done
    git -C "${GITHUB}"/hugo-files submodule update --init --recursive
) && source "${HOME}"/.zshrc; }

# Rebuild ~/usr
function rbld_usr() { (
    source "${SCRIPTS_FOLDER:?}"/env/stubs/updbin || die "Cannot source updbin"
    rm -rf "${HOME:?}"/usr
    updbin || die "updbin failed"
    ib4 || die "ib4 failed"
    ihugo || die "ihugo failed"
    ipneofetch || die "ipneofetch failed"
    if [[ -d ${LLVM_TC_FOLDER} ]]; then
        # This will never not be alphanumeric and find is insanely convoluted
        # shellcheck disable=SC2012
        DATE=$(ls -1ht "${LLVM_TC_FOLDER}" | head -n1)
        [[ -n ${DATE} ]] && symlink_llvm "${DATE}"
    fi
); }

# Build tip of tree LLVM
function updllvm() { (
    DATE=$(date +%Y-%m-%d)

    LLVM_SRC=${HOME}/src/llvm-project
    mkdir -p "${LLVM_SRC%/*}"
    [[ -d ${LLVM_SRC} ]] || git clone https://github.com/llvm/llvm-project "${LLVM_SRC}"
    git -C "${LLVM_SRC}" pull || die "Error updating LLVM"

    mkdir -p "${LLVM_TC_FOLDER:?}"
    PREFIX=${LLVM_TC_FOLDER}/${DATE} bllvm -i &&
        symlink_llvm "${DATE}" &&
        ccache -Cz
); }

# Install and patch neofetch to work around 'uname -r' hijack
function ipneofetch() { (
    [[ -z ${NEOFETCH_VERSION} ]] && NEOFETCH_VERSION=$(glr dylanaraps/neofetch)
    NEOFETCH=${PREFIX:-${HOME}/usr}/bin/neofetch
    rm -rf "${NEOFETCH}"
    mkdir -p "${NEOFETCH%/*}"
    curl -LSso "${NEOFETCH}" https://github.com/dylanaraps/neofetch/raw/"${NEOFETCH_VERSION}"/neofetch
    chmod +x "${NEOFETCH}"
    sed -i "s/kernel_version=.*/kernel_version=\"\$(cat \/proc\/sys\/kernel\/osrelease)\"/g" "${NEOFETCH}"
); }

# Laptop specific aliases
function wsl_aliases() {
    # Account for VS Code Insiders having a different binary name
    # But only overwrite code if it does not already exist
    (! type -f code && type -f code-insiders) &>/dev/null && alias code='code-insiders'
    alias ls='ls --color=auto'
}

function mshpi() { (
    mosh pi@192.168.4.104
); }

function mshsvr() { (
    mosh nathan@"${SERVER_IP:?}"
); }

# Laptop specific setup
function wsl_setup() {
    LLVM_TC_FOLDER=${HOME}/toolchains/llvm
    mkdir -p "${LLVM_TC_FOLDER}"
    export LLVM_TC_FOLDER

    # Load the stock completions to make sure we don't miss out on anything
    echo "${fpath[*]}" | grep -q -s "vendor-completions" || fpath=("${fpath[@]}" /usr/share/zsh/vendor-completions)
    compinit

    # Setup ccache
    setup_ccache 25
}

# Update WSL kernel from server
function upd_kernel() { (
    while ((${#})); do
        case ${1} in
            -g | --github) KERNEL_LOCATION=github ;;
            -l | --local) KERNEL_LOCATION=local ;;
            -s | --server) KERNEL_LOCATION=server ;;
            -k | --kernel-prefix) shift && KERNEL_SUFFIX=${1} ;;
        esac
        shift
    done

    set -x

    KERNEL=/mnt/c/Users/natec/Linux/kernel${KERNEL_SUFFIX}
    rm -r "${KERNEL}"

    case ${KERNEL_LOCATION:-github} in
        local)
            cp -v "${HOME}"/src/wsl2-kernel/out/x86_64/arch/x86/boot/bzImage "${KERNEL}"
            ;;
        github)
            REPO=nathanchance/WSL2-Linux-Kernel
            curl -LSso "${KERNEL}" https://github.com/"${REPO}"/releases/download/"$(glr "${REPO}")"/bzImage
            ;;
        server)
            SRC_FOLDER=${HOME}/cbl/kernels/wsl2
            OUT_FOLDER=out/x86_64
            KERNEL_IMAGE=arch/x86/boot/bzImage
            scp nathan@"${SERVER_IP:?}":"${SRC_FOLDER}"/${OUT_FOLDER}/${KERNEL_IMAGE} "${KERNEL}"
            ;;
    esac
); }

# Install rust using the recommended command
function install_rust_wsl() { (
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
); }

# Shortcut for properly running 'hugo server' in WSL 2
function hugo_serve() { (
    IP=$(ip addr | grep eth0 | grep inet | awk '{print $2}')
    hugo server --baseUrl="${IP%/*}" --bind=0.0.0.0
); }

# Update wsl2-kernel to latest -next
function rbwk() { (
    WSL2_KERNEL=${HOME}/src/wsl2-kernel

    set -x
    cd "${WSL2_KERNEL}"
    git ru || exit ${?}
    for BRANCH in clearlinux-patchset microsoft-patchset; do
        git ch "${BRANCH}" || exit ${?}
        git rb -i next/master || exit ${?}
    done
    git ch next || exit ${?}
    git rh next/master
    git pll --no-edit mainline master || exit ${?}
    if ! git pll --no-edit sami tip/clang-cfi; then
        rg "<<<<<<< HEAD" && exit ${?}
        git aa
        git c || exit ${?}
    fi
    git ml --no-edit clearlinux-patchset microsoft-patchset || exit ${?}
    git cp "$(git lo --merges -1 --format=%H origin/HEAD)".."$(git sh -s --format=%H origin/HEAD)"
); }
# vi: filetype=zsh
