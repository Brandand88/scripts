# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2019 Nathan Chancellor
#
# Utility and terminal setup functions for WSL


# Setup function
#
# Requires Keys folder to be available in /mnt/c/Users/natec/Documents
#
# $ sudo sh -c 'apt update && apt install -y --no-install-recommends ca-certificates curl zsh && chsh -s /bin/zsh nathan'
function bootstrap() {(
    # Grab common functions/variables
    source <(curl -LSs https://github.com/nathanchance/scripts/raw/master/common) &>/dev/null

    # Keys location
    KEYS=/mnt/c/Users/natec/Documents/Keys
    [[ -d ${KEYS} ]] || die "Keys are not available"

    # Convert to Debian unstable
    sudo sed -i 's/^/# /' /etc/apt/sources.list
    echo "deb http://deb.debian.org/debian unstable main" | sudo tee -a /etc/apt/sources.list
    sudo apt update
    sudo apt dist-upgrade -y

    # Install packages from Debian repos
    sudo apt install -y --no-install-recommends \
        build-essential \
        bc \
        bison \
        cowsay \
        curl \
        devscripts \
        flex \
        fortune \
        fortunes \
        gettext \
        git \
        git-email \
        gpg \
        irssi \
        jq \
        libcurl4-openssl-dev \
        libevent-dev \
        libexpat-dev \
        libncurses-dev \
        libpcre2-dev \
        libsasl2-modules \
        libssl-dev \
        lolcat \
        lsb-release \
        mosh \
        most \
        mutt \
        pass \
        python-pip \
        software-properties-common \
        ssh \
        tmux \
        unzip \
        vim \
        wget \
        zlib1g-dev

    # Install speedtest-cli
    sudo curl -LSo /usr/local/bin/speedtest-cli https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py
    sudo chmod +x /usr/local/bin/speedtest-cli

    # Install latest version of LLVM/Clang
    LLVM_SCRIPT=$(mktemp --suffix=.sh) && \
    chmod +x ${LLVM_SCRIPT} && \
    curl -LSso "${LLVM_SCRIPT}" https://apt.llvm.org/llvm.sh && \
    sudo "${LLVM_SCRIPT}" 10 && \
    rm "${LLVM_SCRIPT}"

    # Setup SSH and GPG if keys are present
    mkdir -p "${HOME}"/.ssh
    cp "${KEYS}"/id_ed25519{,.pub} "${HOME}"/.ssh
    chmod 600 "${HOME}"/.ssh/id_ed25519

    # Setup GPG
    gpg --pinentry-mode loopback --import "${KEYS}"/{public*,private*}.asc
    gpg --import-ownertrust "${KEYS}"/ownertrust*.asc
    {
        echo "default-cache-ttl 3600"
        echo "max-cache-ttl 86400"
    } > "${HOME}"/.gnupg/gpg-agent.conf
    gpg-connect-agent reloadagent /bye

    # Clone scripts
    GITHUB=${HOME}/github
    mkdir -p "${GITHUB}"
    local SCRIPTS; SCRIPTS=${GITHUB}/scripts
    git clone git@github.com:nathanchance/scripts "${SCRIPTS}" || die "Error cloning script"
    source "${SCRIPTS}"/env/setup && global_gitignore && create_zshrc
    source "${SCRIPTS}"/funcs/bldupdbin && {
        bldupdbin || die "bldupdbin failed";
        ihugo || die "ihugo failed";
    }
    path_push "${HOME}/usr/bin"
    source "${SCRIPTS}"/funcs/git && git_setup
    source "${SCRIPTS}"/funcs/pure && pure_prompt
    ln -fs "${SCRIPTS}"/configs/local/.tmux.conf "${HOME}"/.tmux.conf
    zsh "${SCRIPTS}"/configs/common/vim/vim_setup.sh
    decrypt_del_dog_api_key
    decrypt_gpg_file muttrc
    decrypt_serv_ip

    # Clone password store
    git clone git@github.com:nathanchance/password-store.git "${HOME}"/.password-store || die "Error cloning password store"

    # Download website files
    for REPO in hugo-files nathanchance.github.io; do
        git clone git@github.com:nathanchance/"${REPO}" "${GITHUB}/${REPO}"
    done
    git -C "${GITHUB}"/hugo-files submodule update --init --recursive
) && source "${HOME}"/.zshrc; }


# Update function
function upd() {
    sudo sh -c 'apt update && apt upgrade'
}


# Laptop specific aliases
function wsl_aliases() {
    # Debian sid has bat as batcat
    ( ! type -f bat && type -f batcat ) &>/dev/null && alias bat='batcat'
    # Account for VS Code Insiders having a different binary name
    # But only overwrite code if it does not already exist
    ( ! type -f code && type -f code-insiders ) &>/dev/null && alias code='code-insiders'
    alias ls='ls --color=auto'
    alias mshsvr='mosh nathan@${SERVER_IP}'
}


# Laptop specific setup
function wsl_setup() {
    # Load the stock completions to make sure we don't miss out on anything
    echo "$fpath" | grep -q -s "vendor-completions" || fpath=( $fpath /usr/share/zsh/vendor-completions )
    compinit
}


# Update WSL kernel from server
function upd_wsl_kernel() {(
    KERNEL=/mnt/c/Users/natec/Linux/kernel-${1:-next}-${2:-clang}
    rm -rf "${KERNEL}"
    SRC_FOLDER=${HOME}/cbl/wsl2
    OUT_FOLDER=out/x86_64
    KERNEL_IMAGE=arch/x86/boot/bzImage
    scp nathan@${SERVER_IP:?}:${SRC_FOLDER}/${OUT_FOLDER}/${KERNEL_IMAGE} "${KERNEL}"
)}


# Sync the Windows Terminal config to my scripts folder
function upd_terminal_config() {(
    cp -v "$(wslpath -a "C:\Users\natec\AppData\Local\Packages\Microsoft.WindowsTerminal_8wekyb3d8bbwe\LocalState\profiles.json")" "${SCRIPTS_FOLDER:?}"/configs/local
)}


# Install rust using the recommended command
function install_rust_wsl() {(
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
)}
# vi: filetype=zsh
