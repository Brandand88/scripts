#!/usr/bin/env bash
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2017-2019 Nathan Chancellor
#
# Utility and terminal setup functions (usually for .bashrc)


# Source our universal functions script
source "$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" || return; pwd)/../common"


# Source the machine specific functions
case "$(whoami)@$(uname -n)" in
    "chronos@localhost") LOCATION=crosh ;;
    "natechancellor@penguin") LOCATION=crostini ;;
    "nathan@archlinux-ryzen"|"nathan@flashbox") LOCATION=server ;;
    "pi@raspberrypi") LOCATION=pi ;;
esac
source "${SCRIPTS_FOLDER}/env/${LOCATION}"


# Universal aliases/functions
function aliases() {
    # tmux alias
    command -v tmux &>/dev/null && alias tmux='tmux -u'

    source "${SCRIPTS_FOLDER}/funcs/deldog"
    source "${SCRIPTS_FOLDER}/funcs/git"
    source "${SCRIPTS_FOLDER}/funcs/transfer"
}


# Try to attach via tmux
function tmxa() {
    command -v tmux &>/dev/null || return
    [[ -z ${TMUX} ]] && tmux new-session -AD -s main
}


# Add something to the end of PATH if it isn't already there
function add_to_path_post() {
    [[ ! -d ${1} ]] && return
    [[ -z $(echo "${PATH}" | rg -s --color=never "${1}") ]] && export PATH="${PATH}:${1}"
}


# Add something to the beginning of PATH if it isn't already there
function add_to_path_pre() {
    [[ ! -d ${1} ]] && return
    [[ -z $(echo "${PATH}" | rg -s --color=never "${1}") ]] && export PATH="${1}:${PATH}"
}
# Easy alias
function path_push() { add_to_path_pre "${@}"; }


# Delete the first folder in PATH
function path_pop() {
    export PATH=${PATH#*:}
}


function bash_setup() {
    shopt -s checkwinsize
    aliases
    "${LOCATION}"_aliases
    tmxa
    "${LOCATION}"_setup
    GPG_TTY=$(tty); export GPG_TTY
}


# bashrc reload function
function rld() {
    source "${SCRIPTS_FOLDER}/env/common"
    bash_setup
}


# Don't kill tmux sessions when one pane exists
# https://arslan.io/2019/01/07/using-the-ipad-pro-as-my-development-machine/
function exit() {
    if [[ -z ${TMUX} ]]; then
        builtin exit
        return
    fi

    PANES=$(tmux list-panes | wc -l)
    WINS=$(tmux list-windows | wc -l)
    COUNT=$((PANES + WINS - 1))
    if [[ ${COUNT} -eq 1 ]]; then
        tmux detach
    else
        builtin exit
    fi
}
