# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2017-2020 Nathan Chancellor
#
# Utility and terminal setup functions for my remote workstation

# Setup workstation function
#
# Assumes the following things have been done:
#
# Hetzner:
#   1. The workstation has had its OS installed (if using Hetzner)
#
#      $ installimage -r yes -l 0 -f yes -n archlinux-<suffix>
#
#   2. My user account has been created
#
#      $ pacman -S zsh
#      $ useradd -m -G wheel -s /bin/zsh nathan
#      $ passwd
#      $ passwd nathan
#
#   3. sudo is installed and configured
#
#      $ pacman -S sudo
#      $ EDITOR=vim visudo
#
#      nathan ALL=(ALL) NOPASSWD:ALL
#
#   4. Keys to be installed are available at /tmp/keys
#
#      $ ssh-copy-id nathan@<ip>
#      $ ssh nathan@<ip> mkdir /tmp/keys
#      $ scp {id_ed25519,*.asc} nathan<ip>:/tmp/keys
#
# Packet:
#   1. User account and partitions have been created using user-data
#
function bootstrap() { (
    # Super debug :)
    set -x

    # Grab common variables
    source <(curl -LSs https://github.com/nathanchance/scripts/raw/master/env/stubs/folders) &>/dev/null || return 1
    # Grab common functions
    source <(curl -LSs https://github.com/nathanchance/scripts/raw/master/common) &>/dev/null || return 1

    SCRIPTS=${GITHUB_FOLDER}/scripts

    # Setup folders that will be used
    mkdir -p "${ALS}" \
        "${ANDROID_TC_FOLDER}" \
        "${CBL}"/{android,git,mirrors} \
        "${GITHUB_FOLDER}" \
        "${HOME}"/usr/bin \
        "${KERNEL_FOLDER}"/sony \
        "${SRC_FOLDER}" || die "Can't create folders, wtf"

    # Get distro we are on
    DISTRO=$(get_distro)

    # Set the correct time
    sudo timedatectl set-timezone America/Phoenix

    if [[ ${DISTRO} = "arch" ]]; then
        # Enable multilib
        sudo sed -i "/\[multilib\]/,/Include/"'s/^#//' /etc/pacman.conf

        # Custom makepkg config
        sudo sed -i "s/#MAKEFLAGS=\"-j2\"/MAKEFLAGS=\"-j$(nproc --all)\"/g" /etc/makepkg.conf
        sudo sed -i 's/!ccache/ccache/g' /etc/makepkg.conf

        # Install required binaries
        sudo pacman -Syyu --noconfirm || die "Error updating packages!"
        sudo pacman -S --needed --noconfirm \
            aarch64-linux-gnu-gcc \
            asciidoc \
            base-devel \
            bat \
            bc \
            ca-certificates \
            clang \
            ccache \
            cmake \
            cpio \
            doxygen \
            dtc \
            expect \
            fd \
            gcc-multilib \
            git \
            htop \
            hugo \
            iputils \
            jq \
            linux-zen \
            linux-zen-headers \
            lld \
            llvm \
            mosh \
            most \
            multilib-devel \
            mutt \
            neofetch \
            ninja \
            openssl \
            pacman-contrib \
            perl-authen-sasl \
            perl-mime-tools \
            perl-net-smtp-ssl \
            podman \
            python \
            python-pip \
            python-psutil \
            qemu-headless-arch-extra \
            ripgrep \
            swig \
            tmux \
            uboot-tools \
            unzip \
            wget \
            xmlto || die "Error installing packages!"
        sudo pacman -R --noconfirm linux
        sudo grub-mkconfig -o /boot/grub/grub.cfg

        # Configure podman
        echo "kernel.unprivileged_userns_clone=1" | sudo tee /etc/sysctl.d/unprivileged_userns_clone.conf
        echo "$(whoami):100000:65536" | sudo tee /etc/subgid /etc/subuid
        echo "session    optional   pam_cgfs.so          -c freezer,memory,name=systemd,unified" | sudo tee -a /etc/pam.d/system-login

        # Build folder size
        BFS=20
    elif [[ ${DISTRO} = "ubuntu" ]]; then
        PACKAGES=(
            abootimg
            bison
            bsdtar
            build-essential
            ca-certificates
            cdbs
            clang
            cmake
            config-package-dev
            creduce
            curl
            debhelper
            devscripts
            doxygen
            expect
            fakeroot
            file
            flex
            gcc
            gcc-multilib
            gettext
            git
            g++
            irssi
            libauthen-sasl-perl
            libcurl4-openssl-dev
            libedit-dev
            libelf-dev
            libemail-valid-perl
            libevent-dev
            libexpat1-dev
            libglib2.0-dev
            libgmp-dev
            libio-socket-ssl-perl
            liblz4-tool
            libmailtools-perl
            libmpc-dev
            libmpfr-dev
            libncurses-dev
            libnet-smtp-ssl-perl
            libpcre2-dev
            libpixman-1-dev
            libssl-dev
            llvm
            lld
            locales
            make
            mosh
            most
            mutt
            neofetch
            ninja-build
            pkg-config
            podman
            psmisc
            python3
            python3-dev
            python3-pip
            python3-setuptools
            re2c
            slirp4netns
            sudo
            swig
            texinfo
            tcl
            tmux
            u-boot-tools
            uidmap
            unzip
            vim
            zip
            zlib1g-dev
            zsh
            zstd
        )

        sudo_wrapper add-apt-repository ppa:projectatomic/ppa || exit ${?}
        sudo_wrapper apt update || exit ${?}
        sudo_wrapper DEBIAN_FRONTEND=noninteractive apt upgrade -y || exit ${?}
        sudo_wrapper DEBIAN_FRONTEND=noninteractive apt install -y "${PACKAGES[@]}" || exit ${?}
        echo "locales locales/default_environment_locale select en_US.UTF-8" | sudo_wrapper debconf-set-selections
        echo "locales locales/locales_to_be_generated multiselect en_US.UTF-8 UTF-8" | sudo_wrapper debconf-set-selections
        sudo_wrapper rm "/etc/locale.gen"
        sudo_wrapper dpkg-reconfigure --frontend noninteractive locales

        # Rootless podman
        echo "$(whoami):100000:65536" | sudo_wrapper tee /etc/subgid /etc/subuid
        sudo_wrapper curl -LSso /etc/containers/registries.conf 'https://git.archlinux.org/svntogit/community.git/plain/trunk/registries.conf?h=packages/skopeo'

        # Build folder size
        BFS=60
    else
        die "Unknown or unsupported distro"
    fi

    # Setup build folder
    if ! grep -q "${BLDF}" /etc/fstab; then
        printf 'tmpfs\t%s\ttmpfs\tnodev,nosuid,uid=%s,gid=%s,size=%dG\t0\t0' "${BLDF}" "$(whoami)" "$(whoami)" "${BFS}" | sudo_wrapper tee -a /etc/fstab
        sudo_wrapper sed -i '/^$/d' /etc/fstab
        sudo_wrapper mkdir -p "${BLDF}"
        sudo_wrapper mount -a
    fi

    # Setup keys
    KEYS=/tmp/keys
    [[ -f ${HOME}/.ssh/id_ed25519 ]] || INSTALL_SSH_KEY=true
    gpg_key_usable || INSTALL_GPG_KEY=true
    if [[ ${INSTALL_SSH_KEY:=false} = "true" || ${INSTALL_GPG_KEY:=false} = "true" ]]; then
        [[ -d ${KEYS} ]] || { git clone https://github.com/nathanchance/keys "${KEYS}" || die "Error downloading keys"; }
        if ${INSTALL_SSH_KEY}; then
            mv "${KEYS}"/id_ed25519{,.pub} "${HOME}"/.ssh
            chmod 600 "${HOME}"/.ssh/id_ed25519
        fi
        if ${INSTALL_GPG_KEY}; then
            gpg --pinentry-mode loopback --import "${KEYS}"/{public*,private*}.asc || die "Error installing gpg keys"
            gpg --import-ownertrust "${KEYS}"/ownertrust*.asc || die "Error installing gpg ownertrust"
            printf 'default-cache-ttl 604800\nmax-cache-ttl 2419200\n' | tee -a "${HOME}"/.gnupg/gpg-agent.conf
            gpg-connect-agent reloadagent /bye
        fi
        rm -rf "${KEYS}"
    fi
    # Ensure GPG passphrase is cached for the rest of the run
    echo "test" | gpg --clearsign

    # Install yay and AUR packages
    if [[ ${DISTRO} = "arch" ]]; then
        cd "${TMP_BLD_FOLDER:=$(mktemp -d)}" || die "wtf"
        curl -LSso PKGBUILD "https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=yay"
        makepkg --noconfirm -si || die "Error installing yay"
        curl -LSso "${TMP_GPG:=$(mktemp)}" https://invisible-island.net/public/dickey-invisible-island.txt || die "Could not download GPG key"
        gpg --import "${TMP_GPG}" || die "Could not import GPG key"
        yay -S --noconfirm --needed ncurses5-compat-libs || die "Error building AUR packages"
        yay -S --noconfirm --needed creduce-git
    fi

    # Download repos
    [[ -d ${SCRIPTS} ]] || { git clone git@github.com:nathanchance/scripts "${SCRIPTS}" || die "Error cloning scripts"; }
    git -C "${SCRIPTS}" pull
    source "${SCRIPTS}"/env/stubs/zsh && setup_zsh_env
    source "${SCRIPTS}"/env/stubs/setup && global_gitignore
    source "${SCRIPTS}"/env/stubs/updbin
    SCRIPTS_FOLDER=${SCRIPTS} rbld_usr || exit ${?}
    path_push "${HOME}/usr/bin"
    source "${SCRIPTS}"/env/stubs/git && git_setup
    zsh "${SCRIPTS}"/configs/common/vim/vim_setup.sh
    ln -fs "${SCRIPTS}"/configs/workstation/.tmux.conf "${HOME}"/.tmux.conf
    decrypt_gpg_file botinfo
    decrypt_del_dog_api_key
    decrypt_gpg_file muttrc
    for REPO in chromeos-adb-fastboot hugo-files nathanchance.github.io patches; do
        [[ -d ${GITHUB_FOLDER}/${REPO} ]] || { git -C "${GITHUB_FOLDER}" clone git@github.com:nathanchance/"${REPO}" || die "Error cloning ${REPO}!"; }
    done
    [[ -d ${ALS}/sp ]] || { git -C "${ALS}" clone git@github.com:nathanchance/stable-patches sp || die "Error cloning stable-patches!"; }
    [[ -d ${SRC_FOLDER}/android-wireguard-module-builder ]] || git -C "${SRC_FOLDER}" clone git@github.com:WireGuard/android-wireguard-module-builder.git

    # Download toolchains
    [[ -d ${ANDROID_TC_FOLDER}/clang-master ]] || tmux new-window zsh -c "git -C ${ANDROID_TC_FOLDER} clone --single-branch https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/ clang-master"
    [[ -d ${ANDROID_TC_FOLDER}/gcc-arm ]] || git -C "${ANDROID_TC_FOLDER}" clone --depth=1 -b android-9.0.0_r1 --single-branch https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/arm/arm-linux-androideabi-4.9/ gcc-arm
    [[ -d ${ANDROID_TC_FOLDER}/gcc-arm64 ]] || git -C "${ANDROID_TC_FOLDER}" clone --depth=1 -b android-9.0.0_r1 --single-branch https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9/ gcc-arm64
    for VERSION in clang-4691093:android-9.0.0_r1 clang-r353983c:android-10.0.0_r1; do
        BRANCH=${VERSION#*:}
        VERSION=${VERSION%:*}
        [[ -d ${ANDROID_TC_FOLDER}/${VERSION} ]] && continue
        mkdir -pv "${ANDROID_TC_FOLDER}/${VERSION}"
        curl -LSs https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/${BRANCH}/${VERSION}.tar.gz | tar -C "${ANDROID_TC_FOLDER}/${VERSION}" -xzf - || display_error "Error downloading ${VERSION}!"
    done
    [[ -d ${ANDROID_TC_FOLDER}/sd-llvm-6.0.2 ]] || git -C "${ANDROID_TC_FOLDER}" clone https://github.com/ThankYouMario/proprietary_vendor_qcom_sdclang-6.0_linux-x86 sd-llvm-6.0.2

    # Grab linux, linux-next, and linux-stable for CBL
    for REPO in linux linux-next linux-stable; do
        tmux new-window zsh -c "source ${SCRIPTS}/env/stubs/setup && cbl_linux_repos ${REPO}"
    done

    # Download other CBL things
    tmux new-window zsh -c "source ${SCRIPTS}/env/stubs/setup && cbl_other_repos"

    # Clone sonyxperiadev/kernel
    [[ -d ${KERNEL_FOLDER}/sony/kernel ]] || git -C "${KERNEL_FOLDER}/sony" clone git://github.com/sonyxperiadev/kernel

    # Use new GPG keyserver
    grep -q keyserver "${HOME}/.gnupg/dirmngr.conf" || echo "keyserver hkps://keys.openpgp.org" | tee -a "${HOME}"/.gnupg/dirmngr.conf

    # Reminder of things to do
    set +x
    echo
    echo
    echo "Things still to do!"
    echo
    echo "1. EDITOR=vim crontab -e"
    echo
    echo "2. sudo systemctl reboot"
    echo
) || return 1; }

# Rebuild ~/usr
function rbld_usr() { (
    source "${SCRIPTS_FOLDER:?}"/env/stubs/updbin || die "Cannot source updbin"
    rm -rf "${HOME:?}"/usr
    case "$(get_distro)" in
        arch) bgit || die "Error building git" ;;
        ubuntu)
            updbin || die "Error installing updated binaries"
            bcttlfshtools || die "Error installing Cuttlefish host package"
            bdtc || die "Error building dtc"
            bqemu || die "Error building QEMU"
            install_android_tools || die "Error installing Android tools"
            iub4 || die "Error installing b4"
            if [[ -d ${LLVM_TC_FOLDER} ]]; then
                # This will never not be alphanumeric and find is insanely convoluted
                # shellcheck disable=SC2012
                DATE=$(ls -1ht "${LLVM_TC_FOLDER}" | head -n1)
                [[ -n ${DATE} ]] && symlink_llvm "${DATE}"
            fi
            ;;
    esac
); }

# Workstation specific aliases
function workstation_aliases() {
    # default Arch ls alias
    alias ls='ls --color=auto'

    # Generate a kernel version for the current tree
    alias kver='make -s kernelversion'

    # Alias for merge-stable script
    alias ms='merge-stable'
}

# Setup ccache
# ccache_setup <size>
function ccache_setup() {
    if [[ -f ${CCACHE} ]]; then
        if [[ -n ${1} ]]; then
            ccache -M "${1}"G &>/dev/null
            ccache --set-config=compression=true
            ccache --set-config=compression_level=9
            export USE_CCACHE=1
            add_to_path_pre "/usr/lib/ccache/bin"
        else
            display_error "Please specify ccache size!"
        fi
    else
        display_error "Please install ccache!"
    fi
}

# Clean build folder
function cbf() { (
    case "${1}" in
        b) FTC=${BBF:?} ;;
        l) FTC=${LBF:?} ;;
        k) FTC=${KBF:?} ;;
        *) FTC=${BLDF} ;;
    esac
    find "${FTC:?}" -mindepth 1 -delete 2>/dev/null
    type crbf &>/dev/null && crbf
); }

# Additional setup steps for my workstation
function workstation_setup() {
    add_to_path_pre "${SCRIPTS_FOLDER}/workstation"
    move_to_front_of_path "${HOME}/.local/bin"
    move_to_front_of_path "${HOME}/usr/bin"
    ccache_setup 50
    source "${SCRIPTS_FOLDER}"/env/stubs/folders
    source "${SCRIPTS_FOLDER}"/env/stubs/cbl
    source "${SCRIPTS_FOLDER}"/env/stubs/bk
    source "${SCRIPTS_FOLDER}"/env/stubs/bldgcc
    load_botinfo
    type crbf &>/dev/null && crbf
    (gpg_key_cached)
}

# Update all remotes and run git gc/prune
function clean-kernels() { (
    for REPO in "${ALS}"/* "${CBL}"/linux*; do
        header "${REPO}"
        if cd "${REPO}"; then
            git fetch --all
            git reflog expire --all --expire=now
            git gc --aggressive --prune=now --force
        else
            display_error "$(basename "${REPO}") doesn't exist!"
        fi
    done
); }

# Function to incrementally patch a kernel with stable
function stable-patch() { (
    CURRENT_VERSION=$(kver)
    TARGET_PATCH_LEVEL=$((${CURRENT_VERSION##*.} + 1))

    URL=https://cdn.kernel.org/pub/linux/kernel/v4.x/incr/patch-"${CURRENT_VERSION}"-"${TARGET_PATCH_LEVEL}".xz

    MESSAGE="treewide: Linux ${CURRENT_VERSION%.*}.${TARGET_PATCH_LEVEL}

source kernel.org
${URL}"

    if curl "${URL}" | xz -cd | git ap "${@}"; then
        git ac -m "${MESSAGE}"
    else
        echo
        echo
        echo "git ac -m \"${MESSAGE}\""
        echo
        echo
    fi
); }

# Symlink the generic-commands file to all of the android-linux-stable trees for a particular kernel version
function symlink-commands() { (
    case ${1} in
        3.18) FILES=("marlin" "msm-3.18" "op3-8.0.0" "tissot") ;;
        4.4) FILES=("msm-4.4" "nash-lineage-17.1" "op5-lineage-17.1" "op5-P_9.0" "op5-P_9.0_Beta" "wahoo") ;;
        4.9) FILES=("bluecross" "msm-4.9" "op6-Q_10.0") ;;
        4.14) FILES=("msm-4.14") ;;
    esac

    for FILE in "${FILES[@]}"; do
        ln -sf generic-commands "${FILE}-commands"
    done
); }

# Alias for running PGO LLVM build
function updpgollvm() { (
    DATE=$(date +%Y-%m-%d)
    PREFIX=${LLVM_TC_FOLDER}/${DATE} bpgollvm &&
        symlink_llvm "${DATE}" &&
        ccache_clear llvm
); }

# Symlink an LLVM toolchain into ${HOME}/usr
function symlink_llvm() { (
    header "Removing symlinks"
    for FILE in $(fd -t l . "${HOME}"/usr); do
        [[ $(readlink -f "${FILE}") =~ toolchains/llvm ]] && rm -vrf "${FILE}"
    done

    header "Removing empty directories"
    while true; do
        OUTPUT=$(fd -t e . "${HOME}"/usr -x rm -vrf)
        if [[ -n ${OUTPUT} ]]; then
            echo "${OUTPUT}"
        else
            break
        fi
    done

    header "Symlinking LLVM"
    cp -frsv "${LLVM_TC_FOLDER}/${1:?}"/* "${HOME}"/usr
); }

# Qualify new LLVM revision
function qualify_llvm_uprev() { (
    bllvm --bootstrap || exit ${?}
    bllvm
); }

# Generate ALS conflict lists
function genalscnflcts() { (
    for FILE in $(git cf); do
        printf '"%s:%d"\n' "${FILE}" "$(git lo "${1:?}"..MERGE_HEAD "${FILE}" | wc -l)"
    done
); }
# vi: filetype=zsh
