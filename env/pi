# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2019-2020 Nathan Chancellor
#
# Raspberry Pi environment script
#
# $ sudo sh -c "apt update && apt install --no-install-recommends -y zsh && chsh -s /bin/zsh pi"

function bootstrap() { (
    source <(curl -LSs https://github.com/nathanchance/scripts/raw/master/common) &>/dev/null || return 1

    # Get list of packages to be installed
    # Debian/Ubuntu
    PACKAGES=(
        bison
        build-essential
        ca-certificates
        clang
        clang-format
        cmake
        creduce
        curl
        devscripts
        doxygen
        expect
        fakeroot
        file
        flex
        gcc
        gettext
        git
        g++
        jq
        libauthen-sasl-perl
        libclang-dev
        libcurl4-openssl-dev
        libedit-dev
        libelf-dev
        libemail-valid-perl
        libevent-dev
        libexpat1-dev
        libglib2.0-dev
        libgmp-dev
        libio-socket-ssl-perl
        libmailtools-perl
        libmpc-dev
        libmpfr-dev
        libncurses-dev
        libnet-smtp-ssl-perl
        libpcre2-dev
        libpixman-1-dev
        libssl-dev
        lld
        llvm
        llvm-dev
        locales
        make
        mosh
        most
        neofetch
        ninja-build
        pkg-config
        psmisc
        python2.7
        python3
        python3-dev
        python3-pip
        ruby-dev
        swig
        texinfo
        tcl
        tmux
        u-boot-tools
        unifdef
        unzip
        vim
        zip
        zlib1g-dev
        zsh
        zstd
    )

    # If we are root, install sudo so that we don't need a separate set of
    # commands whether we are root or a regular user
    if [[ $(id -u) -eq 0 ]]; then
        apt update || exit ${?}
        apt install -y sudo || exit ${?}
    fi

    sudo apt update || exit ${?}
    sudo DEBIAN_FRONTEND=noninteractive apt upgrade -y || exit ${?}
    sudo DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends -y "${PACKAGES[@]}" || exit ${?}
    sudo DEBIAN_FRONTEND=noninteractive apt install --no-install-recommends -y python-is-python3 2>/dev/null
    echo "locales locales/default_environment_locale select en_US.UTF-8" | sudo debconf-set-selections
    echo "locales locales/locales_to_be_generated multiselect en_US.UTF-8 UTF-8" | sudo debconf-set-selections
    sudo rm "/etc/locale.gen"
    sudo dpkg-reconfigure --frontend noninteractive locales
    grep -q configs /etc/modules || printf 'configs\nsnd_bcm2835\n' | sudo tee -a /etc/modules

    SCRIPTS=${HOME}/github/scripts
    mkdir -p "${SCRIPTS%/*}"
    [[ -d ${SCRIPTS} ]] || { git clone https://github.com/nathanchance/scripts "${SCRIPTS}" || die "Error cloning scripts!"; }
    git -C "${SCRIPTS}" pull --rebase || die "Error updating script!"
    source <(cat "${SCRIPTS}"/env/common)
    source "${SCRIPTS}"/env/stubs/zsh && setup_zsh_env
    source "${SCRIPTS}"/env/stubs/setup && global_gitignore
    SCRIPTS_FOLDER=${SCRIPTS} rbld_usr || exit ${?}
    path_push "${HOME}/usr/bin"
    source "${SCRIPTS}"/env/stubs/git && git_setup
    zsh "${SCRIPTS}"/configs/common/vim/vim_setup.sh
    ln -fs "${SCRIPTS}"/configs/workstation/.tmux.conf "${HOME}"/.tmux.conf

    echo "TODO:"
    echo
    echo "1. ssh-copy-id"
    echo
    echo "2. Download .server_ip"
); }

function rbld_usr() { (
    source "${SCRIPTS_FOLDER:?}"/env/stubs/updbin || die "Cannot source updbin"
    rm -rf "${HOME:?}"/usr
    bgit || die "Error building/installing git"
    bisharkdp all || die "Error building a sharkdp/installing binary"
    btmux || die "Error building/installing tmux"
    bzsh || die "Error building/installing zsh"
); }

function pi_aliases() {
    alias ls='ls --color=auto'
}

function pi_setup() { true; }

# Update kernel from build server
function upd_kernel() { (
    while ((${#})); do
        case ${1} in
            4.19 | 5.4 | 5.7 | mainline) VER=${1} ;;
            arm | arm64) ARCH=${1} ;;
        esac
        shift
    done

    TMP_BOOT=$(mktemp -d)
    MAIN_BOOT=/boot/custom-${VER:=5.4}-${ARCH:=arm64}

    mkdir -p "${TMP_BOOT}"/modules

    case ${ARCH} in
        arm)
            DTBS=/
            KERNEL=zImage
            ;;
        arm64)
            DTBS=broadcom/
            KERNEL=Image
            ;;
    esac

    USER=nathan
    OUT=/home/${USER}/cbl/kernels/rpi/out/${ARCH}
    ROOTFS=${OUT}/rootfs
    { rsync -v ${USER}@"${SERVER_IP}":"${ROOTFS}"/"${DTBS}"'*.dtb' "${TMP_BOOT}" &&
        rsync -vr ${USER}@"${SERVER_IP}":"${ROOTFS}"/lib/modules/'*' "${TMP_BOOT}"/modules &&
        rsync -v ${USER}@"${SERVER_IP}":"${OUT}"/arch/"${ARCH}"/boot/"${KERNEL}" "${TMP_BOOT}"; } || exit ${?}

    if [[ ${VER} != mainline ]]; then
        mkdir -p "${TMP_BOOT}"/overlays
        rsync -v ${USER}@"${SERVER_IP}":"${ROOTFS}"/overlays/'*.dtb*' "${TMP_BOOT}"/overlays || exit ${?}
    fi

    # Move modules
    MOD_DIR=$(fd -d 1 . "${TMP_BOOT}"/modules)
    : "${MOD_DIR:?}"
    sudo rm -vrf /lib/modules/"${MOD_DIR##*/}"
    sudo mv -v "${MOD_DIR}" /lib/modules
    sudo rmdir -v "${TMP_BOOT}"/modules

    # Move all other files
    sudo rm -vrf "${MAIN_BOOT}"
    sudo mv -v "${TMP_BOOT}" "${MAIN_BOOT}"

    # Copy cmdline.txt because we are modifying os_prefix
    sudo cp -v /boot/cmdline.txt "${MAIN_BOOT}"
); }

function clmods() { (
    FD_ARGS=(-d 1 -E "$(uname -r)")
    while IFS=$'\n' read -r STOCK_MODULES; do
        FD_ARGS+=(-E "$(basename "${STOCK_MODULES%-*}")*+")
    done < <(fd -- '-v7l\+' /lib/modules)

    fd "${FD_ARGS[@]}" . /lib/modules -x sudo rm -frv
); }

# Function to properly show host with pure
function fixp() {
    eval "$(tmux show-env -s SSH_CONNECTION)" && prompt pure
}
# vi: filetype=zsh
