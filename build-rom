#!/usr/bin/env bash
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2016-2018 Nathan Chancellor
#
# ROM compilation script


###############
#             #
#  FUNCTIONS  #
#             #
###############

# Source our universal functions script and macOS check
source common

function make_command() {
    m "${JOBS_FLAG}" "${@}"
}

################
#              #
#  PARAMETERS  #
#              #
################

PARAMS="${*}"
while [[ ${#} -ge 1 ]]; do
    case ${1} in
        # Required options
        # Device to build
        "-d"|"--device")
            shift && enforce_value "${@}"

            DEVICE=${1} ;;

        # ROM to build
        "-r"|"--rom")
            shift && enforce_value "${@}"

            ROM=${1} ;;

        # Standard options
        # Sync tree before building
        "-s"|"--sync")
            SYNC=true ;;

        # Custom clean target
        "-c"|"--clean")
            CLEAN_TARGET=${1} ;;

        # Custom make target
        "-m"|"--make")
            shift && enforce_value "${@}"

            MAKE_TARGET=${1} ;;

        # Send updates to Telegram
        "-tg"|"--telegram")
            TG=true
            TG_MSG_FILE=$(mktemp)
            trap 'rm -f "${TG_MSG_FILE}"' EXIT ;;

        # user, userdebug, or eng
        "-v"|"--version")
            shift && enforce_value "${@}"

            VARIANT=${1} ;;

        # repopick sequence
        "-rp"|"--repopick")
            REPOPICK=true ;;

        # Special options
        # DU
        "-t"|"--type")
            shift && enforce_value "${@}"
 
            export DU_BUILD_TYPE=${1} ;;

        *)
            die "Invalid parameter detected!" ;;
    esac

    shift
done

if [[ -n ${TG} ]]; then
    {
        echo "\`\`\`"
        echo "Currently executing..."
        echo
        echo "$(basename "${0}") ${PARAMS}"
        echo "\`\`\`"
    } > ${TG_MSG_FILE}
    notify "$(cat ${TG_MSG_FILE})"
fi

# Parameter verification
# If ROM wasn't specified, it's a build for me
if [[ -z ${ROM} ]]; then
    ROM=du-o8x
    DEVICE=taimen
    VARIANT=user
fi

[[ -z ${DEVICE} ]] && die "The device to build is a required parameter!"
[[ -z ${VARIANT} ]] && VARIANT=userdebug

###############
#             #
#  VARIABLES  #
#             #
###############

# OUT_FOLDER: Directory that holds the compiled ROM files
# SOURCE_FOLDER: Directory that holds the ROM source
# ZIP_MOVE: Directory to hold completed ROM zips
ZIP_MOVE_PARENT=${WEB_FOLDER}/me/roms

# Otherwise, define them for our various ROMs
case "${ROM}" in
    "aosp"|"du-o8x"|"du-o8x-caf"|"lineage-15.1")
        SOURCE_FOLDER=${ROM_FOLDER}/${ROM}
        ZIP_MOVE=${ZIP_MOVE_PARENT}/${ROM}/${DEVICE} ;;
    *)
        die "Unknown ROM \"${ROM}\" passed!" ;;
esac

OUT_FOLDER=${SOURCE_FOLDER}/out/target/product/${DEVICE}

###########################
# MOVE INTO SOURCE FOLDER #
# AND START TRACKING TIME #
###########################

START=$(date +%s)
clear
cd "${SOURCE_FOLDER}" || die "Source folder does not exist!"


#############
# REPO SYNC #
#############

# If the sync is requested, do so
if [[ -n ${SYNC} ]]; then
    header "SYNCING LATEST SOURCES"; echo

    repo sync "${JOBS_FLAG}" --force-sync -c --no-clone-bundle --no-tags --optimized-fetch --prune
fi


###########################
# SETUP BUILD ENVIRONMENT #
###########################

header "SETTING UP BUILD ENVIRONMENT"

# Check and see if we are on Arch
# If so, activare a virtual environment for proper Python support
[[ -f /etc/arch-release ]] && mkavenv
source build/envsetup.sh


##################
# PREPARE DEVICE #
##################

header "PREPARING $(echo ${DEVICE} | awk '{print toupper($0)}')"

# Not all roms use breakfast
case ${ROM} in
    "aosp")
        lunch ${ROM}_${DEVICE}-${VARIANT} ;;
    *)
        breakfast ${DEVICE} ${VARIANT} ;;
esac


############
# REPOPICK #
############

if [[ -n ${REPOPICK} ]]; then
    header "RUNNING REPOPICK"
    # Execute in a subshell otherwise everything is fubared
    (
    while [[ ${YN} != "n" ]]; do
        read -r -p "Do you have changes to pick? (y/n) " YN
        case ${YN} in
            y|Y)
                read -r -p "Please enter the change number or topic: " PARAMS
                if [[ -n ${PARAMS//[0-9]/} ]]; then
                    repopick -i --topic "${PARAMS}"
                else
                    repopick -i "${PARAMS}"
                fi ;;
            n|N)
                break ;;
        esac
    done
    )
fi


############
# CLEAN UP #
############

header "CLEANING UP OUT DIRECTORY"

if [[ -n ${CLEAN_TARGET} && ${CLEAN_TARGET} != "noclean" ]]; then
    make_command "${CLEAN_TARGET}"
elif [[ -z ${CLEAN_TARGET} ]]; then
    make_command clobber
fi


############
# BUILDING #
############

header "MAKING FILES"; echo

if [[ -n ${TG} ]]; then
    {
        echo "\`\`\`"
        echo "ROM build starting..."
        echo
        echo "ROM: ${ROM}"
        echo
        echo "Device: ${DEVICE}"
        echo "\`\`\`"
    } > ${TG_MSG_FILE}
    notify "$(cat ${TG_MSG_FILE})"
fi

# Set make_target if unset (not all roms use bacon)
if [[ -z ${MAKE_TARGET} ]]; then
    case "${ROM}" in
        "aosp"|"krexus")
            MAKE_TARGET=otapackage ;;
        "vanilla")
            MAKE_TARGET=vanilla ;;
        *)
            MAKE_TARGET=bacon ;;
    esac
else
    EXIT_NEEDED=true
fi

make_command "${MAKE_TARGET}"

if [[ -n ${EXIT_NEEDED} ]]; then
    echo
    header "BUILD COMPLETED!"
    exit
fi

# There will be a zip in the out folder if successful
FILES=$(find "${OUT_FOLDER}" -maxdepth 1 -name '*.zip' 2>/dev/null)
if [[ -n ${FILES} ]]; then
    # Make build result string reflect successful compilation
    BUILD_RESULT_STRING="BUILD SUCCESSFUL"
    SUCCESS=true

    # Make ZIP_MOVE if it doesn't exist or clean it if it does
    if [[ ! -d "${ZIP_MOVE}" ]]; then
        mkdir -p "${ZIP_MOVE}"
    else
        rm -rf "${ZIP_MOVE:?}"/*
    fi

    if [[ $(echo "${FILES}" | wc -l) -eq 1 ]]; then
        mv "${OUT_FOLDER}"/*.zip* "${ZIP_MOVE}"
    else
        for FILE in ${FILES}; do
            if echo "${FILE}" | grep -v -q ota; then
                mv "${FILE}"* "${ZIP_MOVE}"
            fi
        done
    fi
else
    BUILD_RESULT_STRING="BUILD FAILED"
    SUCCESS=false
fi


######################
# ENDING INFORMATION #
######################

# Deactivate virtualenv if we are on arch
[[ -f /etc/arch-release ]] && rmvenv

# Stop tracking time
END=$(date +%s)
TIME_STRING="$(format_time "${START}" "${END}")"

header "${BUILD_RESULT_STRING}!"

# If the build was successful, print file location, and size
if [[ -n ${SUCCESS} ]]; then
    echo "${RED}FILE LOCATION: $(web_link "${ZIP_MOVE}")"
    echo "SIZE: $(du -h "${ZIP_MOVE}"/*.zip | awk '{print $1}')${RST}"
fi

# Print the time the script finished
# and how long it took regardless of success
echo "${RED}TIME: $(date +%D\ %r | awk '{print toupper($0)}')"
echo "${RED}DURATION: ${TIME_STRING}${RST}"

if [[ -n ${TG} ]]; then
    {
        echo "\`\`\`"
        echo "ROM ${BUILD_RESULT_STRING,,}!"
        if [[ -n ${SUCCESS} ]]; then
            echo
            echo "Location: $(web_link "${ZIP_MOVE}")"
        fi
        echo
        echo "Duration: ${TIME_STRING,,}"
        echo "\`\`\`"
    } > ${TG_MSG_FILE}
    notify "$(cat ${TG_MSG_FILE})"
fi

echo "\a"
