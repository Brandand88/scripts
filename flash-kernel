#!/usr/bin/env bash
#
# Flash Kernel compilation script
#
# Copyright (C) 2016-2018 Nathan Chancellor
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>


###############
#             #
#  FUNCTIONS  #
#             #
###############


# GATHER PARAMETERS
function parse_parameters() {
    # UNSET THE UNIVERSAL OS VARIABLE FOR THIS SCRIPT ONLY
    unset OS
    PARAMS="$*"
    while [[ $# -ge 1 ]]; do
        case ${1} in
            # ANYKERNEL2 BRANCH
            "-ak2-b"|"--anykernel2-branch")
                shift && enforce_value "$@"

                ANYKERNEL2_BRANCH=${1} ;;

            # ANDROID VERSION
            "-av"|"--android-version")
                shift && enforce_value "$@"

                ANDROID_VERSION=${1} ;;

            # BRANCH TO COMPILE; IF ABSENT, USE CURRENT BRANCH
            "-b"|"--branch")
                shift && enforce_value "$@"

                KERNEL_BRANCH=${1} ;;

            # DEFCONFIG TO USE WHILE COMPILING; IF ABSENT, USE FLASH_DEFCONFIG
            "-c"|"--config")
                shift && enforce_value "$@"

                DEFCONFIG=${1} ;;

            # COMPILER TO USE
            "-cc"|"--compiler")
                shift && enforce_value "$@"

                COMPILER=${1} ;;

            # CLANG TOOLCHAIN TO USE WHILE COMPILING
            "-ct"|"--clang-toolchain")
                shift && enforce_value "$@"

                CLANG_FOLDER=${1} ;;

            # DEVICE TO COMPILE FOR; IF ABSENT, USE PIXEL 2 XL
            "-d"|"--device")
                shift && enforce_value "$@"

                DEVICE=${1} ;;

            # SHOW FULL COMPILATION, NOT JUST WARNINGS AND ERRORS
            "-D"|"--debug")
                DEBUG=true ;;

            # EXTRA MAKE FLAGS IF NECESSARY (LIKE MISMATCH CONFIG)
            "-f"|"--flags")
                shift && enforce_value "$@"

                EXTRA_MAKE_FLAGS=${1} ;;

            # GCC TOOLCHAIN TO USE WHILE COMPILING
            "-gt"|"--gcc-toolchain")
                shift && enforce_value "$@"

                GCC_FOLDER=${1} ;;

            # DO NOT PACKAGE KERNEL IMAGE
            "-io"|"--image-only")
                IMAGE_ONLY=true ;;

            # WHERE TO MOVE ZIP AFTER COMPILATION (PRIVATE, TEST, OR PUBLIC)
            "-m"|"--mode")
                shift && enforce_value "$@"

                MODE=${1} ;;

            # DON'T MOVE/DELETE ZIPS IN FILE_MOVE FOLDER
            "-n"|"--no-clean")
                NOCLEAN=true ;;

            # (ONEPLUS 5 ONLY) CUSTOM ROMS OR OXYGENOS BUILD
            "-os"|"--operating-system")
                shift && enforce_value "$@"

                OS_LIST=${1} ;;

            # HOW TO PACKAGE KERNEL (ZIP OR BOOT IMAGE)
            "-p"|"--package-method")
                shift && enforce_value "$@"

                PACKAGE_METHOD=${1} ;;

            # BETA VERSIONING (# IN KERNEL VERSION)
            "-r"|"--revision")
                shift && enforce_value "$@"

                REVISION=${1} ;;

            # VERSION CODE
            "-v"|"--version")
                shift && enforce_value "$@"

                VERSION=${1} ;;

            *)
                die "Invalid parameter" ;;
        esac

        shift
    done

    # DEFAULT PARAMETERS
    if [[ -z ${DEVICE} ]]; then
        DEVICE="taimen"
    fi
    if [[ -z ${MODE} ]]; then
        MODE="personal"
    fi

    # EASY TO USE VARIABLES FOR IF STATEMENTS
    if [[ ${MODE} != "stable" ]]; then
        NOT_STABLE=true
    fi
}


# DEVICE "BOARD" FLAGS
function device_flags() {
    case ${DEVICE} in
        "op5")
            # REQUIRED FLAGS
            if [[ -z ${ANDROID_VERSION} ]]; then
                ANDROID_VERSION=8.x
            fi

            AK2_SFX=${ANDROID_VERSION}

            BUILD_FUNCTION=build_kernel_op5

            if [[ -z ${COMPILER} ]]; then
                COMPILER=clang
            fi

            if [[ -z ${CLANG_FOLDER} ]]; then
                case ${MODE} in
                    "personal") CLANG_FOLDER=/opt/clang-7.x ;;
                    *) CLANG_FOLDER=/opt/clang-6.x ;;
                esac
            fi

            DEVICE_NAME_FILE=${DEVICE^^}
            DEVICE_NAME_GITHUB=${DEVICE}
            DEVICE_NAME_WEB=${DEVICE}

            if [[ -z ${GCC_FOLDER} ]]; then
                GCC_FOLDER="/opt/linaro-gcc"
            fi

            MATCH_FLAG="${DEVICE_NAME_FILE}-v${VERSION::1}"

            PACKAGE_METHOD=zip ;;

        "taimen"|"walleye")
            # REQUIRED FLAGS
            if [[ -z ${ANDROID_VERSION} ]]; then
                ANDROID_VERSION=8.1.0
            fi
            AK2_SFX=${ANDROID_VERSION}

            BUILD_FUNCTION=build_kernel

            if [[ -z ${COMPILER} ]]; then
                COMPILER=clang
            fi

            if [[ -z ${CLANG_FOLDER} ]]; then
                case ${MODE} in
                    "personal") CLANG_FOLDER=/opt/clang-7.x ;;
                    *) CLANG_FOLDER=/opt/clang-6.x ;;
                esac
            fi

            if [[ -z ${DEFCONFIG} ]]; then
                DEFCONFIG="flash_defconfig"
            fi

            DEVICE_NAME_FILE=${DEVICE^}
            DEVICE_NAME_GITHUB=wahoo
            DEVICE_NAME_WEB=${DEVICE}

            if [[ -z ${GCC_FOLDER} ]]; then
                GCC_FOLDER="/opt/linaro-gcc"
            fi

            MATCH_FLAG="${DEVICE_NAME_FILE}-v${VERSION::1}"

            if [[ -z ${PACKAGE_METHOD} ]]; then
                case ${MODE} in
                    "personal") PACKAGE_METHOD=zip ;;
                    *) PACKAGE_METHOD=image_zip ;;
                esac
            fi ;;

        *)
            die "Invalid device!" ;;
    esac
}


# SET UP OTHER VARIABLES
function generate_variables() {
    # FOLDERS
    SOURCE_FOLDER=${KERNEL_FOLDER}/flash/${DEVICE_NAME_GITHUB}
    OUT_FOLDER=${SOURCE_FOLDER}/out
    ANYKERNEL2_FOLDER=${KERNEL_FOLDER}/flash/anykernel2-${DEVICE_NAME_GITHUB}
    FILE_MOVE_HEAD=${WEB_FOLDER}/downloads

    case ${MODE} in
        "alpha"|"beta"|"rc"|"stable"|"tmp")
            FILE_MOVE=${FILE_MOVE_HEAD}/kernels/${DEVICE_NAME_WEB}/${ANDROID_VERSION}/${MODE}
            FILE_MOVE_OLD=$(readlink -f "${FILE_MOVE}/../archive") ;;
        "personal")
            FILE_MOVE=$(readlink -f "${FILE_MOVE_HEAD}/../me/fk/${DEVICE_NAME_WEB}") ;;
        *)
            die "Invalid mode specified!" ;;
    esac

    # COMPILATION VARIABLES
    ARCHITECTURE=arm64
    CCACHE=$(command -v ccache)
    GCC=$(find ${GCC_FOLDER}/bin -type f -name '*-gcc' | head -n1)
    if [[ -z ${GCC} ]]; then
        die "GCC toolchain could not be found!"
    fi
    CC=${GCC%gcc}
    if [[ ${COMPILER} = "clang" ]]; then
        CLANG=${CLANG_FOLDER}/bin/clang
        if [[ ! -f ${CLANG} ]]; then
            die "Clang toolchain could not be found!"
        fi
        case "$(basename ${CLANG_FOLDER})" in
            "clang-3289846"|"clang-3859424"|"clang-4053586")
                CLANG_VERSION=$(${CLANG} --version | head -n 1) ;;
            "clang-4393122"|"clang-4479392"|"clang-4556391")
                CLANG_VERSION=$(${CLANG} --version | head -n 1 | cut -d'(' -f1,4) ;;
            *)
                CLANG_VERSION=$(${CLANG} --version | head -n 1 | cut -d'(' -f1)
                if [[ ${MODE} = "personal" ]]; then
                    SCRIPT_OPT_FLAGS="-mllvm -polly \
                                      -mllvm -polly-run-dce \
                                      -mllvm -polly-run-inliner \
                                      -mllvm -polly-opt-fusion=max \
                                      -mllvm -polly-ast-use-context \
                                      -mllvm -polly-vectorizer=stripmine \
                                      -mllvm -polly-detect-keep-going"
                fi ;;
        esac
        # shellcheck disable=SC2001
        CLANG_VERSION="$(echo "${CLANG_VERSION}" | sed 's/[[:space:]]*$//')"
        # ONEPLUS 5 8.0.0 NEEDS A SPACE AFTER THE COMPILER VERSION IN ORDER NOT TO
        # BREAK THE KERNEL VERSION IN ABOUT PHONE
        if [[ ${DEVICE} = "op5" && ${ANDROID_VERSION} = "8.0.0" ]]; then
            CLANG_VERSION="${CLANG_VERSION} "
        fi
    fi
}


# CLEAN UP
function clean_up() {
    # CLEAN ANYKERNEL2 FOLDER
    cd "${ANYKERNEL2_FOLDER}" || die "AnyKernel2 source is missing!"
    if [[ -z ${ANYKERNEL2_BRANCH} ]]; then
        ANYKERNEL2_BRANCH=${DEVICE_NAME_GITHUB}-flash-${AK2_SFX}
    fi
    git checkout ${ANYKERNEL2_BRANCH}
    git clean -fxd

    # ONLY CHECKOUT IF KERNEL_BRANCH EXISTS AND WE AREN'T BISECTING OR REBASING
    cd "${SOURCE_FOLDER}" || die "Kernel source is missing!"
    if [[ -n ${KERNEL_BRANCH} ]]; then
        if [[ ! $(git status | ag "bisec|rebas") ]]; then
            git checkout "${KERNEL_BRANCH}"
        fi
    # OTHERWISE, NOTATE CURRENT BRANCH FOR CHANGELOG
    else
        KERNEL_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    fi
}


# MAKE WRAPPER FOR MAKE FUNCTION FOR GCC
function make_wrapper_gcc() {
    make "${JOBS_FLAG}" \
         ARCH=${ARCHITECTURE} \
         CROSS_COMPILE="${CCACHE} ${CC}" \
         KBUILD_BUILD_VERSION="${KBUILD_BUILD_VERSION}" \
         LOCALVERSION="${LOCALVERSION}" \
         O="${OUT_FOLDER}" \
         "$@"
}


# MAKE WRAPPER FOR MAKE FUNCTION FOR CLANG
function make_wrapper_clang() {
    PATH=${BIN_FOLDER}:${PATH} make "${JOBS_FLAG}" \
                                    ARCH=${ARCHITECTURE} \
                                    CC="${CCACHE} ${CLANG}" \
                                    CLANG_TRIPLE=aarch64-linux-gnu- \
                                    CROSS_COMPILE="${CC}" \
                                    HOSTCC="${CCACHE} ${CLANG}" \
                                    KBUILD_COMPILER_STRING="${CLANG_VERSION}" \
                                    KBUILD_BUILD_VERSION="${KBUILD_BUILD_VERSION}" \
                                    LOCALVERSION="${LOCALVERSION}" \
                                    O="${OUT_FOLDER}" \
                                    SCRIPT_OPT_FLAGS="${SCRIPT_OPT_FLAGS}" \
                                    "$@"
}


# SILENCE OUTPUT FUNCTION
function kmake() {
    # ONLY SHOW ERRORS AND WARNINGS WHEN COMPILING (UNLESS DEBUG)
    if [[ ${DEBUG} ]]; then
        make_wrapper_${COMPILER} "$@"
    else
        make_wrapper_${COMPILER} "$@" |& ag --no-color --after=10 "error:|warning:" && echo
    fi
}


# SETUP COMPILATION
function generate_version() {
    # GENERATE KERNEL VERSION
    KVER=$(make kernelversion)

    if [[ ${MODE} = "personal" ]]; then
        LOCALVERSION_BASELINE="FlashKernel"
    else
        LOCALVERSION_BASELINE="FlashKernel-${DEVICE_NAME_FILE}"
    fi
    LOCALVERSION="-${LOCALVERSION_BASELINE}"

    # ADD VERSION IF PRESENT
    if [[ -n ${VERSION} ]]; then
        VERSION_TEXT="-v${VERSION}"
        LOCALVERSION="${LOCALVERSION}${VERSION_TEXT}"
    fi

    # IF THE MODE ISN'T STABLE, ADD SHA INFORMATION TO THE FILE FOR DEBUGGING
    if [[ ${NOT_STABLE} ]]; then
        # FURTHERMORE, IF IT IS A PERSONAL BUILD, USE A SHORTER HASH LENGTH
        [[ ${MODE} = "personal" ]] && NUM=8 || NUM=12
        SHA="-g$(git rev-parse --verify --short=${NUM} HEAD)"
        LOCALVERSION="${LOCALVERSION}${SHA}"
    fi

    # IF THERE ARE UNCOMMITTED CHANGES, MARK AS DIRTY
    if [[ $( git diff-index --name-only HEAD ) ]]; then
        DIRTY="-dirty"
        LOCALVERSION="${LOCALVERSION}${DIRTY}"
    fi

    # GENERATE FIRST LINE VARIABLE
    # CONFIG_LOCALVERSION + CONFIG_LOCALVERSION_AUTO ARE DISABLED
    FIRST_LINE="${KVER}${LOCALVERSION}"

    # IF REVISION EXISTS, USE IT FOR THE FILE
    if [[ -n ${REVISION} ]]; then
        REVISION_FOR_FILE=".${MODE::1}${REVISION}"

        # IF REVISION IS GREATER THAN OR EQUAL TO 1, PASS IT TO THE BUILD SYSTEM
        if [[ ${REVISION} -ge 1 ]]; then
            KBUILD_BUILD_VERSION=${REVISION}
        fi
    fi

    # GENERATE SECOND LINE VARIABLE
    SECOND_LINE="$(whoami)@$(uname -n) #${KBUILD_BUILD_VERSION:-1}"

    # GENERATE THIRD LINE VARIABLE
    THIRD_LINE="$(date)"

    # EXPORT KERNEL_NAME BASED ON THE ABOVE INFORMATION
    KERNEL_NAME="${LOCALVERSION_BASELINE}${VERSION_TEXT}${REVISION_FOR_FILE}${SHA}"

    # SET FINAL NAMES
    if [[ ${PACKAGE_METHOD} =~ "image" ]]; then
        BOOT_IMAGE=${KERNEL_NAME}-boot.img
        DTBO_IMAGE=${KERNEL_NAME}-dtbo.img
    fi

    if [[ ${PACKAGE_METHOD} =~ "zip" ]]; then
        UNSIGNED_ZIP=${KERNEL_NAME}-unsigned.zip
        SIGNAPK_ZIP=${KERNEL_NAME}-signapk.zip
        ADJUSTED_ZIP=${KERNEL_NAME}-adjusted.zip
        SIGNED_ZIP=${KERNEL_NAME}.zip
    fi
}


# PRINT VARIABLES
function print_variables() {
    echo "${BOLD}Kernel version:${RST}    ${FIRST_LINE}"
    echo "                   ${SECOND_LINE}"
    echo "                   ${THIRD_LINE}\n"

    echo "${BOLD}Kernel branch:${RST}     ${KERNEL_BRANCH}\n"

    if [[ ${COMPILER} = "clang" ]]; then
        echo "${BOLD}Clang info:${RST}        ${CLANG_VERSION}"
        echo "                   ${CLANG}\n"
    fi

    echo "${BOLD}GCC info:${RST}          $(${GCC} --version | head -1)"
    echo "                   ${GCC}\n"
}


# MAKE KERNEL
function build_kernel() {
    # CLEAN SOURCE FOLDER
    git clean -dfqx

    # POINT TO PROPER DEFCONFIG AND GENERATE VERSION FILES
    kmake ${DEFCONFIG} prepare

    # MAKE THE KERNEL
    # shellcheck disable=SC2086
    kmake ${EXTRA_MAKE_FLAGS}

    OUT_KERNEL_IMAGE=$(find "${OUT_FOLDER}/arch/${ARCHITECTURE}" -name 'Image.*-dtb' 2>/dev/null)
    OUT_DTBO_IMAGE=$(find "${OUT_FOLDER}/arch/${ARCHITECTURE}" -name 'dtbo.img' 2>/dev/null)

    if [[ -n ${OUT_KERNEL_IMAGE} ]]; then
        echo "${GRN}${OS_STRING}$(basename "${OUT_KERNEL_IMAGE}") compiled successfully!${RST}\n"
        move_kernel_files
    else
        echo "${RED}Kernel image not found!${RST}\n"
        ending_info
    fi
}


# MOVE KERNEL FILES AFTER COMPILATION
function move_kernel_files() {
    if [[ ! ${IMAGE_ONLY} ]]; then
        # MOVE THE KERNEL IMAGE
        mkdir -p "${ANYKERNEL2_FOLDER}${ANYKERNEL2_SUB_FOLDER}"
        cp "${OUT_KERNEL_IMAGE}" "${ANYKERNEL2_FOLDER}${ANYKERNEL2_SUB_FOLDER}"
        if [[ -n ${OUT_DTBO_IMAGE} ]]; then
            cp "${OUT_DTBO_IMAGE}" "${ANYKERNEL2_FOLDER}/dtbo"
        fi
        cat "${OUT_FOLDER}/include/config/kernel.release" > "${ANYKERNEL2_FOLDER}/version"

        # GRAB MODULES TOO IF THEY ARE PRESENT
        MODULES="$(find "${OUT_FOLDER}" -name '*.ko')"
        if [[ -n ${MODULES} ]]; then
            MODULES_FOLDER=${ANYKERNEL2_FOLDER}/ramdisk/modules
            mkdir -p "${MODULES_FOLDER}"
            for MOD in ${MODULES}; do
                "${CC}"strip --strip-unneeded "${MOD}"
                "${OUT_FOLDER}"/scripts/sign-file sha512 \
                                                  "${OUT_FOLDER}/certs/signing_key.pem" \
                                                  "${OUT_FOLDER}/certs/signing_key.x509" \
                                                  "${MOD}"
                cp "${MOD}" "${MODULES_FOLDER}"
            done
        fi
    fi
}


# BUILD FUNCTION SPECIFICALLY FOR THE ONEPLUS 5
function build_kernel_op5() {
    if [[ -z ${OS} ]]; then
        OS_LIST="OOS Custom"
    fi

    for OS in ${OS_LIST}; do
        ANYKERNEL2_SUB_FOLDER="/kernels/${OS,,}"
        DEFCONFIG=flash-${OS,,}_defconfig
        OS_STRING="${OS} "
        build_kernel
    done
}


# PACKAGE ZIP
function package_zip() {
    header "PACKAGING AND SIGNING ZIP"

    echo "${BOLD}Signed zip name:${RST}   ${SIGNED_ZIP}\n"
    echo "${BOLD}Kernel modules:${RST}    $(find "${MODULES_FOLDER}" -type f | wc -l)\n"

    cd "${ANYKERNEL2_FOLDER}" || die "AnyKernel2 folder shift failed!"

    # PACKAGE THE ZIP WITHOUT THE README
    zip -q -r9 "${UNSIGNED_ZIP}" -- * -x README.md "${UNSIGNED_ZIP}"

    # SIGN ZIP
    java -jar "${BIN_FOLDER}/signapk.jar" \
              "${BIN_FOLDER}/testkey.x509.pem" \
              "${BIN_FOLDER}/testkey.pk8" \
              "${UNSIGNED_ZIP}" \
              "${SIGNAPK_ZIP}"

    "${BIN_FOLDER}"/zipadjust "${SIGNAPK_ZIP}" "${ADJUSTED_ZIP}" &>/dev/null

    java -jar "${BIN_FOLDER}/minsignapk.jar" \
              "${BIN_FOLDER}/testkey.x509.pem" \
              "${BIN_FOLDER}/testkey.pk8" \
              "${ADJUSTED_ZIP}" \
              "${SIGNED_ZIP}"

    # IF PACKAGING FAILED, ERROR OUT
    if [[ ! -f ${SIGNED_ZIP} ]]; then
        echo "${RED}Kernel zip not found after signing!${RST}\n"
        ending_info
    else
        echo "${GRN}Kernel zip successfully generated!${RST}\n"
    fi
}


# SILENCE OUTPUT FUNCTION FOR PACKAGE_IMAGE
function package_image() {
    AOSP_FOLDER=${KERNEL_FOLDER}/sources/aosp-pixel2
    cd "${AOSP_FOLDER}" || die "AOSP source is not synced!"

    git -C device/google/wahoo-kernel reset --hard --quiet

    cp "${OUT_KERNEL_IMAGE}" "${AOSP_FOLDER}/device/google/wahoo-kernel"
    cp "${OUT_DTBO_IMAGE}" "${AOSP_FOLDER}/device/google/wahoo-kernel"

    header "COMPILING BOOT IMAGE"

    echo "${BOLD}Image name:${RST}        ${BOOT_IMAGE}\n"

    echo "${BOLD}Current tag:${RST}       $(git -C device/google/wahoo describe --tags HEAD)\n"

    package_image_wrapper

    COMPILED_BOOT_IMAGE=${AOSP_FOLDER}/out/target/product/${DEVICE_NAME_WEB}/boot.img

    if [[ ! -f ${COMPILED_BOOT_IMAGE} ]]; then
        echo "${RED}Boot image not found!${RST}\n" && ending_info
    else
        echo "${GRN}Boot image compiled successfully!${RST}\n"
    fi
}


# PACKAGE IMAGE WRAPPER
function package_image_wrapper() {
    # ONLY SHOW ERRORS WHEN COMPILING (UNLESS DEBUG)
    if [[ ${DEBUG} ]]; then
        package_image_commands
    else
        package_image_commands |& ag --no-color "error:" && echo
    fi
}


# PACKAGE IMAGE COMMANDS
function package_image_commands() {
    mkavenv
    . build/envsetup.sh
    lunch aosp_${DEVICE_NAME_WEB}-user
    make "${JOBS_FLAG}" clean
    make "${JOBS_FLAG}" bootimage
    rmvenv
}


# PACKAGE BOTH AN IMAGE AND ZIP
function package_image_zip() {
    package_zip
    package_image
}


# SETUP FOLDERS
function setup_folders() {
    echo "  - Setting up final folders"

    # IF ZIPMOVE DOESN'T EXIST, MAKE IT
    if [[ ! -d ${FILE_MOVE} ]]; then
        mkdir -p "${FILE_MOVE}"
    fi

    # IF IT ISN'T A STABLE BUILD, CLEAN THE FOLDER
    if [[ ${NOT_STABLE} ]]; then
        if [[ ! ${NOCLEAN} ]]; then
            rm -rf "${FILE_MOVE:?}"/*
        fi
    else
        # CLEAN OLD TEST BUILDS
        cd "${FILE_MOVE}/.." || die "Shift to zip folder failed!"
        rm -rf {alpha,beta,rc,tmp}/*
        git add .
        if [[ -n $(git status --porcelain) ]]; then
            git commit --gpg-sign --quiet --signoff --message "${DEVICE_NAME_FILE}: Remove old test builds"
            git push --quiet
        fi

        # MOVE THE OLD FILES TO AN ARCHIVE FOLDER UNLESS NO CLEAN IS REQUESTED
        if [[ ! ${NOCLEAN} ]]; then
            if [[ ! -d ${FILE_MOVE_OLD} ]]; then
                mkdir -p "${FILE_MOVE_OLD}"
            fi
            find "${FILE_MOVE}" -maxdepth 1 -type f -exec mv {} "${FILE_MOVE_OLD}" \; &>/dev/null
        fi
    fi
}


# MOVE FILES AND GENERATE MD5SUM
function move_flashable_files() {
    echo "  - Moving files"

    if [[ ${PACKAGE_METHOD} =~ "image" ]]; then
        mv "${COMPILED_BOOT_IMAGE}" "${FILE_MOVE}/${BOOT_IMAGE}"
        md5sum "${FILE_MOVE}/${BOOT_IMAGE}" > "${FILE_MOVE}/${BOOT_IMAGE}.md5"

        mv "$(dirname "${OUT_KERNEL_IMAGE}")/dtbo.img" "${FILE_MOVE}/${DTBO_IMAGE}"
        md5sum "${FILE_MOVE}/${DTBO_IMAGE}" > "${FILE_MOVE}/${DTBO_IMAGE}.md5"
    fi

    if [[ ${PACKAGE_METHOD} =~ "zip" ]]; then
        mv "${ANYKERNEL2_FOLDER}/${SIGNED_ZIP}" "${FILE_MOVE}"
        md5sum "${FILE_MOVE}/${SIGNED_ZIP}" > "${FILE_MOVE}/${SIGNED_ZIP}.md5"
    fi
}


# GENERATE CHANGELOG
function generate_changelog() {
    echo "  - Generating changelog"

    GITHUB="http://github.com/nathanchance"
    CHANGELOG=${FILE_MOVE}/${KERNEL_NAME}-changelog.txt

    # KERNEL SOURCE FIRST
    cd "${SOURCE_FOLDER}" || die "Kernel source is missing!"

    # WE NEED TO MARK THE PREVIOUS TAG FOR CHANGELOG
    PREV_TAG_NAME=$(git tag --sort=-taggerdate -l "*${MATCH_FLAG}*" | head -n 1)
    if [[ -z ${PREV_TAG_NAME} ]]; then
        return
    fi
    RANGE=${PREV_TAG_NAME}..HEAD

    # SHOW WHERE COMMITS ARE LOCATED
    {
        echo "${GITHUB}/${DEVICE_NAME_GITHUB}/commits/${KERNEL_BRANCH}\n"

        # USE SHORTLOG FOR PRETTY OUTPUT
        git log "${RANGE}" | git shortlog

        # GENERATE A DIFF AS WELL
        git diff --find-renames --stat --summary "${RANGE}"
    } > "${CHANGELOG}"

    if [[ ${PACKAGE_METHOD} =~ "zip" ]]; then
        # ANYKERNEL2 NEXT
        cd "${ANYKERNEL2_FOLDER}" || die "AnyKernel2 source is missing!"

        # WE ONLY WANT TO SHOW ANYKERNEL2 CHANGES IF THERE HAVE BEEN SOME
        NUM_COMMITS=$(git log "${RANGE}" --pretty=oneline | wc -l)

        if [[ ${NUM_COMMITS} -gt 0 ]]; then
            {
                echo "\n\n${GITHUB}/AnyKernel2/commits/${ANYKERNEL2_BRANCH}\n"
    
                git log "${RANGE}" | git shortlog

                git diff --find-renames --stat --summary "${RANGE}"
            } >> "${CHANGELOG}"
        fi
    fi
}


# PUSH KERNEL FILES (ZIPS/IMAGES) TO GITHUB
function push_flashable_files() {
    echo "  - Pushing files to GitHub"

    cd "${FILE_MOVE}" || die "Zip folder doesn't exist!"

    git add ..

    git commit --gpg-sign --quiet --signoff --message "${KERNEL_NAME}"

    git push --quiet
}


# TAG FOR STABLE RELEASES
function tag_stable() {
    echo "  - Tagging ${KERNEL_NAME} as stable"

    cd "${SOURCE_FOLDER}" || die "Kernel source is missing!"

    git tag --sign --annotate "${KERNEL_NAME}" --message "${KERNEL_NAME}"
    git push --quiet origin "${KERNEL_NAME}"

    if [[ ${PACKAGE_METHOD} =~ "zip" ]]; then
        cd "${ANYKERNEL2_FOLDER}" || die "AnyKernel2 source is missing!"

        git tag --sign --annotate "${KERNEL_NAME}" --message "${KERNEL_NAME}"
        git push --quiet origin "${KERNEL_NAME}"
    fi
}


# AFTER BUILD TASKS
function after_build_tasks () {
    if [[ ! ${IMAGE_ONLY} ]]; then
        package_${PACKAGE_METHOD}

        header "SHUFFLING FILES"

        setup_folders
        move_flashable_files

        if [[ ${MODE} != "personal" ]]; then
            generate_changelog
            push_flashable_files
            if [[ ! ${NOT_STABLE} ]]; then
                tag_stable
            fi
        fi

        echo
    fi
}


# PRINT FILE INFO
function ending_info() {
    header "SCRIPT FINISHED!"

    END=$(date +"%s")
    DURATION=$(format_time "${END}" "${START}")

    echo "\n$(date +"%m/%d/%Y %H:%M:%S"): $(basename "${BASH_SOURCE[0]}") ${PARAMS}" >> "${LOG}"

    if [[ "$*" =~ "-s" ]]; then
        echo "BUILD SUCCESSFUL IN ${DURATION}" >> "${LOG}"
        if [[ ! ${IMAGE_ONLY} ]]; then
            FILE_LOCATION=$(web_link "${FILE_MOVE}")
            echo "FILE LINK: ${FILE_LOCATION}" >> "${LOG}"

            echo "${RED}FILE LOCATION: ${FILE_LOCATION}"
            case ${PACKAGE_METHOD} in
                "image")
                    echo "SIZE: $(du -h "${FILE_MOVE}/${BOOT_IMAGE}" |
                                      awk '{print $1}')${RST}" ;;
                "zip")
                    echo "SIZE: $(du -h "${FILE_MOVE}/${SIGNED_ZIP}" |
                                      awk '{print $1}')${RST}" ;;
            esac
        fi
    else
        echo "BUILD FAILED IN ${DURATION}" >> "${LOG}"
    fi

    echo "${RED}DURATION: ${DURATION}${RST}"
    echo
    echo "\a"
    exit
}



################
#              #
# SCRIPT START #
#              #
################

# SOURCE OUR UNIVERSAL FUNCTIONS SCRIPT AND MAC CHECK
source common

# START TRACKING TIME
START=$(date +"%s")

clear
echo "${RED}"
echo
echo "================================================================================================"
echo
echo
echo "  ___________________________________  __   ______ _______________________   ________________   "
echo "  ___  ____/__  /___    |_  ___/__  / / /   ___  //_/__  ____/__  __ \__  | / /__  ____/__  /   "
echo "  __  /_   __  / __  /| |____ \__  /_/ /    __  ,<  __  __/  __  /_/ /_   |/ /__  __/  __  /    "
echo "  _  __/   _  /___  ___ |___/ /_  __  /     _  /| | _  /___  _  _, _/_  /|  / _  /___  _  /___  "
echo "  /_/      /_____/_/  |_/____/ /_/ /_/      /_/ |_| /_____/  /_/ |_| /_/ |_/  /_____/  /_____/  "
echo
echo
echo
echo "================================================================================================"
echo


#################
# MAKING KERNEL #
#################

header "COMPILING KERNEL"

# PARSE COMMAND LINE PAREMETERS AND SETUP OPTIONS
parse_parameters "$@"
device_flags
generate_variables

# DON'T SHOW CLEAN UP OUTPUT
clean_up &>/dev/null

# GENERATE VARIABLES SUCH AS VERSIONS
generate_version

# PRINT RELEVANT VARIABLES
print_variables

# BUILD KERNEL
${BUILD_FUNCTION}

# AFTER BUILD TASKS
after_build_tasks

# PRINT FILE INFO AND TIME
ending_info -s
