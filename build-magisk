#!/usr/bin/env bash
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
# Copyright (C) 2018 Nathan Chancellor
#
# Builds a Magisk zip and APK then sets up a JSON file

# Source common functions
source "$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" || return; pwd)/common"
trap 'echo; die "Manually aborted!"' SIGINT SIGTERM

# Parse parameters
while [[ ${#} -ge 1 ]]; do
    case ${1} in
        "-b"|"--build-only")
            BUILD_ONLY=true ;;
        "-h"|"--hash")
            shift && enforce_value "${@}"
            HASH=${1} ;;
        "-v"|"--version")
            shift && enforce_value "${@}"
            VERSION=${1}
            shift && enforce_value "${@}"
            VERSION_CODE=${1}
            VERSION_SUFFIX=${VERSION_CODE:4:${#VERSION_CODE}} ;;
    esac
    shift
done

# Parameter sanity check
[[ -z ${VERSION} || -z ${VERSION_CODE} ]] && die "Version or version code is not set!"
[[ -z ${HASH} ]] && HASH=origin/master

# Existence sanity checks
cd "${HOME}/repos/magisk" || die "Magisk folder doesn't exist, please clone!"
[[ ! -f config.prop ]] && die "config.prop not found!"
[[ ! -f release-key.jks ]] && die "keystore file not found!"
[[ ! -d ${TC_FOLDER}/frankendk ]] && die "Please clone topjohnwu/FrankeNDK to ${TC_FOLDER}!"

# Update the repo
header "Updating repos"
git fetch origin
git reset --hard "${HASH}"
git submodule update --init --recursive

# Clean up
header "Cleaning up"
git rf app/build.gradle
git cl --exclude config.prop --exclude release-key.jks

# Patch config with proper versions
sed -e "/^version=/s/=.*/=${VERSION}/" \
    -e "/^versionCode=/s/=.*/=${VERSION_CODE}/" \
    -i config.prop

# Patch APK with the proper version code
APK_VERSION=$(grep versionName app/build.gradle | head -n1 | cut -d \" -f 2)
APK_VERSION_CODE=$(grep versionCode app/build.gradle | head -n1 | awk '{print $2}')
sed -i "s/${APK_VERSION_CODE}/${APK_VERSION_CODE}${VERSION_SUFFIX}/g" app/build.gradle
APK_VERSION_CODE=${APK_VERSION_CODE}${VERSION_SUFFIX}

# Build!
header "Building Magisk"
ANDROID_NDK_HOME=${TC_FOLDER}/frankendk ./build.py -r -v all

# Only move files if the build actually succeeded
if [[ -f out/magisk-release.zip && -z ${BUILD_ONLY} ]]; then
    FOLDER=${WEB_FOLDER}/downloads/magisk
    SHA="-g$(git rev-parse --verify --short=12 ${HASH})"
    APK="MagiskManager-v${APK_VERSION}(${APK_VERSION_CODE})${SHA}.apk"
    ZIP="Magisk-v${VERSION}(${VERSION_CODE})${SHA}.zip"
    UNINSTALLER="Magisk-uninstaller${SHA}.zip"

    # Move files
    header "Moving files"
    mkdir -p "${FOLDER}"
    mv -v out/app-release.apk "${FOLDER}/${APK}"
    mv -v out/magisk-release.zip "${FOLDER}/${ZIP}"
    mv -v out/magisk-uninstaller.zip "${FOLDER}/${UNINSTALLER}"

    # Generate an updater.json
    {
        echo "{"
        echo "  \"app\": {"
        echo "    \"version\": \"${APK_VERSION}\","
        echo "    \"versionCode\": \"${APK_VERSION_CODE}\","
        echo "    \"link\": \"$(web_link "${FOLDER}/${APK}")\","
        echo "    \"note\": \"https://raw.githubusercontent.com/nathanchance/magisk-files/master/README.md\""
        echo "  },"
        echo "  \"magisk\": {"
        echo "    \"version\": \"${VERSION}\","
        echo "    \"versionCode\": \"${VERSION_CODE}\","
        echo "    \"link\": \"$(web_link "${FOLDER}/${ZIP}")\","
        echo "    \"note\": \"https://raw.githubusercontent.com/nathanchance/magisk-files/master/README.md\","
        echo "    \"md5\": \"$(md5sum "${FOLDER}/${ZIP}" | awk '{print $1}')\""
        echo "  },"
        echo "  \"uninstaller\": {"
        echo "    \"link\": \"$(web_link "${FOLDER}/${UNINSTALLER}")\""
        echo "  }"
        echo "}"
    } > "${FOLDER}/updater.json"

    cd "${FOLDER}" || die "Can't move into ${FOLDER}"
    git add -f .
    echo
    git ac -m "magisk-files: ${VERSION_CODE}"
    git push
    echo
fi
